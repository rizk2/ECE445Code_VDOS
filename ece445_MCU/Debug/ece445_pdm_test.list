
ece445_pdm_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001282c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002290  0801296c  0801296c  0001396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014bfc  08014bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014c04  08014c04  00015c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014c08  08014c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000008  08014c0c  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000090  08014c94  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c8  08014cc9  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001954  200000dc  08014cda  000160dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a30  08014cda  00016a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08014cda  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00035e71  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000072d2  00000000  00000000  0004c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003020  00000000  00000000  00053be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000024f8  00000000  00000000  00056c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030926  00000000  00000000  000590f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003b9ed  00000000  00000000  00089a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010f7ad  00000000  00000000  000c540b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000086  00000000  00000000  001d4bb8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d668  00000000  00000000  001d4c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  001e22a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000dc 	.word	0x200000dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08012954 	.word	0x08012954

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e0 	.word	0x200000e0
 800017c:	08012954 	.word	0x08012954

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000810:	f000 b988 	b.w	8000b24 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	468e      	mov	lr, r1
 8000834:	4604      	mov	r4, r0
 8000836:	4688      	mov	r8, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4617      	mov	r7, r2
 8000840:	d962      	bls.n	8000908 <__udivmoddi4+0xdc>
 8000842:	fab2 f682 	clz	r6, r2
 8000846:	b14e      	cbz	r6, 800085c <__udivmoddi4+0x30>
 8000848:	f1c6 0320 	rsb	r3, r6, #32
 800084c:	fa01 f806 	lsl.w	r8, r1, r6
 8000850:	fa20 f303 	lsr.w	r3, r0, r3
 8000854:	40b7      	lsls	r7, r6
 8000856:	ea43 0808 	orr.w	r8, r3, r8
 800085a:	40b4      	lsls	r4, r6
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f fc87 	uxth.w	ip, r7
 8000864:	fbb8 f1fe 	udiv	r1, r8, lr
 8000868:	0c23      	lsrs	r3, r4, #16
 800086a:	fb0e 8811 	mls	r8, lr, r1, r8
 800086e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000872:	fb01 f20c 	mul.w	r2, r1, ip
 8000876:	429a      	cmp	r2, r3
 8000878:	d909      	bls.n	800088e <__udivmoddi4+0x62>
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000880:	f080 80ea 	bcs.w	8000a58 <__udivmoddi4+0x22c>
 8000884:	429a      	cmp	r2, r3
 8000886:	f240 80e7 	bls.w	8000a58 <__udivmoddi4+0x22c>
 800088a:	3902      	subs	r1, #2
 800088c:	443b      	add	r3, r7
 800088e:	1a9a      	subs	r2, r3, r2
 8000890:	b2a3      	uxth	r3, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800089e:	fb00 fc0c 	mul.w	ip, r0, ip
 80008a2:	459c      	cmp	ip, r3
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0x8e>
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80008ac:	f080 80d6 	bcs.w	8000a5c <__udivmoddi4+0x230>
 80008b0:	459c      	cmp	ip, r3
 80008b2:	f240 80d3 	bls.w	8000a5c <__udivmoddi4+0x230>
 80008b6:	443b      	add	r3, r7
 80008b8:	3802      	subs	r0, #2
 80008ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008be:	eba3 030c 	sub.w	r3, r3, ip
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11d      	cbz	r5, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40f3      	lsrs	r3, r6
 80008c8:	2200      	movs	r2, #0
 80008ca:	e9c5 3200 	strd	r3, r2, [r5]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d905      	bls.n	80008e2 <__udivmoddi4+0xb6>
 80008d6:	b10d      	cbz	r5, 80008dc <__udivmoddi4+0xb0>
 80008d8:	e9c5 0100 	strd	r0, r1, [r5]
 80008dc:	2100      	movs	r1, #0
 80008de:	4608      	mov	r0, r1
 80008e0:	e7f5      	b.n	80008ce <__udivmoddi4+0xa2>
 80008e2:	fab3 f183 	clz	r1, r3
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d146      	bne.n	8000978 <__udivmoddi4+0x14c>
 80008ea:	4573      	cmp	r3, lr
 80008ec:	d302      	bcc.n	80008f4 <__udivmoddi4+0xc8>
 80008ee:	4282      	cmp	r2, r0
 80008f0:	f200 8105 	bhi.w	8000afe <__udivmoddi4+0x2d2>
 80008f4:	1a84      	subs	r4, r0, r2
 80008f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008fa:	2001      	movs	r0, #1
 80008fc:	4690      	mov	r8, r2
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d0e5      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000902:	e9c5 4800 	strd	r4, r8, [r5]
 8000906:	e7e2      	b.n	80008ce <__udivmoddi4+0xa2>
 8000908:	2a00      	cmp	r2, #0
 800090a:	f000 8090 	beq.w	8000a2e <__udivmoddi4+0x202>
 800090e:	fab2 f682 	clz	r6, r2
 8000912:	2e00      	cmp	r6, #0
 8000914:	f040 80a4 	bne.w	8000a60 <__udivmoddi4+0x234>
 8000918:	1a8a      	subs	r2, r1, r2
 800091a:	0c03      	lsrs	r3, r0, #16
 800091c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000920:	b280      	uxth	r0, r0
 8000922:	b2bc      	uxth	r4, r7
 8000924:	2101      	movs	r1, #1
 8000926:	fbb2 fcfe 	udiv	ip, r2, lr
 800092a:	fb0e 221c 	mls	r2, lr, ip, r2
 800092e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000932:	fb04 f20c 	mul.w	r2, r4, ip
 8000936:	429a      	cmp	r2, r3
 8000938:	d907      	bls.n	800094a <__udivmoddi4+0x11e>
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x11c>
 8000942:	429a      	cmp	r2, r3
 8000944:	f200 80e0 	bhi.w	8000b08 <__udivmoddi4+0x2dc>
 8000948:	46c4      	mov	ip, r8
 800094a:	1a9b      	subs	r3, r3, r2
 800094c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000950:	fb0e 3312 	mls	r3, lr, r2, r3
 8000954:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000958:	fb02 f404 	mul.w	r4, r2, r4
 800095c:	429c      	cmp	r4, r3
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x144>
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x142>
 8000968:	429c      	cmp	r4, r3
 800096a:	f200 80ca 	bhi.w	8000b02 <__udivmoddi4+0x2d6>
 800096e:	4602      	mov	r2, r0
 8000970:	1b1b      	subs	r3, r3, r4
 8000972:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000976:	e7a5      	b.n	80008c4 <__udivmoddi4+0x98>
 8000978:	f1c1 0620 	rsb	r6, r1, #32
 800097c:	408b      	lsls	r3, r1
 800097e:	fa22 f706 	lsr.w	r7, r2, r6
 8000982:	431f      	orrs	r7, r3
 8000984:	fa0e f401 	lsl.w	r4, lr, r1
 8000988:	fa20 f306 	lsr.w	r3, r0, r6
 800098c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000990:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000994:	4323      	orrs	r3, r4
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	fa1f fc87 	uxth.w	ip, r7
 800099e:	fbbe f0f9 	udiv	r0, lr, r9
 80009a2:	0c1c      	lsrs	r4, r3, #16
 80009a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80009a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80009b0:	45a6      	cmp	lr, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x1a0>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80009be:	f080 809c 	bcs.w	8000afa <__udivmoddi4+0x2ce>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f240 8099 	bls.w	8000afa <__udivmoddi4+0x2ce>
 80009c8:	3802      	subs	r0, #2
 80009ca:	443c      	add	r4, r7
 80009cc:	eba4 040e 	sub.w	r4, r4, lr
 80009d0:	fa1f fe83 	uxth.w	lr, r3
 80009d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d8:	fb09 4413 	mls	r4, r9, r3, r4
 80009dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009e4:	45a4      	cmp	ip, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x1ce>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80009ee:	f080 8082 	bcs.w	8000af6 <__udivmoddi4+0x2ca>
 80009f2:	45a4      	cmp	ip, r4
 80009f4:	d97f      	bls.n	8000af6 <__udivmoddi4+0x2ca>
 80009f6:	3b02      	subs	r3, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009fe:	eba4 040c 	sub.w	r4, r4, ip
 8000a02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a06:	4564      	cmp	r4, ip
 8000a08:	4673      	mov	r3, lr
 8000a0a:	46e1      	mov	r9, ip
 8000a0c:	d362      	bcc.n	8000ad4 <__udivmoddi4+0x2a8>
 8000a0e:	d05f      	beq.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a10:	b15d      	cbz	r5, 8000a2a <__udivmoddi4+0x1fe>
 8000a12:	ebb8 0203 	subs.w	r2, r8, r3
 8000a16:	eb64 0409 	sbc.w	r4, r4, r9
 8000a1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a22:	431e      	orrs	r6, r3
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	e74f      	b.n	80008ce <__udivmoddi4+0xa2>
 8000a2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a32:	0c01      	lsrs	r1, r0, #16
 8000a34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a38:	b280      	uxth	r0, r0
 8000a3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4638      	mov	r0, r7
 8000a42:	463c      	mov	r4, r7
 8000a44:	46b8      	mov	r8, r7
 8000a46:	46be      	mov	lr, r7
 8000a48:	2620      	movs	r6, #32
 8000a4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a4e:	eba2 0208 	sub.w	r2, r2, r8
 8000a52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a56:	e766      	b.n	8000926 <__udivmoddi4+0xfa>
 8000a58:	4601      	mov	r1, r0
 8000a5a:	e718      	b.n	800088e <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e72c      	b.n	80008ba <__udivmoddi4+0x8e>
 8000a60:	f1c6 0220 	rsb	r2, r6, #32
 8000a64:	fa2e f302 	lsr.w	r3, lr, r2
 8000a68:	40b7      	lsls	r7, r6
 8000a6a:	40b1      	lsls	r1, r6
 8000a6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a74:	430a      	orrs	r2, r1
 8000a76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a7a:	b2bc      	uxth	r4, r7
 8000a7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a80:	0c11      	lsrs	r1, r2, #16
 8000a82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a86:	fb08 f904 	mul.w	r9, r8, r4
 8000a8a:	40b0      	lsls	r0, r6
 8000a8c:	4589      	cmp	r9, r1
 8000a8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a92:	b280      	uxth	r0, r0
 8000a94:	d93e      	bls.n	8000b14 <__udivmoddi4+0x2e8>
 8000a96:	1879      	adds	r1, r7, r1
 8000a98:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a9c:	d201      	bcs.n	8000aa2 <__udivmoddi4+0x276>
 8000a9e:	4589      	cmp	r9, r1
 8000aa0:	d81f      	bhi.n	8000ae2 <__udivmoddi4+0x2b6>
 8000aa2:	eba1 0109 	sub.w	r1, r1, r9
 8000aa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aaa:	fb09 f804 	mul.w	r8, r9, r4
 8000aae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab8:	4542      	cmp	r2, r8
 8000aba:	d229      	bcs.n	8000b10 <__udivmoddi4+0x2e4>
 8000abc:	18ba      	adds	r2, r7, r2
 8000abe:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ac2:	d2c4      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac4:	4542      	cmp	r2, r8
 8000ac6:	d2c2      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac8:	f1a9 0102 	sub.w	r1, r9, #2
 8000acc:	443a      	add	r2, r7
 8000ace:	e7be      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ad0:	45f0      	cmp	r8, lr
 8000ad2:	d29d      	bcs.n	8000a10 <__udivmoddi4+0x1e4>
 8000ad4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ad8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000adc:	3801      	subs	r0, #1
 8000ade:	46e1      	mov	r9, ip
 8000ae0:	e796      	b.n	8000a10 <__udivmoddi4+0x1e4>
 8000ae2:	eba7 0909 	sub.w	r9, r7, r9
 8000ae6:	4449      	add	r1, r9
 8000ae8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af0:	fb09 f804 	mul.w	r8, r9, r4
 8000af4:	e7db      	b.n	8000aae <__udivmoddi4+0x282>
 8000af6:	4673      	mov	r3, lr
 8000af8:	e77f      	b.n	80009fa <__udivmoddi4+0x1ce>
 8000afa:	4650      	mov	r0, sl
 8000afc:	e766      	b.n	80009cc <__udivmoddi4+0x1a0>
 8000afe:	4608      	mov	r0, r1
 8000b00:	e6fd      	b.n	80008fe <__udivmoddi4+0xd2>
 8000b02:	443b      	add	r3, r7
 8000b04:	3a02      	subs	r2, #2
 8000b06:	e733      	b.n	8000970 <__udivmoddi4+0x144>
 8000b08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	e71c      	b.n	800094a <__udivmoddi4+0x11e>
 8000b10:	4649      	mov	r1, r9
 8000b12:	e79c      	b.n	8000a4e <__udivmoddi4+0x222>
 8000b14:	eba1 0109 	sub.w	r1, r1, r9
 8000b18:	46c4      	mov	ip, r8
 8000b1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b1e:	fb09 f804 	mul.w	r8, r9, r4
 8000b22:	e7c4      	b.n	8000aae <__udivmoddi4+0x282>

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b32:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000b36:	4905      	ldr	r1, [pc, #20]	@ (8000b4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58000800 	.word	0x58000800

08000b50 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b74:	68fb      	ldr	r3, [r7, #12]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba2:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bac:	68fb      	ldr	r3, [r7, #12]
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000bbe:	f002 fedf 	bl	8003980 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000bc2:	f002 fee3 	bl	800398c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000bc6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000bca:	f7ff ffad 	bl	8000b28 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000bce:	f00a ff09 	bl	800b9e4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000bd2:	f000 f821 	bl	8000c18 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bd6:	f000 f8c1 	bl	8000d5c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bda:	bf00      	nop
}
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <APPD_EnableCPU2+0x34>)
 8000be8:	1d3c      	adds	r4, r7, #4
 8000bea:	461d      	mov	r5, r3
 8000bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bf4:	c403      	stmia	r4!, {r0, r1}
 8000bf6:	8022      	strh	r2, [r4, #0]
 8000bf8:	3402      	adds	r4, #2
 8000bfa:	0c13      	lsrs	r3, r2, #16
 8000bfc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bfe:	f00c fb11 	bl	800d224 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00b f966 	bl	800bed6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bdb0      	pop	{r4, r5, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0801296c 	.word	0x0801296c

08000c18 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	77fb      	strb	r3, [r7, #31]
 8000c3c:	e036      	b.n	8000cac <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	4a43      	ldr	r2, [pc, #268]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4413      	add	r3, r2
 8000c46:	799b      	ldrb	r3, [r3, #6]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d02c      	beq.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c4c:	7ffb      	ldrb	r3, [r7, #31]
 8000c4e:	4a40      	ldr	r2, [pc, #256]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c54:	4a3f      	ldr	r2, [pc, #252]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d01b      	beq.n	8000c92 <APPD_SetCPU2GpioConfig+0x7a>
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d821      	bhi.n	8000ca4 <APPD_SetCPU2GpioConfig+0x8c>
 8000c60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c64:	d003      	beq.n	8000c6e <APPD_SetCPU2GpioConfig+0x56>
 8000c66:	4a3c      	ldr	r2, [pc, #240]	@ (8000d58 <APPD_SetCPU2GpioConfig+0x140>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d009      	beq.n	8000c80 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c6c:	e01a      	b.n	8000ca4 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c6e:	7ffb      	ldrb	r3, [r7, #31]
 8000c70:	4a37      	ldr	r2, [pc, #220]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4413      	add	r3, r2
 8000c76:	889a      	ldrh	r2, [r3, #4]
 8000c78:	8bbb      	ldrh	r3, [r7, #28]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c7e:	e012      	b.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c80:	7ffb      	ldrb	r3, [r7, #31]
 8000c82:	4a33      	ldr	r2, [pc, #204]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	889a      	ldrh	r2, [r3, #4]
 8000c8a:	8b7b      	ldrh	r3, [r7, #26]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	837b      	strh	r3, [r7, #26]
          break;
 8000c90:	e009      	b.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c92:	7ffb      	ldrb	r3, [r7, #31]
 8000c94:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <APPD_SetCPU2GpioConfig+0x138>)
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	889a      	ldrh	r2, [r3, #4]
 8000c9c:	8b3b      	ldrh	r3, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	833b      	strh	r3, [r7, #24]
          break;
 8000ca2:	e000      	b.n	8000ca6 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ca4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ca6:	7ffb      	ldrb	r3, [r7, #31]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	77fb      	strb	r3, [r7, #31]
 8000cac:	7ffb      	ldrb	r3, [r7, #31]
 8000cae:	2b25      	cmp	r3, #37	@ 0x25
 8000cb0:	d9c5      	bls.n	8000c3e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000cbe:	8bbb      	ldrh	r3, [r7, #28]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d014      	beq.n	8000cee <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000cc4:	8bbb      	ldrh	r3, [r7, #28]
 8000cc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff ff41 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ff57 	bl	8000b82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cdc:	f004 f9c6 	bl	800506c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ce0:	8bbb      	ldrh	r3, [r7, #28]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f004 fb2f 	bl	800534c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cee:	8b7b      	ldrh	r3, [r7, #26]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d012      	beq.n	8000d1a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cf4:	8b7b      	ldrh	r3, [r7, #26]
 8000cf6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff ff29 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f7ff ff3f 	bl	8000b82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <APPD_SetCPU2GpioConfig+0x140>)
 8000d0a:	f004 f9af 	bl	800506c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000d0e:	8b7b      	ldrh	r3, [r7, #26]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <APPD_SetCPU2GpioConfig+0x140>)
 8000d16:	f004 fb19 	bl	800534c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000d1a:	8b3b      	ldrh	r3, [r7, #24]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d013      	beq.n	8000d48 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000d20:	8b3b      	ldrh	r3, [r7, #24]
 8000d22:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	2004      	movs	r0, #4
 8000d26:	f7ff ff13 	bl	8000b50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d2a:	2004      	movs	r0, #4
 8000d2c:	f7ff ff29 	bl	8000b82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d36:	f004 f999 	bl	800506c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d3a:	8b3b      	ldrh	r3, [r7, #24]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d42:	f004 fb03 	bl	800534c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
}
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	08013fbc 	.word	0x08013fbc
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000400 	.word	0x48000400

08000d5c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d60:	bf00      	nop
}
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d6e:	bf00      	nop
}
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	460b      	mov	r3, r1
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d86:	897a      	ldrh	r2, [r7, #10]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68f9      	ldr	r1, [r7, #12]
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f001 f9b1 	bl	80020f4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d92:	bf00      	nop
}
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000daa:	f023 0207 	bic.w	r2, r3, #7
 8000dae:	4905      	ldr	r1, [pc, #20]	@ (8000dc4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58000400 	.word	0x58000400

08000dc8 <LL_EXTI_EnableIT_32_63>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <LL_EXTI_EnableIT_32_63+0x24>)
 8000dd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000dd6:	4905      	ldr	r1, [pc, #20]	@ (8000dec <LL_EXTI_EnableIT_32_63+0x24>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	58000800 	.word	0x58000800

08000df0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e0a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e16:	4313      	orrs	r3, r2
 8000e18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	cafecafe 	.word	0xcafecafe

08000e2c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000e3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <LL_DBGMCU_GetDeviceID+0x18>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e0042000 	.word	0xe0042000

08000e70 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	b29b      	uxth	r3, r3
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e0042000 	.word	0xe0042000

08000e8c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <LL_LPM_EnableSleep+0x1c>)
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <LL_LPM_EnableSleep+0x1c>)
 8000e96:	f023 0304 	bic.w	r3, r3, #4
 8000e9a:	6113      	str	r3, [r2, #16]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	22ff      	movs	r2, #255	@ 0xff
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	22ca      	movs	r2, #202	@ 0xca
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2253      	movs	r2, #83	@ 0x53
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 0207 	bic.w	r2, r3, #7
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	609a      	str	r2, [r3, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <MX_APPE_Config+0x18>)
 8000f12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f16:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000f18:	f000 f826 	bl	8000f68 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000f1c:	f000 f82b 	bl	8000f76 <Config_HSE>

  return;
 8000f20:	bf00      	nop
}
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	58004000 	.word	0x58004000

08000f28 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000f2c:	f000 f837 	bl	8000f9e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000f30:	f000 f850 	bl	8000fd4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000f34:	4904      	ldr	r1, [pc, #16]	@ (8000f48 <MX_APPE_Init+0x20>)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 feea 	bl	8001d10 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000f3c:	f7ff fe3d 	bl	8000bba <APPD_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000f40:	f000 f856 	bl	8000ff0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000f44:	bf00      	nop
}
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000374 	.word	0x20000374

08000f4c <Init_Smps>:

void Init_Smps(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000f50:	bf00      	nop
}
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <Init_Exti>:

void Init_Exti(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000f5e:	2050      	movs	r0, #80	@ 0x50
 8000f60:	f7ff ff32 	bl	8000dc8 <LL_EXTI_EnableIT_32_63>

  return;
 8000f64:	bf00      	nop
}
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f6c:	bf00      	nop
}
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f00a ff6b 	bl	800be58 <OTP_Read>
 8000f82:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	799b      	ldrb	r3, [r3, #6]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff2e 	bl	8000df0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
}
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <System_Init>:

static void System_Init(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  Init_Smps();
 8000fa2:	f7ff ffd3 	bl	8000f4c <Init_Smps>

  Init_Exti();
 8000fa6:	f7ff ffd8 	bl	8000f5a <Init_Exti>

  Init_Rtc();
 8000faa:	f000 f803 	bl	8000fb4 <Init_Rtc>

  return;
 8000fae:	bf00      	nop
}
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <Init_Rtc+0x1c>)
 8000fba:	f7ff ff84 	bl	8000ec6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <Init_Rtc+0x1c>)
 8000fc2:	f7ff ff90 	bl	8000ee6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000fc6:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <Init_Rtc+0x1c>)
 8000fc8:	f7ff ff70 	bl	8000eac <LL_RTC_EnableWriteProtection>

  return;
 8000fcc:	bf00      	nop
}
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40002800 	.word	0x40002800

08000fd4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000fd8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000fdc:	f7ff ff26 	bl	8000e2c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000fe0:	f00d ff88 	bl	800eef4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000fe4:	2004      	movs	r0, #4
 8000fe6:	f7ff fed9 	bl	8000d9c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000fea:	bf00      	nop
}
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000ff6:	f00b ff5f 	bl	800ceb8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000ffa:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <appe_Tl_Init+0x50>)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2004      	movs	r0, #4
 8001000:	f00e f8b6 	bl	800f170 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <appe_Tl_Init+0x54>)
 8001006:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <appe_Tl_Init+0x58>)
 800100a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	480e      	ldr	r0, [pc, #56]	@ (800104c <appe_Tl_Init+0x5c>)
 8001012:	f00b f83b 	bl	800c08c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <appe_Tl_Init+0x60>)
 8001018:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <appe_Tl_Init+0x64>)
 800101c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <appe_Tl_Init+0x68>)
 8001020:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001022:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001026:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4618      	mov	r0, r3
 800102e:	f00c f885 	bl	800d13c <TL_MM_Init>

  TL_Enable();
 8001032:	f00b ff3b 	bl	800ceac <TL_Enable>

  return;
 8001036:	bf00      	nop
}
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800c0c5 	.word	0x0800c0c5
 8001044:	20030734 	.word	0x20030734
 8001048:	0800105d 	.word	0x0800105d
 800104c:	08001075 	.word	0x08001075
 8001050:	2003094c 	.word	0x2003094c
 8001054:	20030840 	.word	0x20030840
 8001058:	200301f8 	.word	0x200301f8

0800105c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001066:	bf00      	nop
}
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	330b      	adds	r3, #11
 8001082:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	b29b      	uxth	r3, r3
 800108a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800108e:	2b07      	cmp	r3, #7
 8001090:	f200 80d0 	bhi.w	8001234 <APPE_SysUserEvtRx+0x1c0>
 8001094:	a201      	add	r2, pc, #4	@ (adr r2, 800109c <APPE_SysUserEvtRx+0x28>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010bd 	.word	0x080010bd
 80010a0:	0800114f 	.word	0x0800114f
 80010a4:	08001171 	.word	0x08001171
 80010a8:	08001235 	.word	0x08001235
 80010ac:	080011b5 	.word	0x080011b5
 80010b0:	080011d9 	.word	0x080011d9
 80010b4:	080011f5 	.word	0x080011f5
 80010b8:	08001219 	.word	0x08001219
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00a ff35 	bl	800bf30 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80010c6:	485e      	ldr	r0, [pc, #376]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 80010c8:	f00a fc2b 	bl	800b922 <DbgTraceGetFileName>
 80010cc:	4601      	mov	r1, r0
 80010ce:	f240 136b 	movw	r3, #363	@ 0x16b
 80010d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 80010d4:	485c      	ldr	r0, [pc, #368]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 80010d6:	f010 f91d 	bl	8011314 <iprintf>
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	4619      	mov	r1, r3
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	461a      	mov	r2, r3
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	4859      	ldr	r0, [pc, #356]	@ (800124c <APPE_SysUserEvtRx+0x1d8>)
 80010e6:	f010 f915 	bl	8011314 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80010ea:	4855      	ldr	r0, [pc, #340]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 80010ec:	f00a fc19 	bl	800b922 <DbgTraceGetFileName>
 80010f0:	4601      	mov	r1, r0
 80010f2:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80010f6:	4a53      	ldr	r2, [pc, #332]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 80010f8:	4853      	ldr	r0, [pc, #332]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 80010fa:	f010 f90b 	bl	8011314 <iprintf>
 80010fe:	7c3b      	ldrb	r3, [r7, #16]
 8001100:	4619      	mov	r1, r3
 8001102:	4853      	ldr	r0, [pc, #332]	@ (8001250 <APPE_SysUserEvtRx+0x1dc>)
 8001104:	f010 f906 	bl	8011314 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001108:	484d      	ldr	r0, [pc, #308]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 800110a:	f00a fc0a 	bl	800b922 <DbgTraceGetFileName>
 800110e:	4601      	mov	r1, r0
 8001110:	f240 136d 	movw	r3, #365	@ 0x16d
 8001114:	4a4b      	ldr	r2, [pc, #300]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 8001116:	484c      	ldr	r0, [pc, #304]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 8001118:	f010 f8fc 	bl	8011314 <iprintf>
 800111c:	7dbb      	ldrb	r3, [r7, #22]
 800111e:	4619      	mov	r1, r3
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	461a      	mov	r2, r3
 8001124:	7e3b      	ldrb	r3, [r7, #24]
 8001126:	484b      	ldr	r0, [pc, #300]	@ (8001254 <APPE_SysUserEvtRx+0x1e0>)
 8001128:	f010 f8f4 	bl	8011314 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 800112c:	4844      	ldr	r0, [pc, #272]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 800112e:	f00a fbf8 	bl	800b922 <DbgTraceGetFileName>
 8001132:	4601      	mov	r1, r0
 8001134:	f240 136f 	movw	r3, #367	@ 0x16f
 8001138:	4a42      	ldr	r2, [pc, #264]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 800113a:	4843      	ldr	r0, [pc, #268]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 800113c:	f010 f8ea 	bl	8011314 <iprintf>
 8001140:	4845      	ldr	r0, [pc, #276]	@ (8001258 <APPE_SysUserEvtRx+0x1e4>)
 8001142:	f010 f8e7 	bl	8011314 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f8e0 	bl	800130c <APPE_SysEvtReadyProcessing>
    break;
 800114c:	e073      	b.n	8001236 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800114e:	483c      	ldr	r0, [pc, #240]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 8001150:	f00a fbe7 	bl	800b922 <DbgTraceGetFileName>
 8001154:	4601      	mov	r1, r0
 8001156:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 800115a:	4a3a      	ldr	r2, [pc, #232]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 800115c:	483a      	ldr	r0, [pc, #232]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 800115e:	f010 f8d9 	bl	8011314 <iprintf>
 8001162:	483e      	ldr	r0, [pc, #248]	@ (800125c <APPE_SysUserEvtRx+0x1e8>)
 8001164:	f010 f8d6 	bl	8011314 <iprintf>
    APPE_SysEvtError(pPayload);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f885 	bl	8001278 <APPE_SysEvtError>
    break;
 800116e:	e062      	b.n	8001236 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001170:	4833      	ldr	r0, [pc, #204]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 8001172:	f00a fbd6 	bl	800b922 <DbgTraceGetFileName>
 8001176:	4601      	mov	r1, r0
 8001178:	f240 1379 	movw	r3, #377	@ 0x179
 800117c:	4a31      	ldr	r2, [pc, #196]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 800117e:	4832      	ldr	r0, [pc, #200]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 8001180:	f010 f8c8 	bl	8011314 <iprintf>
 8001184:	4836      	ldr	r0, [pc, #216]	@ (8001260 <APPE_SysUserEvtRx+0x1ec>)
 8001186:	f010 f935 	bl	80113f4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800118a:	482d      	ldr	r0, [pc, #180]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 800118c:	f00a fbc9 	bl	800b922 <DbgTraceGetFileName>
 8001190:	4601      	mov	r1, r0
 8001192:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
 8001196:	4a2b      	ldr	r2, [pc, #172]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 8001198:	482b      	ldr	r0, [pc, #172]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 800119a:	f010 f8bb 	bl	8011314 <iprintf>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3302      	adds	r3, #2
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	3302      	adds	r3, #2
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	482d      	ldr	r0, [pc, #180]	@ (8001264 <APPE_SysUserEvtRx+0x1f0>)
 80011ae:	f010 f8b1 	bl	8011314 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80011b2:	e040      	b.n	8001236 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80011b4:	4822      	ldr	r0, [pc, #136]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 80011b6:	f00a fbb4 	bl	800b922 <DbgTraceGetFileName>
 80011ba:	4601      	mov	r1, r0
 80011bc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80011c0:	4a20      	ldr	r2, [pc, #128]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 80011c4:	f010 f8a6 	bl	8011314 <iprintf>
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	3302      	adds	r3, #2
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	@ (8001268 <APPE_SysUserEvtRx+0x1f4>)
 80011d2:	f010 f89f 	bl	8011314 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80011d6:	e02e      	b.n	8001236 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80011d8:	4819      	ldr	r0, [pc, #100]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 80011da:	f00a fba2 	bl	800b922 <DbgTraceGetFileName>
 80011de:	4601      	mov	r1, r0
 80011e0:	f240 1385 	movw	r3, #389	@ 0x185
 80011e4:	4a17      	ldr	r2, [pc, #92]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 80011e6:	4818      	ldr	r0, [pc, #96]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 80011e8:	f010 f894 	bl	8011314 <iprintf>
 80011ec:	481f      	ldr	r0, [pc, #124]	@ (800126c <APPE_SysUserEvtRx+0x1f8>)
 80011ee:	f010 f891 	bl	8011314 <iprintf>
    break;
 80011f2:	e020      	b.n	8001236 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80011f4:	4812      	ldr	r0, [pc, #72]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 80011f6:	f00a fb94 	bl	800b922 <DbgTraceGetFileName>
 80011fa:	4601      	mov	r1, r0
 80011fc:	f240 1389 	movw	r3, #393	@ 0x189
 8001200:	4a10      	ldr	r2, [pc, #64]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 8001202:	4811      	ldr	r0, [pc, #68]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 8001204:	f010 f886 	bl	8011314 <iprintf>
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	3302      	adds	r3, #2
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <APPE_SysUserEvtRx+0x1fc>)
 8001212:	f010 f87f 	bl	8011314 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001216:	e00e      	b.n	8001236 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <APPE_SysUserEvtRx+0x1cc>)
 800121a:	f00a fb82 	bl	800b922 <DbgTraceGetFileName>
 800121e:	4601      	mov	r1, r0
 8001220:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <APPE_SysUserEvtRx+0x1d0>)
 8001226:	4808      	ldr	r0, [pc, #32]	@ (8001248 <APPE_SysUserEvtRx+0x1d4>)
 8001228:	f010 f874 	bl	8011314 <iprintf>
 800122c:	4811      	ldr	r0, [pc, #68]	@ (8001274 <APPE_SysUserEvtRx+0x200>)
 800122e:	f010 f871 	bl	8011314 <iprintf>
    break;
 8001232:	e000      	b.n	8001236 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001234:	bf00      	nop
  }

  return;
 8001236:	bf00      	nop
}
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	08012988 	.word	0x08012988
 8001244:	080140ec 	.word	0x080140ec
 8001248:	080129a0 	.word	0x080129a0
 800124c:	080129b4 	.word	0x080129b4
 8001250:	080129d8 	.word	0x080129d8
 8001254:	080129f4 	.word	0x080129f4
 8001258:	08012a0c 	.word	0x08012a0c
 800125c:	08012a2c 	.word	0x08012a2c
 8001260:	08012a50 	.word	0x08012a50
 8001264:	08012aa0 	.word	0x08012aa0
 8001268:	08012ac8 	.word	0x08012ac8
 800126c:	08012b04 	.word	0x08012b04
 8001270:	08012b28 	.word	0x08012b28
 8001274:	08012b64 	.word	0x08012b64

08001278 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	330b      	adds	r3, #11
 8001286:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3302      	adds	r3, #2
 800128c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800128e:	4819      	ldr	r0, [pc, #100]	@ (80012f4 <APPE_SysEvtError+0x7c>)
 8001290:	f00a fb47 	bl	800b922 <DbgTraceGetFileName>
 8001294:	4601      	mov	r1, r0
 8001296:	f44f 73d3 	mov.w	r3, #422	@ 0x1a6
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <APPE_SysEvtError+0x80>)
 800129c:	4817      	ldr	r0, [pc, #92]	@ (80012fc <APPE_SysEvtError+0x84>)
 800129e:	f010 f839 	bl	8011314 <iprintf>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4815      	ldr	r0, [pc, #84]	@ (8001300 <APPE_SysEvtError+0x88>)
 80012aa:	f010 f833 	bl	8011314 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80012b6:	480f      	ldr	r0, [pc, #60]	@ (80012f4 <APPE_SysEvtError+0x7c>)
 80012b8:	f00a fb33 	bl	800b922 <DbgTraceGetFileName>
 80012bc:	4601      	mov	r1, r0
 80012be:	f240 13ab 	movw	r3, #427	@ 0x1ab
 80012c2:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <APPE_SysEvtError+0x80>)
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <APPE_SysEvtError+0x84>)
 80012c6:	f010 f825 	bl	8011314 <iprintf>
 80012ca:	480e      	ldr	r0, [pc, #56]	@ (8001304 <APPE_SysEvtError+0x8c>)
 80012cc:	f010 f892 	bl	80113f4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80012d0:	e00d      	b.n	80012ee <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80012d2:	4808      	ldr	r0, [pc, #32]	@ (80012f4 <APPE_SysEvtError+0x7c>)
 80012d4:	f00a fb25 	bl	800b922 <DbgTraceGetFileName>
 80012d8:	4601      	mov	r1, r0
 80012da:	f240 13af 	movw	r3, #431	@ 0x1af
 80012de:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <APPE_SysEvtError+0x80>)
 80012e0:	4806      	ldr	r0, [pc, #24]	@ (80012fc <APPE_SysEvtError+0x84>)
 80012e2:	f010 f817 	bl	8011314 <iprintf>
 80012e6:	4808      	ldr	r0, [pc, #32]	@ (8001308 <APPE_SysEvtError+0x90>)
 80012e8:	f010 f884 	bl	80113f4 <puts>
  return;
 80012ec:	bf00      	nop
}
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	08012988 	.word	0x08012988
 80012f8:	08014100 	.word	0x08014100
 80012fc:	080129a0 	.word	0x080129a0
 8001300:	08012b88 	.word	0x08012b88
 8001304:	08012bb8 	.word	0x08012bb8
 8001308:	08012bf4 	.word	0x08012bf4

0800130c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	@ 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	330b      	adds	r3, #11
 8001330:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3302      	adds	r3, #2
 8001336:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d146      	bne.n	80013ce <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001340:	4836      	ldr	r0, [pc, #216]	@ (800141c <APPE_SysEvtReadyProcessing+0x110>)
 8001342:	f00a faee 	bl	800b922 <DbgTraceGetFileName>
 8001346:	4601      	mov	r1, r0
 8001348:	f240 13c5 	movw	r3, #453	@ 0x1c5
 800134c:	4a34      	ldr	r2, [pc, #208]	@ (8001420 <APPE_SysEvtReadyProcessing+0x114>)
 800134e:	4835      	ldr	r0, [pc, #212]	@ (8001424 <APPE_SysEvtReadyProcessing+0x118>)
 8001350:	f00f ffe0 	bl	8011314 <iprintf>
 8001354:	4834      	ldr	r0, [pc, #208]	@ (8001428 <APPE_SysEvtReadyProcessing+0x11c>)
 8001356:	f010 f84d 	bl	80113f4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800135a:	f7ff fc41 	bl	8000be0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800135e:	230f      	movs	r3, #15
 8001360:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001362:	237f      	movs	r3, #127	@ 0x7f
 8001364:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001366:	f7ff fd83 	bl	8000e70 <LL_DBGMCU_GetRevisionID>
 800136a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800136c:	482b      	ldr	r0, [pc, #172]	@ (800141c <APPE_SysEvtReadyProcessing+0x110>)
 800136e:	f00a fad8 	bl	800b922 <DbgTraceGetFileName>
 8001372:	4601      	mov	r1, r0
 8001374:	f240 13dd 	movw	r3, #477	@ 0x1dd
 8001378:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <APPE_SysEvtReadyProcessing+0x114>)
 800137a:	482a      	ldr	r0, [pc, #168]	@ (8001424 <APPE_SysEvtReadyProcessing+0x118>)
 800137c:	f00f ffca 	bl	8011314 <iprintf>
 8001380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001382:	482a      	ldr	r0, [pc, #168]	@ (800142c <APPE_SysEvtReadyProcessing+0x120>)
 8001384:	f00f ffc6 	bl	8011314 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	b29b      	uxth	r3, r3
 800138c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800138e:	f7ff fd61 	bl	8000e54 <LL_DBGMCU_GetDeviceID>
 8001392:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001394:	4821      	ldr	r0, [pc, #132]	@ (800141c <APPE_SysEvtReadyProcessing+0x110>)
 8001396:	f00a fac4 	bl	800b922 <DbgTraceGetFileName>
 800139a:	4601      	mov	r1, r0
 800139c:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 80013a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001420 <APPE_SysEvtReadyProcessing+0x114>)
 80013a2:	4820      	ldr	r0, [pc, #128]	@ (8001424 <APPE_SysEvtReadyProcessing+0x118>)
 80013a4:	f00f ffb6 	bl	8011314 <iprintf>
 80013a8:	6a39      	ldr	r1, [r7, #32]
 80013aa:	4821      	ldr	r0, [pc, #132]	@ (8001430 <APPE_SysEvtReadyProcessing+0x124>)
 80013ac:	f00f ffb2 	bl	8011314 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00a fda2 	bl	800bf04 <SHCI_C2_Config>

    APP_BLE_Init();
 80013c0:	f00b ffe0 	bl	800d384 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80013c4:	2100      	movs	r1, #0
 80013c6:	2001      	movs	r0, #1
 80013c8:	f00d fda6 	bl	800ef18 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80013cc:	e022      	b.n	8001414 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d110      	bne.n	80013f8 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80013d6:	4811      	ldr	r0, [pc, #68]	@ (800141c <APPE_SysEvtReadyProcessing+0x110>)
 80013d8:	f00a faa3 	bl	800b922 <DbgTraceGetFileName>
 80013dc:	4601      	mov	r1, r0
 80013de:	f240 13ef 	movw	r3, #495	@ 0x1ef
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <APPE_SysEvtReadyProcessing+0x114>)
 80013e4:	480f      	ldr	r0, [pc, #60]	@ (8001424 <APPE_SysEvtReadyProcessing+0x118>)
 80013e6:	f00f ff95 	bl	8011314 <iprintf>
 80013ea:	4812      	ldr	r0, [pc, #72]	@ (8001434 <APPE_SysEvtReadyProcessing+0x128>)
 80013ec:	f00f ff92 	bl	8011314 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
  return;
 80013f6:	e00d      	b.n	8001414 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80013f8:	4808      	ldr	r0, [pc, #32]	@ (800141c <APPE_SysEvtReadyProcessing+0x110>)
 80013fa:	f00a fa92 	bl	800b922 <DbgTraceGetFileName>
 80013fe:	4601      	mov	r1, r0
 8001400:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8001404:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <APPE_SysEvtReadyProcessing+0x114>)
 8001406:	4807      	ldr	r0, [pc, #28]	@ (8001424 <APPE_SysEvtReadyProcessing+0x118>)
 8001408:	f00f ff84 	bl	8011314 <iprintf>
 800140c:	480a      	ldr	r0, [pc, #40]	@ (8001438 <APPE_SysEvtReadyProcessing+0x12c>)
 800140e:	f00f ff81 	bl	8011314 <iprintf>
  return;
 8001412:	bf00      	nop
}
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08012988 	.word	0x08012988
 8001420:	08014114 	.word	0x08014114
 8001424:	080129a0 	.word	0x080129a0
 8001428:	08012c2c 	.word	0x08012c2c
 800142c:	08012c48 	.word	0x08012c48
 8001430:	08012c6c 	.word	0x08012c6c
 8001434:	08012c8c 	.word	0x08012c8c
 8001438:	08012cc0 	.word	0x08012cc0

0800143c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f002 fa78 	bl	8003938 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001454:	d00a      	beq.n	800146c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001456:	f002 fa87 	bl	8003968 <HAL_GetTickFreq>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001464:	e002      	b.n	800146c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001466:	f7ff fd11 	bl	8000e8c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800146a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800146c:	f002 fa64 	bl	8003938 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f4      	bhi.n	8001466 <HAL_Delay+0x2a>
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800148a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800148e:	f00d fd73 	bl	800ef78 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}

08001496 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800149a:	bf00      	nop
}
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80014ac:	2100      	movs	r1, #0
 80014ae:	2004      	movs	r0, #4
 80014b0:	f00d fe80 	bl	800f1b4 <UTIL_SEQ_SetTask>
  return;
 80014b4:	bf00      	nop
}
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f00d fee1 	bl	800f28c <UTIL_SEQ_SetEvt>
  return;
 80014ca:	bf00      	nop
}
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80014da:	2002      	movs	r0, #2
 80014dc:	f00d fef6 	bl	800f2cc <UTIL_SEQ_WaitEvt>
  return;
 80014e0:	bf00      	nop
}
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <LL_EXTI_EnableIT_0_31>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <LL_EXTI_EnableIT_0_31+0x24>)
 80014f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80014f6:	4905      	ldr	r1, [pc, #20]	@ (800150c <LL_EXTI_EnableIT_0_31+0x24>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	58000800 	.word	0x58000800

08001510 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4904      	ldr	r1, [pc, #16]	@ (8001530 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]

}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	58000800 	.word	0x58000800

08001534 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <ReadRtcSsrValue+0x3c>)
 800153c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153e:	b29b      	uxth	r3, r3
 8001540:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <ReadRtcSsrValue+0x3c>)
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	b29b      	uxth	r3, r3
 8001548:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800154a:	e005      	b.n	8001558 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <ReadRtcSsrValue+0x3c>)
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	b29b      	uxth	r3, r3
 8001556:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d1f5      	bne.n	800154c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001560:	683b      	ldr	r3, [r7, #0]
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40002800 	.word	0x40002800

08001574 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	4613      	mov	r3, r2
 8001582:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001584:	79ba      	ldrb	r2, [r7, #6]
 8001586:	491d      	ldr	r1, [pc, #116]	@ (80015fc <LinkTimerAfter+0x88>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3315      	adds	r3, #21
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b06      	cmp	r3, #6
 800159c:	d009      	beq.n	80015b2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	4916      	ldr	r1, [pc, #88]	@ (80015fc <LinkTimerAfter+0x88>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	3314      	adds	r3, #20
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	4911      	ldr	r1, [pc, #68]	@ (80015fc <LinkTimerAfter+0x88>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	3315      	adds	r3, #21
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	490c      	ldr	r1, [pc, #48]	@ (80015fc <LinkTimerAfter+0x88>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3314      	adds	r3, #20
 80015d6:	79ba      	ldrb	r2, [r7, #6]
 80015d8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80015da:	79ba      	ldrb	r2, [r7, #6]
 80015dc:	4907      	ldr	r1, [pc, #28]	@ (80015fc <LinkTimerAfter+0x88>)
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3315      	adds	r3, #21
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	701a      	strb	r2, [r3, #0]

  return;
 80015ee:	bf00      	nop
}
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200000f8 	.word	0x200000f8

08001600 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	460a      	mov	r2, r1
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	4613      	mov	r3, r2
 800160e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <LinkTimerBefore+0xb8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	79ba      	ldrb	r2, [r7, #6]
 8001618:	429a      	cmp	r2, r3
 800161a:	d032      	beq.n	8001682 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800161c:	79ba      	ldrb	r2, [r7, #6]
 800161e:	4927      	ldr	r1, [pc, #156]	@ (80016bc <LinkTimerBefore+0xbc>)
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	3314      	adds	r3, #20
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	4922      	ldr	r1, [pc, #136]	@ (80016bc <LinkTimerBefore+0xbc>)
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3315      	adds	r3, #21
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	491d      	ldr	r1, [pc, #116]	@ (80016bc <LinkTimerBefore+0xbc>)
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3315      	adds	r3, #21
 8001654:	79ba      	ldrb	r2, [r7, #6]
 8001656:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001658:	79fa      	ldrb	r2, [r7, #7]
 800165a:	4918      	ldr	r1, [pc, #96]	@ (80016bc <LinkTimerBefore+0xbc>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	3314      	adds	r3, #20
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800166c:	79ba      	ldrb	r2, [r7, #6]
 800166e:	4913      	ldr	r1, [pc, #76]	@ (80016bc <LinkTimerBefore+0xbc>)
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	3314      	adds	r3, #20
 800167c:	79fa      	ldrb	r2, [r7, #7]
 800167e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001680:	e014      	b.n	80016ac <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	490d      	ldr	r1, [pc, #52]	@ (80016bc <LinkTimerBefore+0xbc>)
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3315      	adds	r3, #21
 8001692:	79ba      	ldrb	r2, [r7, #6]
 8001694:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	4908      	ldr	r1, [pc, #32]	@ (80016bc <LinkTimerBefore+0xbc>)
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3314      	adds	r3, #20
 80016a6:	79fa      	ldrb	r2, [r7, #7]
 80016a8:	701a      	strb	r2, [r3, #0]
  return;
 80016aa:	bf00      	nop
}
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000188 	.word	0x20000188
 80016bc:	200000f8 	.word	0x200000f8

080016c0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80016ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001804 <linkTimer+0x144>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d118      	bne.n	8001706 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80016d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <linkTimer+0x144>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b4b      	ldr	r3, [pc, #300]	@ (8001808 <linkTimer+0x148>)
 80016dc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80016de:	4a49      	ldr	r2, [pc, #292]	@ (8001804 <linkTimer+0x144>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	4949      	ldr	r1, [pc, #292]	@ (800180c <linkTimer+0x14c>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3315      	adds	r3, #21
 80016f4:	2206      	movs	r2, #6
 80016f6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016f8:	4b45      	ldr	r3, [pc, #276]	@ (8001810 <linkTimer+0x150>)
 80016fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016fe:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	81fb      	strh	r3, [r7, #14]
 8001704:	e078      	b.n	80017f8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001706:	f000 f909 	bl	800191c <ReturnTimeElapsed>
 800170a:	4603      	mov	r3, r0
 800170c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	493e      	ldr	r1, [pc, #248]	@ (800180c <linkTimer+0x14c>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3308      	adds	r3, #8
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	4419      	add	r1, r3
 8001726:	4839      	ldr	r0, [pc, #228]	@ (800180c <linkTimer+0x14c>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4403      	add	r3, r0
 8001732:	3308      	adds	r3, #8
 8001734:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	4934      	ldr	r1, [pc, #208]	@ (800180c <linkTimer+0x14c>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3308      	adds	r3, #8
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800174a:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <linkTimer+0x144>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	4a2e      	ldr	r2, [pc, #184]	@ (800180c <linkTimer+0x14c>)
 8001754:	460b      	mov	r3, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	440b      	add	r3, r1
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	3308      	adds	r3, #8
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	429a      	cmp	r2, r3
 8001766:	d337      	bcc.n	80017d8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <linkTimer+0x144>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800176e:	7b7a      	ldrb	r2, [r7, #13]
 8001770:	4926      	ldr	r1, [pc, #152]	@ (800180c <linkTimer+0x14c>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3315      	adds	r3, #21
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001782:	e013      	b.n	80017ac <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001784:	7b7a      	ldrb	r2, [r7, #13]
 8001786:	4921      	ldr	r1, [pc, #132]	@ (800180c <linkTimer+0x14c>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3315      	adds	r3, #21
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001798:	7b7a      	ldrb	r2, [r7, #13]
 800179a:	491c      	ldr	r1, [pc, #112]	@ (800180c <linkTimer+0x14c>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3315      	adds	r3, #21
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017ac:	7b3b      	ldrb	r3, [r7, #12]
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d00b      	beq.n	80017ca <linkTimer+0x10a>
 80017b2:	7b3a      	ldrb	r2, [r7, #12]
 80017b4:	4915      	ldr	r1, [pc, #84]	@ (800180c <linkTimer+0x14c>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3308      	adds	r3, #8
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d2dc      	bcs.n	8001784 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80017ca:	7b7a      	ldrb	r2, [r7, #13]
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fecf 	bl	8001574 <LinkTimerAfter>
 80017d6:	e00f      	b.n	80017f8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <linkTimer+0x144>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff0c 	bl	8001600 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <linkTimer+0x144>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <linkTimer+0x148>)
 80017f0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <linkTimer+0x144>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80017f8:	89fb      	ldrh	r3, [r7, #14]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000188 	.word	0x20000188
 8001808:	20000189 	.word	0x20000189
 800180c:	200000f8 	.word	0x200000f8
 8001810:	2000018c 	.word	0x2000018c

08001814 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	4613      	mov	r3, r2
 8001822:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001824:	4b39      	ldr	r3, [pc, #228]	@ (800190c <UnlinkTimer+0xf8>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	79fa      	ldrb	r2, [r7, #7]
 800182c:	429a      	cmp	r2, r3
 800182e:	d111      	bne.n	8001854 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001830:	4b36      	ldr	r3, [pc, #216]	@ (800190c <UnlinkTimer+0xf8>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <UnlinkTimer+0xfc>)
 8001838:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	4935      	ldr	r1, [pc, #212]	@ (8001914 <UnlinkTimer+0x100>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3315      	adds	r3, #21
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b2f      	ldr	r3, [pc, #188]	@ (800190c <UnlinkTimer+0xf8>)
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e03e      	b.n	80018d2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001854:	79fa      	ldrb	r2, [r7, #7]
 8001856:	492f      	ldr	r1, [pc, #188]	@ (8001914 <UnlinkTimer+0x100>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3314      	adds	r3, #20
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001868:	79fa      	ldrb	r2, [r7, #7]
 800186a:	492a      	ldr	r1, [pc, #168]	@ (8001914 <UnlinkTimer+0x100>)
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3315      	adds	r3, #21
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800187c:	79f9      	ldrb	r1, [r7, #7]
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	4824      	ldr	r0, [pc, #144]	@ (8001914 <UnlinkTimer+0x100>)
 8001882:	460b      	mov	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	440b      	add	r3, r1
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4403      	add	r3, r0
 800188c:	3315      	adds	r3, #21
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2d8      	uxtb	r0, r3
 8001892:	4920      	ldr	r1, [pc, #128]	@ (8001914 <UnlinkTimer+0x100>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3315      	adds	r3, #21
 80018a0:	4602      	mov	r2, r0
 80018a2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018a4:	7bbb      	ldrb	r3, [r7, #14]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d013      	beq.n	80018d2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80018aa:	79f9      	ldrb	r1, [r7, #7]
 80018ac:	7bba      	ldrb	r2, [r7, #14]
 80018ae:	4819      	ldr	r0, [pc, #100]	@ (8001914 <UnlinkTimer+0x100>)
 80018b0:	460b      	mov	r3, r1
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	440b      	add	r3, r1
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4403      	add	r3, r0
 80018ba:	3314      	adds	r3, #20
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2d8      	uxtb	r0, r3
 80018c0:	4914      	ldr	r1, [pc, #80]	@ (8001914 <UnlinkTimer+0x100>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	3314      	adds	r3, #20
 80018ce:	4602      	mov	r2, r0
 80018d0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	490f      	ldr	r1, [pc, #60]	@ (8001914 <UnlinkTimer+0x100>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	330c      	adds	r3, #12
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <UnlinkTimer+0xf8>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b06      	cmp	r3, #6
 80018ee:	d107      	bne.n	8001900 <UnlinkTimer+0xec>
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d104      	bne.n	8001900 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <UnlinkTimer+0x104>)
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018fc:	601a      	str	r2, [r3, #0]
  }

  return;
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
}
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	20000188 	.word	0x20000188
 8001910:	20000189 	.word	0x20000189
 8001914:	200000f8 	.word	0x200000f8
 8001918:	2000018c 	.word	0x2000018c

0800191c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001922:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <ReturnTimeElapsed+0x70>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800192a:	d026      	beq.n	800197a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800192c:	f7ff fe02 	bl	8001534 <ReadRtcSsrValue>
 8001930:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <ReturnTimeElapsed+0x70>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	d805      	bhi.n	8001948 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <ReturnTimeElapsed+0x70>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e00a      	b.n	800195e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <ReturnTimeElapsed+0x74>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001954:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <ReturnTimeElapsed+0x70>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800195e:	4b0d      	ldr	r3, [pc, #52]	@ (8001994 <ReturnTimeElapsed+0x78>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <ReturnTimeElapsed+0x7c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	40d3      	lsrs	r3, r2
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	e001      	b.n	800197e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	b29b      	uxth	r3, r3
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000018c 	.word	0x2000018c
 8001990:	20000194 	.word	0x20000194
 8001994:	20000192 	.word	0x20000192
 8001998:	20000191 	.word	0x20000191

0800199c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d108      	bne.n	80019be <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ac:	f7ff fdc2 	bl	8001534 <ReadRtcSsrValue>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a21      	ldr	r2, [pc, #132]	@ (8001a38 <RestartWakeupCounter+0x9c>)
 80019b4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80019b6:	2003      	movs	r0, #3
 80019b8:	f003 f809 	bl	80049ce <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80019bc:	e039      	b.n	8001a32 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d803      	bhi.n	80019cc <RestartWakeupCounter+0x30>
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <RestartWakeupCounter+0xa0>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d002      	beq.n	80019d2 <RestartWakeupCounter+0x36>
      Value -= 1;
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80019d2:	bf00      	nop
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <RestartWakeupCounter+0xa4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f8      	beq.n	80019d4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80019e2:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <RestartWakeupCounter+0xa4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <RestartWakeupCounter+0xa4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80019f2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019f4:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <RestartWakeupCounter+0xa8>)
 80019f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019fa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80019fc:	2003      	movs	r0, #3
 80019fe:	f002 fff4 	bl	80049ea <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <RestartWakeupCounter+0xac>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	88fa      	ldrh	r2, [r7, #6]
 8001a0c:	490e      	ldr	r1, [pc, #56]	@ (8001a48 <RestartWakeupCounter+0xac>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a12:	f7ff fd8f 	bl	8001534 <ReadRtcSsrValue>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <RestartWakeupCounter+0x9c>)
 8001a1a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <RestartWakeupCounter+0xa4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <RestartWakeupCounter+0xa4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a2a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001a2c:	f3af 8000 	nop.w
  return ;
 8001a30:	bf00      	nop
}
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000018c 	.word	0x2000018c
 8001a3c:	20000191 	.word	0x20000191
 8001a40:	20000374 	.word	0x20000374
 8001a44:	58000800 	.word	0x58000800
 8001a48:	40002800 	.word	0x40002800

08001a4c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a52:	4b45      	ldr	r3, [pc, #276]	@ (8001b68 <RescheduleTimerList+0x11c>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5e:	d107      	bne.n	8001a70 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a60:	bf00      	nop
 8001a62:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <RescheduleTimerList+0x120>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f8      	bne.n	8001a62 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a70:	4b3e      	ldr	r3, [pc, #248]	@ (8001b6c <RescheduleTimerList+0x120>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <RescheduleTimerList+0x120>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a7e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a80:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <RescheduleTimerList+0x124>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	493a      	ldr	r1, [pc, #232]	@ (8001b74 <RescheduleTimerList+0x128>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	3308      	adds	r3, #8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a9a:	f7ff ff3f 	bl	800191c <ReturnTimeElapsed>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d205      	bcs.n	8001ab6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001aae:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <RescheduleTimerList+0x12c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e04d      	b.n	8001b52 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4a30      	ldr	r2, [pc, #192]	@ (8001b7c <RescheduleTimerList+0x130>)
 8001aba:	8812      	ldrh	r2, [r2, #0]
 8001abc:	b292      	uxth	r2, r2
 8001abe:	4413      	add	r3, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d906      	bls.n	8001ad6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <RescheduleTimerList+0x130>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001ace:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <RescheduleTimerList+0x12c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e03d      	b.n	8001b52 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <RescheduleTimerList+0x12c>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ae6:	e034      	b.n	8001b52 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	4922      	ldr	r1, [pc, #136]	@ (8001b74 <RescheduleTimerList+0x128>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	3308      	adds	r3, #8
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d20a      	bcs.n	8001b16 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	491c      	ldr	r1, [pc, #112]	@ (8001b74 <RescheduleTimerList+0x128>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3308      	adds	r3, #8
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e013      	b.n	8001b3e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	4916      	ldr	r1, [pc, #88]	@ (8001b74 <RescheduleTimerList+0x128>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3308      	adds	r3, #8
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	1ac9      	subs	r1, r1, r3
 8001b2e:	4811      	ldr	r0, [pc, #68]	@ (8001b74 <RescheduleTimerList+0x128>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4403      	add	r3, r0
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	490c      	ldr	r1, [pc, #48]	@ (8001b74 <RescheduleTimerList+0x128>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3315      	adds	r3, #21
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b06      	cmp	r3, #6
 8001b56:	d1c7      	bne.n	8001ae8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b58:	89bb      	ldrh	r3, [r7, #12]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff1e 	bl	800199c <RestartWakeupCounter>

  return ;
 8001b60:	bf00      	nop
}
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40002800 	.word	0x40002800
 8001b6c:	20000374 	.word	0x20000374
 8001b70:	20000188 	.word	0x20000188
 8001b74:	200000f8 	.word	0x200000f8
 8001b78:	20000190 	.word	0x20000190
 8001b7c:	20000196 	.word	0x20000196

08001b80 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b86:	f3ef 8310 	mrs	r3, PRIMASK
 8001b8a:	617b      	str	r3, [r7, #20]
  return(result);
 8001b8c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b90:	b672      	cpsid	i
}
 8001b92:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b94:	4b59      	ldr	r3, [pc, #356]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	22ca      	movs	r2, #202	@ 0xca
 8001b9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b9c:	4b57      	ldr	r3, [pc, #348]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2253      	movs	r2, #83	@ 0x53
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ba4:	4b55      	ldr	r3, [pc, #340]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	4b54      	ldr	r3, [pc, #336]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bb2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001bb4:	4b52      	ldr	r3, [pc, #328]	@ (8001d00 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001bbc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bc0:	4950      	ldr	r1, [pc, #320]	@ (8001d04 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	330c      	adds	r3, #12
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d16e      	bne.n	8001cb4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001bd6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bda:	494a      	ldr	r1, [pc, #296]	@ (8001d04 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001bea:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bee:	4945      	ldr	r1, [pc, #276]	@ (8001d04 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001c00:	4b41      	ldr	r3, [pc, #260]	@ (8001d08 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d04c      	beq.n	8001ca4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001c0a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c0e:	493d      	ldr	r1, [pc, #244]	@ (8001d04 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	330d      	adds	r3, #13
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d124      	bne.n	8001c6e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001c24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fdf2 	bl	8001814 <UnlinkTimer>
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f383 8810 	msr	PRIMASK, r3
}
 8001c3a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001c3c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c40:	4930      	ldr	r1, [pc, #192]	@ (8001d04 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f9b8 	bl	8001fcc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	22ca      	movs	r2, #202	@ 0xca
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c64:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2253      	movs	r2, #83	@ 0x53
 8001c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c6c:	e012      	b.n	8001c94 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f383 8810 	msr	PRIMASK, r3
}
 8001c78:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f920 	bl	8001ec4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	22ca      	movs	r2, #202	@ 0xca
 8001c8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2253      	movs	r2, #83	@ 0x53
 8001c92:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	69b8      	ldr	r0, [r7, #24]
 8001c9e:	f000 fa1b 	bl	80020d8 <HW_TS_RTC_Int_AppNot>
 8001ca2:	e022      	b.n	8001cea <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001ca4:	f7ff fed2 	bl	8001a4c <RescheduleTimerList>
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f383 8810 	msr	PRIMASK, r3
}
 8001cb2:	e01a      	b.n	8001cea <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001cb4:	bf00      	nop
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f8      	beq.n	8001cb6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001cd4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001cd8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f383 8810 	msr	PRIMASK, r3
}
 8001ce8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001cea:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	22ff      	movs	r2, #255	@ 0xff
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001cf2:	bf00      	nop
}
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000374 	.word	0x20000374
 8001d00:	20000188 	.word	0x20000188
 8001d04:	200000f8 	.word	0x200000f8
 8001d08:	20000190 	.word	0x20000190
 8001d0c:	58000800 	.word	0x58000800

08001d10 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e98 <HW_TS_Init+0x188>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	22ca      	movs	r2, #202	@ 0xca
 8001d22:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d24:	4b5c      	ldr	r3, [pc, #368]	@ (8001e98 <HW_TS_Init+0x188>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2253      	movs	r2, #83	@ 0x53
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <HW_TS_Init+0x18c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a5a      	ldr	r2, [pc, #360]	@ (8001e9c <HW_TS_Init+0x18c>)
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001d38:	4b58      	ldr	r3, [pc, #352]	@ (8001e9c <HW_TS_Init+0x18c>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f1c3 0304 	rsb	r3, r3, #4
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b55      	ldr	r3, [pc, #340]	@ (8001ea0 <HW_TS_Init+0x190>)
 8001d4c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d4e:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <HW_TS_Init+0x18c>)
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d56:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001d5a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d101      	bne.n	8001d72 <HW_TS_Init+0x62>
  {
    return 32U;
 8001d6e:	2220      	movs	r2, #32
 8001d70:	e003      	b.n	8001d7a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	fab2 f282 	clz	r2, r2
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	40d3      	lsrs	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b48      	ldr	r3, [pc, #288]	@ (8001ea4 <HW_TS_Init+0x194>)
 8001d84:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d86:	4b45      	ldr	r3, [pc, #276]	@ (8001e9c <HW_TS_Init+0x18c>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HW_TS_Init+0x198>)
 8001d98:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HW_TS_Init+0x198>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	4a40      	ldr	r2, [pc, #256]	@ (8001ea4 <HW_TS_Init+0x194>)
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001dac:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea0 <HW_TS_Init+0x190>)
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	40d3      	lsrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d904      	bls.n	8001dc8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HW_TS_Init+0x19c>)
 8001dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	e003      	b.n	8001dd0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <HW_TS_Init+0x19c>)
 8001dce:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001dd0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001dd4:	f7ff fb9c 	bl	8001510 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001dd8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001ddc:	f7ff fb84 	bl	80014e8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d13d      	bne.n	8001e62 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001de6:	4b32      	ldr	r3, [pc, #200]	@ (8001eb0 <HW_TS_Init+0x1a0>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001dec:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HW_TS_Init+0x1a4>)
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001df2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	77fb      	strb	r3, [r7, #31]
 8001df8:	e00c      	b.n	8001e14 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001dfa:	7ffa      	ldrb	r2, [r7, #31]
 8001dfc:	492e      	ldr	r1, [pc, #184]	@ (8001eb8 <HW_TS_Init+0x1a8>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	330c      	adds	r3, #12
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	3301      	adds	r3, #1
 8001e12:	77fb      	strb	r3, [r7, #31]
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d9ef      	bls.n	8001dfa <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001e1a:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <HW_TS_Init+0x1ac>)
 8001e1c:	2206      	movs	r2, #6
 8001e1e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e2e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e40:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001e42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <HW_TS_Init+0x1b0>)
 8001e44:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e48:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f002 fdcd 	bl	80049ea <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e009      	b.n	8001e76 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f002 fdac 	bl	80049ce <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <HW_TS_Init+0x188>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	22ff      	movs	r2, #255	@ 0xff
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2103      	movs	r1, #3
 8001e82:	2003      	movs	r0, #3
 8001e84:	f002 fd61 	bl	800494a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f002 fd78 	bl	800497e <HAL_NVIC_EnableIRQ>

  return;
 8001e8e:	bf00      	nop
}
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000374 	.word	0x20000374
 8001e9c:	40002800 	.word	0x40002800
 8001ea0:	20000191 	.word	0x20000191
 8001ea4:	20000192 	.word	0x20000192
 8001ea8:	20000194 	.word	0x20000194
 8001eac:	20000196 	.word	0x20000196
 8001eb0:	20000190 	.word	0x20000190
 8001eb4:	2000018c 	.word	0x2000018c
 8001eb8:	200000f8 	.word	0x200000f8
 8001ebc:	20000188 	.word	0x20000188
 8001ec0:	58000800 	.word	0x58000800

08001ec4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ece:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001edc:	2003      	movs	r0, #3
 8001ede:	f002 fd5c 	bl	800499a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ee2:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	22ca      	movs	r2, #202	@ 0xca
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
 8001eea:	4b32      	ldr	r3, [pc, #200]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2253      	movs	r2, #83	@ 0x53
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	4930      	ldr	r1, [pc, #192]	@ (8001fb8 <HW_TS_Stop+0xf4>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	330c      	adds	r3, #12
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d142      	bne.n	8001f90 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fc80 	bl	8001814 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f14:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <HW_TS_Stop+0xf8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	2b06      	cmp	r3, #6
 8001f1e:	d12f      	bne.n	8001f80 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001f20:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <HW_TS_Stop+0xfc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f2c:	d107      	bne.n	8001f3e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001f2e:	bf00      	nop
 8001f30:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f8      	bne.n	8001f30 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f4c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f4e:	bf00      	nop
 8001f50:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f8      	beq.n	8001f50 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001f6e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HW_TS_Stop+0x100>)
 8001f72:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f76:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f002 fd36 	bl	80049ea <HAL_NVIC_ClearPendingIRQ>
 8001f7e:	e007      	b.n	8001f90 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HW_TS_Stop+0x104>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	7cfa      	ldrb	r2, [r7, #19]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001f8c:	f7ff fd5e 	bl	8001a4c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HW_TS_Stop+0xf0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	22ff      	movs	r2, #255	@ 0xff
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f002 fcf0 	bl	800497e <HAL_NVIC_EnableIRQ>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f383 8810 	msr	PRIMASK, r3
}
 8001fa8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001faa:	bf00      	nop
}
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000374 	.word	0x20000374
 8001fb8:	200000f8 	.word	0x200000f8
 8001fbc:	20000188 	.word	0x20000188
 8001fc0:	40002800 	.word	0x40002800
 8001fc4:	58000800 	.word	0x58000800
 8001fc8:	20000189 	.word	0x20000189

08001fcc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001fd8:	79fa      	ldrb	r2, [r7, #7]
 8001fda:	493b      	ldr	r1, [pc, #236]	@ (80020c8 <HW_TS_Start+0xfc>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d103      	bne.n	8001ff8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff66 	bl	8001ec4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002002:	b672      	cpsid	i
}
 8002004:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002006:	2003      	movs	r0, #3
 8002008:	f002 fcc7 	bl	800499a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800200c:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HW_TS_Start+0x100>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	22ca      	movs	r2, #202	@ 0xca
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HW_TS_Start+0x100>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2253      	movs	r2, #83	@ 0x53
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	492a      	ldr	r1, [pc, #168]	@ (80020c8 <HW_TS_Start+0xfc>)
 8002020:	4613      	mov	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	440b      	add	r3, r1
 800202a:	330c      	adds	r3, #12
 800202c:	2202      	movs	r2, #2
 800202e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	4925      	ldr	r1, [pc, #148]	@ (80020c8 <HW_TS_Start+0xfc>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	3308      	adds	r3, #8
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002044:	79fa      	ldrb	r2, [r7, #7]
 8002046:	4920      	ldr	r1, [pc, #128]	@ (80020c8 <HW_TS_Start+0xfc>)
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	3304      	adds	r3, #4
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb30 	bl	80016c0 <linkTimer>
 8002060:	4603      	mov	r3, r0
 8002062:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002064:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HW_TS_Start+0x104>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HW_TS_Start+0x108>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	7c7a      	ldrb	r2, [r7, #17]
 8002072:	429a      	cmp	r2, r3
 8002074:	d002      	beq.n	800207c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002076:	f7ff fce9 	bl	8001a4c <RescheduleTimerList>
 800207a:	e013      	b.n	80020a4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	4912      	ldr	r1, [pc, #72]	@ (80020c8 <HW_TS_Start+0xfc>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3308      	adds	r3, #8
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	8a7b      	ldrh	r3, [r7, #18]
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <HW_TS_Start+0xfc>)
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4403      	add	r3, r0
 80020a0:	3308      	adds	r3, #8
 80020a2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80020a4:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HW_TS_Start+0x100>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	22ff      	movs	r2, #255	@ 0xff
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80020ac:	2003      	movs	r0, #3
 80020ae:	f002 fc66 	bl	800497e <HAL_NVIC_EnableIRQ>
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f383 8810 	msr	PRIMASK, r3
}
 80020bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80020be:	bf00      	nop
}
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200000f8 	.word	0x200000f8
 80020cc:	20000374 	.word	0x20000374
 80020d0:	20000188 	.word	0x20000188
 80020d4:	20000189 	.word	0x20000189

080020d8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	460b      	mov	r3, r1
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4798      	blx	r3

  return;
 80020ea:	bf00      	nop
}
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	4613      	mov	r3, r2
 8002104:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800210a:	2300      	movs	r3, #0
 800210c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d10e      	bne.n	8002132 <HW_UART_Transmit_DMA+0x3e>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
 8002114:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <HW_UART_Transmit_DMA+0x80>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <HW_UART_Transmit_DMA+0x84>)
 800211c:	4a17      	ldr	r2, [pc, #92]	@ (800217c <HW_UART_Transmit_DMA+0x88>)
 800211e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002120:	89bb      	ldrh	r3, [r7, #12]
 8002122:	461a      	mov	r2, r3
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	4814      	ldr	r0, [pc, #80]	@ (8002178 <HW_UART_Transmit_DMA+0x84>)
 8002128:	f007 f86e 	bl	8009208 <HAL_UART_Transmit_DMA>
 800212c:	4603      	mov	r3, r0
 800212e:	75fb      	strb	r3, [r7, #23]
            break;
 8002130:	e000      	b.n	8002134 <HW_UART_Transmit_DMA+0x40>
#endif

        default:
            break;
 8002132:	bf00      	nop
    }

    switch (hal_status)
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d816      	bhi.n	8002168 <HW_UART_Transmit_DMA+0x74>
 800213a:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <HW_UART_Transmit_DMA+0x4c>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002151 	.word	0x08002151
 8002144:	08002157 	.word	0x08002157
 8002148:	0800215d 	.word	0x0800215d
 800214c:	08002163 	.word	0x08002163
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002150:	2300      	movs	r3, #0
 8002152:	75bb      	strb	r3, [r7, #22]
            break;
 8002154:	e009      	b.n	800216a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002156:	2301      	movs	r3, #1
 8002158:	75bb      	strb	r3, [r7, #22]
            break;
 800215a:	e006      	b.n	800216a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800215c:	2302      	movs	r3, #2
 800215e:	75bb      	strb	r3, [r7, #22]
            break;
 8002160:	e003      	b.n	800216a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002162:	2303      	movs	r3, #3
 8002164:	75bb      	strb	r3, [r7, #22]
            break;
 8002166:	e000      	b.n	800216a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002168:	bf00      	nop
    }

    return hw_status;
 800216a:	7dbb      	ldrb	r3, [r7, #22]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000198 	.word	0x20000198
 8002178:	2000023c 	.word	0x2000023c
 800217c:	40008000 	.word	0x40008000

08002180 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_UART_TxCpltCallback+0x34>)
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_UART_TxCpltCallback+0x24>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_UART_TxCpltCallback+0x38>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_hlpuart1TxCb();
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_UART_TxCpltCallback+0x38>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4798      	blx	r3
            }
            break;
 80021a2:	e001      	b.n	80021a8 <HAL_UART_TxCpltCallback+0x28>
#endif

        default:
            break;
 80021a4:	bf00      	nop
 80021a6:	e000      	b.n	80021aa <HAL_UART_TxCpltCallback+0x2a>
            break;
 80021a8:	bf00      	nop
    }

    return;
 80021aa:	bf00      	nop
}
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40008000 	.word	0x40008000
 80021b8:	20000198 	.word	0x20000198

080021bc <LL_RCC_LSE_SetDriveCapability>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021cc:	f023 0218 	bic.w	r2, r3, #24
 80021d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_AHB1_GRP1_EnableClock>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002204:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800220c:	68fb      	ldr	r3, [r7, #12]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_AHB2_GRP1_EnableClock>:
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002228:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4313      	orrs	r3, r2
 8002230:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_SAI_RxHalfCpltCallback>:
volatile uint8_t flag2 = 0;
volatile uint32_t missedFrames = 0;
volatile uint32_t numFrames = 0;
uint32_t numNotifs= 0;
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	if(flag1){
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_SAI_RxHalfCpltCallback+0x38>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_SAI_RxHalfCpltCallback+0x1c>
		missedFrames++;
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_SAI_RxHalfCpltCallback+0x3c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <HAL_SAI_RxHalfCpltCallback+0x3c>)
 8002266:	6013      	str	r3, [r2, #0]
	}
	flag1 = 1;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_SAI_RxHalfCpltCallback+0x38>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
	numFrames++;
 800226e:	4b07      	ldr	r3, [pc, #28]	@ (800228c <HAL_SAI_RxHalfCpltCallback+0x40>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a05      	ldr	r2, [pc, #20]	@ (800228c <HAL_SAI_RxHalfCpltCallback+0x40>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	200004f4 	.word	0x200004f4
 8002288:	200004f8 	.word	0x200004f8
 800228c:	200004fc 	.word	0x200004fc

08002290 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback (SAI_HandleTypeDef *hsai)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if(flag2){
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_SAI_RxCpltCallback+0x38>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_SAI_RxCpltCallback+0x1c>
		missedFrames++;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_SAI_RxCpltCallback+0x3c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <HAL_SAI_RxCpltCallback+0x3c>)
 80022aa:	6013      	str	r3, [r2, #0]
	}
	flag2 = 1;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_SAI_RxCpltCallback+0x38>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
	numFrames++;
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <HAL_SAI_RxCpltCallback+0x40>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <HAL_SAI_RxCpltCallback+0x40>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	200004f5 	.word	0x200004f5
 80022cc:	200004f8 	.word	0x200004f8
 80022d0:	200004fc 	.word	0x200004fc

080022d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	f5ad 4dd7 	sub.w	sp, sp, #27520	@ 0x6b80
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	volatile uint8_t sound_in[PDM_BUFFER_LENGTH] = {0};
 80022dc:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 80022e0:	3b30      	subs	r3, #48	@ 0x30
 80022e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00f f88b 	bl	8011404 <memset>
	int16_t sound_out[AUDIO_BUFFER_LENGTH] = {0};
 80022ee:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 80022f2:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80022f6:	4618      	mov	r0, r3
 80022f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022fc:	461a      	mov	r2, r3
 80022fe:	2100      	movs	r1, #0
 8002300:	f00f f880 	bl	8011404 <memset>
	int8_t sound_out_8bit[AUDIO_BUFFER_LENGTH_HALF] = {0};
 8002304:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 8002308:	f5a3 6323 	sub.w	r3, r3, #2608	@ 0xa30
 800230c:	4618      	mov	r0, r3
 800230e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002312:	461a      	mov	r2, r3
 8002314:	2100      	movs	r1, #0
 8002316:	f00f f875 	bl	8011404 <memset>
	uint8_t pdata[4352] = {0}; //Buffer for reading and writing to flash cache which is 4352 bytes.
 800231a:	f507 53dc 	add.w	r3, r7, #7040	@ 0x1b80
 800231e:	f5a3 6333 	sub.w	r3, r3, #2864	@ 0xb30
 8002322:	4618      	mov	r0, r3
 8002324:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002328:	461a      	mov	r2, r3
 800232a:	2100      	movs	r1, #0
 800232c:	f00f f86a 	bl	8011404 <memset>
	uint8_t batteryData[4096];
	uint32_t startTick, curTick, prevBatteryTick=0, i, pdata_idx=0, flashAddrWrite=1, flashAddrRead, batteryData_idx=0, temp;
 8002330:	2300      	movs	r3, #0
 8002332:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002336:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	2300      	movs	r3, #0
 800233e:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002342:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 800234e:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 800235a:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800235e:	6013      	str	r3, [r2, #0]

	for(i = 0; i < 4096; i++){
 8002360:	2300      	movs	r3, #0
 8002362:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002366:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e016      	b.n	800239c <main+0xc8>
		batteryData[i] = 0xFF;
 800236e:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8002372:	f5a3 6233 	sub.w	r2, r3, #2864	@ 0xb30
 8002376:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800237a:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4413      	add	r3, r2
 8002382:	22ff      	movs	r2, #255	@ 0xff
 8002384:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 4096; i++){
 8002386:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800238a:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002396:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80023a0:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023aa:	d3e0      	bcc.n	800236e <main+0x9a>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ac:	f001 fa56 	bl	800385c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80023b0:	f7fe fdac 	bl	8000f0c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b4:	f000 fa52 	bl	800285c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023b8:	f000 fabc 	bl	8002934 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80023bc:	f000 fb52 	bl	8002a64 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c0:	f000 fcce 	bl	8002d60 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c4:	f000 fcb2 	bl	8002d2c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80023c8:	f000 fb60 	bl	8002a8c <MX_LPUART1_UART_Init>
  MX_SAI1_Init();
 80023cc:	f000 fc0c 	bl	8002be8 <MX_SAI1_Init>
  MX_SPI1_Init();
 80023d0:	f000 fc6e 	bl	8002cb0 <MX_SPI1_Init>
  MX_RTC_Init();
 80023d4:	f000 fbd4 	bl	8002b80 <MX_RTC_Init>
  MX_QUADSPI_Init();
 80023d8:	f000 fba4 	bl	8002b24 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 80023dc:	f000 fade 	bl	800299c <MX_ADC1_Init>
  MX_RF_Init();
 80023e0:	f000 fbc6 	bl	8002b70 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  //Need to enable CRC clock for PDM2PCM library to work
  __HAL_RCC_CRC_CLK_ENABLE();
 80023e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80023e8:	f7ff fefe 	bl	80021e8 <LL_AHB1_GRP1_EnableClock>
  CRC->CR = CRC_CR_RESET;
 80023ec:	4bce      	ldr	r3, [pc, #824]	@ (8002728 <main+0x454>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	609a      	str	r2, [r3, #8]
  PDM_FilterConfig.decimation_factor = PDM_FILTER_DEC_FACTOR_128;
  pdm_error =  PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler, &PDM_FilterConfig);*/

  PDM2PCM_Handler_t PDM2PCMHandler;
  PDM2PCM_Config_t   PDM2PCMConfig;
  PDM2PCMHandler.bit_order  = PDM2PCM_BIT_ORDER_MSB;
 80023f2:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 80023f6:	f6a3 3378 	subw	r3, r3, #2936	@ 0xb78
 80023fa:	2201      	movs	r2, #1
 80023fc:	801a      	strh	r2, [r3, #0]
  PDM2PCMHandler.endianness = PDM2PCM_ENDIANNESS_LE;
 80023fe:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8002402:	f6a3 3378 	subw	r3, r3, #2936	@ 0xb78
 8002406:	2200      	movs	r2, #0
 8002408:	805a      	strh	r2, [r3, #2]
  PDM2PCMHandler.high_pass_tap = 2122358088;
 800240a:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 800240e:	f6a3 3378 	subw	r3, r3, #2936	@ 0xb78
 8002412:	4ac6      	ldr	r2, [pc, #792]	@ (800272c <main+0x458>)
 8002414:	605a      	str	r2, [r3, #4]
  PDM2PCMHandler.out_ptr_channels = 1;
 8002416:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 800241a:	f6a3 3378 	subw	r3, r3, #2936	@ 0xb78
 800241e:	2201      	movs	r2, #1
 8002420:	815a      	strh	r2, [r3, #10]
  PDM2PCMHandler.in_ptr_channels  = 1;
 8002422:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8002426:	f6a3 3378 	subw	r3, r3, #2936	@ 0xb78
 800242a:	2201      	movs	r2, #1
 800242c:	811a      	strh	r2, [r3, #8]
  PDM2PCMConfig.output_samples_number = AUDIO_BUFFER_LENGTH_HALF;
 800242e:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8002432:	f5a3 6338 	sub.w	r3, r3, #2944	@ 0xb80
 8002436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243a:	805a      	strh	r2, [r3, #2]
  PDM2PCMConfig.mic_gain = 20;
 800243c:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8002440:	f5a3 6338 	sub.w	r3, r3, #2944	@ 0xb80
 8002444:	2214      	movs	r2, #20
 8002446:	809a      	strh	r2, [r3, #4]
  PDM2PCMConfig.decimation_factor = PDM2PCM_DEC_FACTOR_128;
 8002448:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 800244c:	f5a3 6338 	sub.w	r3, r3, #2944	@ 0xb80
 8002450:	2204      	movs	r2, #4
 8002452:	801a      	strh	r2, [r3, #0]
  PDM2PCM_init(&PDM2PCMHandler);
 8002454:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002458:	3b78      	subs	r3, #120	@ 0x78
 800245a:	4618      	mov	r0, r3
 800245c:	f00e fd96 	bl	8010f8c <PDM2PCM_init>
  PDM2PCM_setConfig(&PDM2PCMHandler, &PDM2PCMConfig);
 8002460:	463a      	mov	r2, r7
 8002462:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002466:	3b78      	subs	r3, #120	@ 0x78
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f00e fddc 	bl	8011028 <PDM2PCM_setConfig>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8002470:	2201      	movs	r2, #1
 8002472:	2120      	movs	r1, #32
 8002474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002478:	f002 ff68 	bl	800534c <HAL_GPIO_WritePin>
  HAL_SAI_Receive_DMA(&hsai_BlockA1,sound_in, PDM_BUFFER_LENGTH);
 800247c:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 8002480:	3b30      	subs	r3, #48	@ 0x30
 8002482:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002486:	4619      	mov	r1, r3
 8002488:	48a9      	ldr	r0, [pc, #676]	@ (8002730 <main+0x45c>)
 800248a:	f006 fc33 	bl	8008cf4 <HAL_SAI_Receive_DMA>
  State myState = LIVE;
 800248e:	2301      	movs	r3, #1
 8002490:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002494:	f102 0273 	add.w	r2, r2, #115	@ 0x73
 8002498:	7013      	strb	r3, [r2, #0]
  QSPI_unlockBlocks(&hqspi);
 800249a:	48a6      	ldr	r0, [pc, #664]	@ (8002734 <main+0x460>)
 800249c:	f000 fc91 	bl	8002dc2 <QSPI_unlockBlocks>
  APP_DBG_MSG("Hello");
 80024a0:	48a5      	ldr	r0, [pc, #660]	@ (8002738 <main+0x464>)
 80024a2:	f009 fa3e 	bl	800b922 <DbgTraceGetFileName>
 80024a6:	4601      	mov	r1, r0
 80024a8:	23dd      	movs	r3, #221	@ 0xdd
 80024aa:	4aa4      	ldr	r2, [pc, #656]	@ (800273c <main+0x468>)
 80024ac:	48a4      	ldr	r0, [pc, #656]	@ (8002740 <main+0x46c>)
 80024ae:	f00e ff31 	bl	8011314 <iprintf>
 80024b2:	48a4      	ldr	r0, [pc, #656]	@ (8002744 <main+0x470>)
 80024b4:	f00e ff2e 	bl	8011314 <iprintf>
  if(myState == RECORDING){
 80024b8:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80024bc:	f103 0373 	add.w	r3, r3, #115	@ 0x73
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d12d      	bne.n	8002522 <main+0x24e>
	  for(i = 0; i < 2048; i++){
 80024c6:	2300      	movs	r3, #0
 80024c8:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80024cc:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e012      	b.n	80024fa <main+0x226>
		  QSPI_blockErase(&hqspi, i);
 80024d4:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80024d8:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80024dc:	6819      	ldr	r1, [r3, #0]
 80024de:	4895      	ldr	r0, [pc, #596]	@ (8002734 <main+0x460>)
 80024e0:	f000 fd4e 	bl	8002f80 <QSPI_blockErase>
	  for(i = 0; i < 2048; i++){
 80024e4:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80024e8:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80024f4:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80024fe:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002508:	d3e4      	bcc.n	80024d4 <main+0x200>
	  }
	  APP_DBG_MSG("Start Recording");
 800250a:	488b      	ldr	r0, [pc, #556]	@ (8002738 <main+0x464>)
 800250c:	f009 fa09 	bl	800b922 <DbgTraceGetFileName>
 8002510:	4601      	mov	r1, r0
 8002512:	23e2      	movs	r3, #226	@ 0xe2
 8002514:	4a89      	ldr	r2, [pc, #548]	@ (800273c <main+0x468>)
 8002516:	488a      	ldr	r0, [pc, #552]	@ (8002740 <main+0x46c>)
 8002518:	f00e fefc 	bl	8011314 <iprintf>
 800251c:	488a      	ldr	r0, [pc, #552]	@ (8002748 <main+0x474>)
 800251e:	f00e fef9 	bl	8011314 <iprintf>
  }

  startTick = HAL_GetTick();
 8002522:	f001 fa09 	bl	8003938 <HAL_GetTick>
 8002526:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800252a:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 800252e:	6018      	str	r0, [r3, #0]
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002530:	f7fe fcfa 	bl	8000f28 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  curTick = HAL_GetTick();
 8002534:	f001 fa00 	bl	8003938 <HAL_GetTick>
 8002538:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800253c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002540:	6018      	str	r0, [r3, #0]
		  memcpy(batteryData, &temp, 4);
		  QSPI_program(&hqspi, batteryData, batteryData_idx);
		  batteryData_idx++;
	  }

	  if(pdata_idx >= 4096){
 8002542:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 8002546:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002550:	d322      	bcc.n	8002598 <main+0x2c4>
		  QSPI_program(&hqspi, pdata, flashAddrWrite);
 8002552:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002556:	3b30      	subs	r3, #48	@ 0x30
 8002558:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 800255c:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4873      	ldr	r0, [pc, #460]	@ (8002734 <main+0x460>)
 8002566:	f000 fc97 	bl	8002e98 <QSPI_program>
		  flashAddrWrite++;
 800256a:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800256e:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 800257a:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800257e:	6013      	str	r3, [r2, #0]
		  pdata_idx = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002586:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800258a:	6013      	str	r3, [r2, #0]
		  myState = TRANSFERRING;
 800258c:	2303      	movs	r3, #3
 800258e:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002592:	f102 0273 	add.w	r2, r2, #115	@ 0x73
 8002596:	7013      	strb	r3, [r2, #0]
	  }

	  if(flag1){
 8002598:	4b6c      	ldr	r3, [pc, #432]	@ (800274c <main+0x478>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8098 	beq.w	80026d4 <main+0x400>
		  flag1 = 0;
 80025a4:	4b69      	ldr	r3, [pc, #420]	@ (800274c <main+0x478>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
		  PDM2PCM_process(&PDM2PCMHandler, &sound_in[0], &sound_out[0]);
 80025aa:	f507 520e 	add.w	r2, r7, #9088	@ 0x2380
 80025ae:	3a30      	subs	r2, #48	@ 0x30
 80025b0:	f507 512e 	add.w	r1, r7, #11136	@ 0x2b80
 80025b4:	3930      	subs	r1, #48	@ 0x30
 80025b6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80025ba:	3b78      	subs	r3, #120	@ 0x78
 80025bc:	4618      	mov	r0, r3
 80025be:	f00e fdcb 	bl	8011158 <PDM2PCM_process>
		  //PDM_Filter(&sound_in[0], &sound_out[0], &PDM_FilterHandler);
		  switch(myState)
 80025c2:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80025c6:	f103 0373 	add.w	r3, r3, #115	@ 0x73
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d002      	beq.n	80025d6 <main+0x302>
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d061      	beq.n	8002698 <main+0x3c4>
 80025d4:	e13c      	b.n	8002850 <main+0x57c>
		  {
		  case(LIVE):
			  for(int i = 0; i < AUDIO_BUFFER_LENGTH_HALF/2; i++){
 80025d6:	2300      	movs	r3, #0
 80025d8:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80025dc:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e025      	b.n	8002630 <main+0x35c>
				  sound_out_8bit[i] = (sound_out[i*2] >> 8);
 80025e4:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80025e8:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	005a      	lsls	r2, r3, #1
 80025f0:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 80025f4:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 80025f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80025fc:	121b      	asrs	r3, r3, #8
 80025fe:	b21b      	sxth	r3, r3
 8002600:	b259      	sxtb	r1, r3
 8002602:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 8002606:	f5a3 6223 	sub.w	r2, r3, #2608	@ 0xa30
 800260a:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800260e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4413      	add	r3, r2
 8002616:	460a      	mov	r2, r1
 8002618:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < AUDIO_BUFFER_LENGTH_HALF/2; i++){
 800261a:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800261e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 800262a:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 8002634:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2bff      	cmp	r3, #255	@ 0xff
 800263c:	d9d2      	bls.n	80025e4 <main+0x310>
			  }

			  for(int i = 0; i < 2; i++){
 800263e:	2300      	movs	r3, #0
 8002640:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002644:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <main+0x3b4>
				  Notify_Client_With_Data(&sound_out_8bit[i*128], 128);
 800264c:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 8002650:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	01da      	lsls	r2, r3, #7
 8002658:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 800265c:	3b30      	subs	r3, #48	@ 0x30
 800265e:	4413      	add	r3, r2
 8002660:	2180      	movs	r1, #128	@ 0x80
 8002662:	4618      	mov	r0, r3
 8002664:	f00b fefe 	bl	800e464 <Notify_Client_With_Data>
				  numNotifs++;
 8002668:	4b39      	ldr	r3, [pc, #228]	@ (8002750 <main+0x47c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	4a38      	ldr	r2, [pc, #224]	@ (8002750 <main+0x47c>)
 8002670:	6013      	str	r3, [r2, #0]
			  for(int i = 0; i < 2; i++){
 8002672:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 8002676:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002682:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800268c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	ddda      	ble.n	800264c <main+0x378>
			  }
			  break;
 8002696:	e0db      	b.n	8002850 <main+0x57c>
		  case(RECORDING):
			  //Copy half of the buffer length. But length is double because of 16 bit.
			  memcpy(&pdata[pdata_idx], sound_out, AUDIO_BUFFER_LENGTH);
 8002698:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800269c:	3b30      	subs	r3, #48	@ 0x30
 800269e:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80026a2:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	1898      	adds	r0, r3, r2
 80026aa:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 80026ae:	3b30      	subs	r3, #48	@ 0x30
 80026b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026b4:	4619      	mov	r1, r3
 80026b6:	f00e fef0 	bl	801149a <memcpy>
			  pdata_idx += AUDIO_BUFFER_LENGTH;
 80026ba:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80026be:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026c8:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80026cc:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80026d0:	6013      	str	r3, [r2, #0]
			  break;
 80026d2:	e0bd      	b.n	8002850 <main+0x57c>
		  }

	  }
	  else if(flag2){
 80026d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <main+0x480>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80b8 	beq.w	8002850 <main+0x57c>
		  flag2 = 0;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <main+0x480>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
		  PDM2PCM_process(&PDM2PCMHandler, &sound_in[PDM_BUFFER_LENGTH_HALF], &sound_out[AUDIO_BUFFER_LENGTH_HALF]);
 80026e6:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 80026ea:	3b30      	subs	r3, #48	@ 0x30
 80026ec:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 80026f0:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 80026f4:	3b30      	subs	r3, #48	@ 0x30
 80026f6:	f503 5100 	add.w	r1, r3, #8192	@ 0x2000
 80026fa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80026fe:	3b78      	subs	r3, #120	@ 0x78
 8002700:	4618      	mov	r0, r3
 8002702:	f00e fd29 	bl	8011158 <PDM2PCM_process>
		  //pdm_error = PDM_Filter(&sound_in[PDM_BUFFER_LENGTH_HALF], &sound_out[AUDIO_BUFFER_LENGTH_HALF], &PDM_FilterHandler);
		  switch(myState){
 8002706:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800270a:	f103 0373 	add.w	r3, r3, #115	@ 0x73
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d002      	beq.n	800271a <main+0x446>
 8002714:	2b02      	cmp	r3, #2
 8002716:	d07b      	beq.n	8002810 <main+0x53c>
 8002718:	e09a      	b.n	8002850 <main+0x57c>
		  case(LIVE):
			  for(int i = 0; i < 256; i++){
 800271a:	2300      	movs	r3, #0
 800271c:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002720:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e03f      	b.n	80027a8 <main+0x4d4>
 8002728:	40023000 	.word	0x40023000
 800272c:	7e809d48 	.word	0x7e809d48
 8002730:	20000398 	.word	0x20000398
 8002734:	20000330 	.word	0x20000330
 8002738:	08012cf4 	.word	0x08012cf4
 800273c:	08014130 	.word	0x08014130
 8002740:	08012d08 	.word	0x08012d08
 8002744:	08012d1c 	.word	0x08012d1c
 8002748:	08012d24 	.word	0x08012d24
 800274c:	200004f4 	.word	0x200004f4
 8002750:	20000500 	.word	0x20000500
 8002754:	200004f5 	.word	0x200004f5
				  sound_out_8bit[i] = (sound_out[i*2+AUDIO_BUFFER_LENGTH_HALF] >> 8);
 8002758:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800275c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	f503 7200 	add.w	r2, r3, #512	@ 0x200
 8002768:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 800276c:	f5a3 6303 	sub.w	r3, r3, #2096	@ 0x830
 8002770:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002774:	121b      	asrs	r3, r3, #8
 8002776:	b21b      	sxth	r3, r3
 8002778:	b259      	sxtb	r1, r3
 800277a:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 800277e:	f5a3 6223 	sub.w	r2, r3, #2608	@ 0xa30
 8002782:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 8002786:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4413      	add	r3, r2
 800278e:	460a      	mov	r2, r1
 8002790:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 256; i++){
 8002792:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 8002796:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80027a2:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80027ac:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2bff      	cmp	r3, #255	@ 0xff
 80027b4:	ddd0      	ble.n	8002758 <main+0x484>
			  }
			  for(int i = 0; i < 2; i++){
 80027b6:	2300      	movs	r3, #0
 80027b8:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80027bc:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e01d      	b.n	8002800 <main+0x52c>
				  Notify_Client_With_Data(&sound_out_8bit[i*128], 128);
 80027c4:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80027c8:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	01da      	lsls	r2, r3, #7
 80027d0:	f507 5306 	add.w	r3, r7, #8576	@ 0x2180
 80027d4:	3b30      	subs	r3, #48	@ 0x30
 80027d6:	4413      	add	r3, r2
 80027d8:	2180      	movs	r1, #128	@ 0x80
 80027da:	4618      	mov	r0, r3
 80027dc:	f00b fe42 	bl	800e464 <Notify_Client_With_Data>
				  numNotifs++;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <main+0x584>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <main+0x584>)
 80027e8:	6013      	str	r3, [r2, #0]
			  for(int i = 0; i < 2; i++){
 80027ea:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 80027ee:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3301      	adds	r3, #1
 80027f6:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 80027fa:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 8002804:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	ddda      	ble.n	80027c4 <main+0x4f0>
			  }
			  break;
 800280e:	e01f      	b.n	8002850 <main+0x57c>
		  case(RECORDING):
				  //Copy half of the buffer length. But length is double because of 16 bit.
			  memcpy(&pdata[pdata_idx], &sound_out[AUDIO_BUFFER_LENGTH_HALF], AUDIO_BUFFER_LENGTH);
 8002810:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8002814:	3b30      	subs	r3, #48	@ 0x30
 8002816:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 800281a:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	1898      	adds	r0, r3, r2
 8002822:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8002826:	3b30      	subs	r3, #48	@ 0x30
 8002828:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800282c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002830:	4619      	mov	r1, r3
 8002832:	f00e fe32 	bl	801149a <memcpy>
		  	  pdata_idx += AUDIO_BUFFER_LENGTH;
 8002836:	f507 43d6 	add.w	r3, r7, #27392	@ 0x6b00
 800283a:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002844:	f507 42d6 	add.w	r2, r7, #27392	@ 0x6b00
 8002848:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800284c:	6013      	str	r3, [r2, #0]
		  	  break;
 800284e:	bf00      	nop
		  }
	  }


    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002850:	f7fe fe19 	bl	8001486 <MX_APPE_Process>
	  curTick = HAL_GetTick();
 8002854:	e66e      	b.n	8002534 <main+0x260>
 8002856:	bf00      	nop
 8002858:	20000500 	.word	0x20000500

0800285c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b09a      	sub	sp, #104	@ 0x68
 8002860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	2248      	movs	r2, #72	@ 0x48
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f00e fdca 	bl	8011404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
 800287c:	611a      	str	r2, [r3, #16]
 800287e:	615a      	str	r2, [r3, #20]
 8002880:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV8);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800288c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002890:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800289c:	f043 0303 	orr.w	r3, r3, #3
 80028a0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80028a2:	f002 fe15 	bl	80054d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80028a6:	2010      	movs	r0, #16
 80028a8:	f7ff fc88 	bl	80021bc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ac:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <SystemClock_Config+0xd4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002930 <SystemClock_Config+0xd4>)
 80028b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <SystemClock_Config+0xd4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80028c8:	2307      	movs	r3, #7
 80028ca:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028d2:	2301      	movs	r3, #1
 80028d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028dc:	2340      	movs	r3, #64	@ 0x40
 80028de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e4:	f107 0320 	add.w	r3, r7, #32
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 fcad 	bl	8006248 <HAL_RCC_OscConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80028f4:	f000 fa5f 	bl	8002db6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80028f8:	236f      	movs	r3, #111	@ 0x6f
 80028fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80028fc:	2302      	movs	r3, #2
 80028fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2101      	movs	r1, #1
 8002918:	4618      	mov	r0, r3
 800291a:	f004 f809 	bl	8006930 <HAL_RCC_ClockConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002924:	f000 fa47 	bl	8002db6 <Error_Handler>
  }
}
 8002928:	bf00      	nop
 800292a:	3768      	adds	r7, #104	@ 0x68
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	58000400 	.word	0x58000400

08002934 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b094      	sub	sp, #80	@ 0x50
 8002938:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800293a:	463b      	mov	r3, r7
 800293c:	2250      	movs	r2, #80	@ 0x50
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f00e fd5f 	bl	8011404 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002946:	f44f 5351 	mov.w	r3, #13376	@ 0x3440
 800294a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 32;
 800294c:	2320      	movs	r3, #32
 800294e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002950:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002954:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800295a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800295c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002960:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADCCLK;
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <PeriphCommonClock_Config+0x64>)
 8002964:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002966:	2300      	movs	r3, #0
 8002968:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800296a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800296e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002970:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002974:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002976:	2302      	movs	r3, #2
 8002978:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800297a:	2310      	movs	r3, #16
 800297c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297e:	463b      	mov	r3, r7
 8002980:	4618      	mov	r0, r3
 8002982:	f004 fe00 	bl	8007586 <HAL_RCCEx_PeriphCLKConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800298c:	f000 fa13 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002990:	bf00      	nop
 8002992:	3750      	adds	r7, #80	@ 0x50
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	10010000 	.word	0x10010000

0800299c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029a2:	463b      	mov	r3, r7
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
 80029b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80029b2:	4b29      	ldr	r3, [pc, #164]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029b4:	4a29      	ldr	r2, [pc, #164]	@ (8002a5c <MX_ADC1_Init+0xc0>)
 80029b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029b8:	4b27      	ldr	r3, [pc, #156]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029be:	4b26      	ldr	r3, [pc, #152]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029c4:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029ca:	4b23      	ldr	r3, [pc, #140]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029d0:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029d2:	2204      	movs	r2, #4
 80029d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029f6:	4b18      	ldr	r3, [pc, #96]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029fc:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a04:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002a0a:	4b13      	ldr	r3, [pc, #76]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a12:	4811      	ldr	r0, [pc, #68]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 8002a14:	f001 f94c 	bl	8003cb0 <HAL_ADC_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002a1e:	f000 f9ca 	bl	8002db6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a22:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <MX_ADC1_Init+0xc4>)
 8002a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a26:	2306      	movs	r3, #6
 8002a28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a2e:	237f      	movs	r3, #127	@ 0x7f
 8002a30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a32:	2304      	movs	r3, #4
 8002a34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4806      	ldr	r0, [pc, #24]	@ (8002a58 <MX_ADC1_Init+0xbc>)
 8002a40:	f001 fa82 	bl	8003f48 <HAL_ADC_ConfigChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002a4a:	f000 f9b4 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000019c 	.word	0x2000019c
 8002a5c:	50040000 	.word	0x50040000
 8002a60:	14f00020 	.word	0x14f00020

08002a64 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <MX_IPCC_Init+0x20>)
 8002a6a:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <MX_IPCC_Init+0x24>)
 8002a6c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002a6e:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <MX_IPCC_Init+0x20>)
 8002a70:	f002 fca8 	bl	80053c4 <HAL_IPCC_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a7a:	f000 f99c 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000200 	.word	0x20000200
 8002a88:	58000c00 	.word	0x58000c00

08002a8c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002a90:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002a92:	4a23      	ldr	r2, [pc, #140]	@ (8002b20 <MX_LPUART1_UART_Init+0x94>)
 8002a94:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002a96:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002a98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a9c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ab6:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002abc:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ac2:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac8:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002ace:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ad4:	4811      	ldr	r0, [pc, #68]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002ad6:	f006 fb46 	bl	8009166 <HAL_UART_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ae0:	f000 f969 	bl	8002db6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	480d      	ldr	r0, [pc, #52]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002ae8:	f007 fd27 	bl	800a53a <HAL_UARTEx_SetTxFifoThreshold>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002af2:	f000 f960 	bl	8002db6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002af6:	2100      	movs	r1, #0
 8002af8:	4808      	ldr	r0, [pc, #32]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002afa:	f007 fd5c 	bl	800a5b6 <HAL_UARTEx_SetRxFifoThreshold>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b04:	f000 f957 	bl	8002db6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002b08:	4804      	ldr	r0, [pc, #16]	@ (8002b1c <MX_LPUART1_UART_Init+0x90>)
 8002b0a:	f007 fcdd 	bl	800a4c8 <HAL_UARTEx_DisableFifoMode>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b14:	f000 f94f 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000023c 	.word	0x2000023c
 8002b20:	40008000 	.word	0x40008000

08002b24 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002b28:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b2a:	4a10      	ldr	r2, [pc, #64]	@ (8002b6c <MX_QUADSPI_Init+0x48>)
 8002b2c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 4;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b30:	2204      	movs	r2, #4
 8002b32:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b36:	2204      	movs	r2, #4
 8002b38:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 28;
 8002b40:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b42:	221c      	movs	r2, #28
 8002b44:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002b4c:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002b52:	4805      	ldr	r0, [pc, #20]	@ (8002b68 <MX_QUADSPI_Init+0x44>)
 8002b54:	f002 fcda 	bl	800550c <HAL_QSPI_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002b5e:	f000 f92a 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000330 	.word	0x20000330
 8002b6c:	a0001000 	.word	0xa0001000

08002b70 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b84:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002b86:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <MX_RTC_Init+0x64>)
 8002b88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002b90:	4b13      	ldr	r3, [pc, #76]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002b92:	220f      	movs	r2, #15
 8002b94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002b98:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002b9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bb6:	480a      	ldr	r0, [pc, #40]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002bb8:	f005 fd30 	bl	800861c <HAL_RTC_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002bc2:	f000 f8f8 	bl	8002db6 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4805      	ldr	r0, [pc, #20]	@ (8002be0 <MX_RTC_Init+0x60>)
 8002bcc:	f005 fe34 	bl	8008838 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002bd6:	f000 f8ee 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000374 	.word	0x20000374
 8002be4:	40002800 	.word	0x40002800

08002be8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002bec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002bee:	4a2f      	ldr	r2, [pc, #188]	@ (8002cac <MX_SAI1_Init+0xc4>)
 8002bf0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c00:	2280      	movs	r2, #128	@ 0x80
 8002c02:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002c04:	4b28      	ldr	r3, [pc, #160]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002c0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002c10:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c16:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002c1c:	4b22      	ldr	r3, [pc, #136]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8002c22:	4b21      	ldr	r3, [pc, #132]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002c28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_MCKDIV;
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.Mckdiv = 0;
 8002c34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = ENABLE;
 8002c46:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c5e:	2210      	movs	r2, #16
 8002c60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002c86:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000001;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <MX_SAI1_Init+0xc0>)
 8002c94:	f005 fe9c 	bl	80089d0 <HAL_SAI_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8002c9e:	f000 f88a 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000398 	.word	0x20000398
 8002cac:	40015404 	.word	0x40015404

08002cb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d28 <MX_SPI1_Init+0x78>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002cc8:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002cce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002cfe:	2207      	movs	r2, #7
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d02:	4b08      	ldr	r3, [pc, #32]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d0e:	4805      	ldr	r0, [pc, #20]	@ (8002d24 <MX_SPI1_Init+0x74>)
 8002d10:	f006 f966 	bl	8008fe0 <HAL_SPI_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d1a:	f000 f84c 	bl	8002db6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000490 	.word	0x20000490
 8002d28:	40013000 	.word	0x40013000

08002d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d30:	2004      	movs	r0, #4
 8002d32:	f7ff fa59 	bl	80021e8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7ff fa56 	bl	80021e8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2100      	movs	r1, #0
 8002d40:	200b      	movs	r0, #11
 8002d42:	f001 fe02 	bl	800494a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d46:	200b      	movs	r0, #11
 8002d48:	f001 fe19 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	200c      	movs	r0, #12
 8002d52:	f001 fdfa 	bl	800494a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d56:	200c      	movs	r0, #12
 8002d58:	f001 fe11 	bl	800497e <HAL_NVIC_EnableIRQ>

}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d74:	2004      	movs	r0, #4
 8002d76:	f7ff fa50 	bl	800221a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f7ff fa4d 	bl	800221a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7ff fa4a 	bl	800221a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2120      	movs	r1, #32
 8002d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d8e:	f002 fadd 	bl	800534c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d92:	2320      	movs	r3, #32
 8002d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d96:	2301      	movs	r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002daa:	f002 f95f 	bl	800506c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002dba:	b672      	cpsid	i
}
 8002dbc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dbe:	bf00      	nop
 8002dc0:	e7fd      	b.n	8002dbe <Error_Handler+0x8>

08002dc2 <QSPI_unlockBlocks>:
	if(ret) return ret;
	ret = HAL_QSPI_Receive(hqspi, &status[2], HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
	return ret;
}

HAL_StatusTypeDef QSPI_unlockBlocks(QSPI_HandleTypeDef *hqspi){
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b092      	sub	sp, #72	@ 0x48
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command = {0};
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	2234      	movs	r2, #52	@ 0x34
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f00e fb16 	bl	8011404 <memset>
	uint8_t data = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002de2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de6:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.Instruction = 0x1F;
 8002de8:	231f      	movs	r3, #31
 8002dea:	613b      	str	r3, [r7, #16]
	s_command.DataMode = QSPI_DATA_1_LINE;
 8002dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002df0:	637b      	str	r3, [r7, #52]	@ 0x34
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8002df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.AddressSize = QSPI_ADDRESS_8_BITS;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
	s_command.Address = 0xA0;
 8002dfc:	23a0      	movs	r3, #160	@ 0xa0
 8002dfe:	617b      	str	r3, [r7, #20]
	s_command.DummyCycles = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.NbData = 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	63bb      	str	r3, [r7, #56]	@ 0x38
	ret = HAL_QSPI_Command(hqspi, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f002 fbf0 	bl	80055f8 <HAL_QSPI_Command>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(ret) return ret;
 8002e1e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <QSPI_unlockBlocks+0x6a>
 8002e26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002e2a:	e00c      	b.n	8002e46 <QSPI_unlockBlocks+0x84>
	ret = HAL_QSPI_Transmit(hqspi, &data, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e2c:	f107 030f 	add.w	r3, r7, #15
 8002e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f002 fc3c 	bl	80056b4 <HAL_QSPI_Transmit>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	return ret;
 8002e42:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3748      	adds	r7, #72	@ 0x48
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <QSPI_writeEnable>:
	if(ret) return ret;
	ret = HAL_QSPI_Receive(hqspi, pdata, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
	return ret;
}

HAL_StatusTypeDef QSPI_writeEnable(QSPI_HandleTypeDef *hqspi){
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b090      	sub	sp, #64	@ 0x40
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command = {0};
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	2234      	movs	r2, #52	@ 0x34
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f00e fad0 	bl	8011404 <memset>
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.Instruction = 0x06;
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	60fb      	str	r3, [r7, #12]
	s_command.DataMode = QSPI_DATA_NONE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.DummyCycles = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
	s_command.NbData = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	637b      	str	r3, [r7, #52]	@ 0x34
	return HAL_QSPI_Command(hqspi, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f002 fbb5 	bl	80055f8 <HAL_QSPI_Command>
 8002e8e:	4603      	mov	r3, r0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3740      	adds	r7, #64	@ 0x40
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <QSPI_program>:

HAL_StatusTypeDef QSPI_program(QSPI_HandleTypeDef *hqspi, uint8_t *pdata, uint32_t addr){
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b092      	sub	sp, #72	@ 0x48
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command = {0};
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	2234      	movs	r2, #52	@ 0x34
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00e faa9 	bl	8011404 <memset>
	HAL_StatusTypeDef ret = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(addr > 131072){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ebe:	d901      	bls.n	8002ec4 <QSPI_program+0x2c>
		return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e059      	b.n	8002f78 <QSPI_program+0xe0>
	}
	ret = QSPI_writeEnable(hqspi);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff ffc2 	bl	8002e4e <QSPI_writeEnable>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(ret) return ret;
 8002ed0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <QSPI_program+0x46>
 8002ed8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002edc:	e04c      	b.n	8002f78 <QSPI_program+0xe0>
	//Program Load x2 Random
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002ede:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.Instruction = 0x44;
 8002ee4:	2344      	movs	r3, #68	@ 0x44
 8002ee6:	613b      	str	r3, [r7, #16]
	s_command.DataMode = QSPI_DATA_2_LINES;
 8002ee8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8002eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.AddressSize = QSPI_ADDRESS_16_BITS;
 8002ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ef8:	61fb      	str	r3, [r7, #28]
	s_command.Address = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
	s_command.DummyCycles = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.NbData = 4096;
 8002f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f06:	63bb      	str	r3, [r7, #56]	@ 0x38
	ret = HAL_QSPI_Command(hqspi, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f10:	4619      	mov	r1, r3
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f002 fb70 	bl	80055f8 <HAL_QSPI_Command>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(ret) return ret;
 8002f1e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <QSPI_program+0x94>
 8002f26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f2a:	e025      	b.n	8002f78 <QSPI_program+0xe0>
	ret = HAL_QSPI_Transmit(hqspi, pdata, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f002 fbbe 	bl	80056b4 <HAL_QSPI_Transmit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(ret) return ret;
 8002f3e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <QSPI_program+0xb4>
 8002f46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f4a:	e015      	b.n	8002f78 <QSPI_program+0xe0>

	//Program Execute
	s_command.Instruction = 0x10;
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	613b      	str	r3, [r7, #16]
	s_command.DataMode = QSPI_DATA_NONE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8002f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f58:	61fb      	str	r3, [r7, #28]
	s_command.Address = addr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	617b      	str	r3, [r7, #20]
	s_command.DummyCycles = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.NbData = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	63bb      	str	r3, [r7, #56]	@ 0x38
	return HAL_QSPI_Command(hqspi, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6e:	4619      	mov	r1, r3
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f002 fb41 	bl	80055f8 <HAL_QSPI_Command>
 8002f76:	4603      	mov	r3, r0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3748      	adds	r7, #72	@ 0x48
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <QSPI_blockErase>:

HAL_StatusTypeDef QSPI_blockErase(QSPI_HandleTypeDef *hqspi, uint32_t addr){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b090      	sub	sp, #64	@ 0x40
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef s_command = {0};
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	2234      	movs	r2, #52	@ 0x34
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00e fa36 	bl	8011404 <memset>
	HAL_StatusTypeDef ret = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(addr >= 2048){
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fa4:	d301      	bcc.n	8002faa <QSPI_blockErase+0x2a>
		return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e02d      	b.n	8003006 <QSPI_blockErase+0x86>
	}
	ret = QSPI_writeEnable(hqspi);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ff4f 	bl	8002e4e <QSPI_writeEnable>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(ret) return ret;
 8002fb6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <QSPI_blockErase+0x44>
 8002fbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002fc2:	e020      	b.n	8003006 <QSPI_blockErase+0x86>
	//Block Erase
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fc8:	623b      	str	r3, [r7, #32]
	s_command.Instruction = 0xD8;
 8002fca:	23d8      	movs	r3, #216	@ 0xd8
 8002fcc:	60bb      	str	r3, [r7, #8]
	s_command.DataMode = QSPI_DATA_NONE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8002fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8002fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fdc:	617b      	str	r3, [r7, #20]
	s_command.Address = addr;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
	ret = HAL_QSPI_Command(hqspi, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002fe6:	f107 0308 	add.w	r3, r7, #8
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f002 fb01 	bl	80055f8 <HAL_QSPI_Command>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	HAL_Delay(10);
 8002ffc:	200a      	movs	r0, #10
 8002ffe:	f7fe fa1d 	bl	800143c <HAL_Delay>
	return ret;
 8003002:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8003006:	4618      	mov	r0, r3
 8003008:	3740      	adds	r7, #64	@ 0x40
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800301e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_AHB2_GRP1_EnableClock>:
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800303e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4313      	orrs	r3, r2
 8003046:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003054:	68fb      	ldr	r3, [r7, #12]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_AHB3_GRP1_EnableClock>:
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003070:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4313      	orrs	r3, r2
 8003078:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4013      	ands	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_APB1_GRP1_EnableClock>:
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030b8:	68fb      	ldr	r3, [r7, #12]
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <LL_APB1_GRP2_EnableClock>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80030ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4013      	ands	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030ea:	68fb      	ldr	r3, [r7, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_APB2_GRP1_EnableClock>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003106:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4313      	orrs	r3, r2
 800310e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003114:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800311c:	68fb      	ldr	r3, [r7, #12]
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800312e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003132:	f7ff ff96 	bl	8003062 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	202e      	movs	r0, #46	@ 0x2e
 800313c:	f001 fc05 	bl	800494a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003140:	202e      	movs	r0, #46	@ 0x2e
 8003142:	f001 fc1c 	bl	800497e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0d      	ldr	r2, [pc, #52]	@ (80031a0 <HAL_ADC_MspInit+0x54>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d113      	bne.n	8003196 <HAL_ADC_MspInit+0x4a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800316e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003172:	f7ff ff5d 	bl	8003030 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003176:	2001      	movs	r0, #1
 8003178:	f7ff ff5a 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800317c:	2301      	movs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003180:	2303      	movs	r3, #3
 8003182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	4619      	mov	r1, r3
 800318e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003192:	f001 ff6b 	bl	800506c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003196:	bf00      	nop
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	50040000 	.word	0x50040000

080031a4 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <HAL_IPCC_MspInit+0x44>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d113      	bne.n	80031de <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80031b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80031ba:	f7ff ff52 	bl	8003062 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	202c      	movs	r0, #44	@ 0x2c
 80031c4:	f001 fbc1 	bl	800494a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80031c8:	202c      	movs	r0, #44	@ 0x2c
 80031ca:	f001 fbd8 	bl	800497e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	202d      	movs	r0, #45	@ 0x2d
 80031d4:	f001 fbb9 	bl	800494a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80031d8:	202d      	movs	r0, #45	@ 0x2d
 80031da:	f001 fbd0 	bl	800497e <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	58000c00 	.word	0x58000c00

080031ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b09c      	sub	sp, #112	@ 0x70
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	2250      	movs	r2, #80	@ 0x50
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f00e f8f9 	bl	8011404 <memset>
  if(huart->Instance==LPUART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a38      	ldr	r2, [pc, #224]	@ (80032f8 <HAL_UART_MspInit+0x10c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d169      	bne.n	80032f0 <HAL_UART_MspInit+0x104>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800321c:	2302      	movs	r3, #2
 800321e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	4618      	mov	r0, r3
 800322a:	f004 f9ac 	bl	8007586 <HAL_RCCEx_PeriphCLKConfig>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003234:	f7ff fdbf 	bl	8002db6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003238:	2001      	movs	r0, #1
 800323a:	f7ff ff44 	bl	80030c6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323e:	2001      	movs	r0, #1
 8003240:	f7ff fef6 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003244:	2002      	movs	r0, #2
 8003246:	f7ff fef3 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA12     ------> LPUART1_RX
    PB5     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800324a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800324e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800325c:	2308      	movs	r3, #8
 800325e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003264:	4619      	mov	r1, r3
 8003266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800326a:	f001 feff 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800326e:	2320      	movs	r3, #32
 8003270:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327a:	2300      	movs	r3, #0
 800327c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800327e:	2308      	movs	r3, #8
 8003280:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003282:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003286:	4619      	mov	r1, r3
 8003288:	481c      	ldr	r0, [pc, #112]	@ (80032fc <HAL_UART_MspInit+0x110>)
 800328a:	f001 feef 	bl	800506c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800328e:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <HAL_UART_MspInit+0x114>)
 8003290:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <HAL_UART_MspInit+0x118>)
 8003292:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003294:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <HAL_UART_MspInit+0x114>)
 8003296:	2211      	movs	r2, #17
 8003298:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_UART_MspInit+0x114>)
 800329c:	2210      	movs	r2, #16
 800329e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a0:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032a6:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032a8:	2280      	movs	r2, #128	@ 0x80
 80032aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ac:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b2:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032be:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80032c4:	480e      	ldr	r0, [pc, #56]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032c6:	f001 fb9f 	bl	8004a08 <HAL_DMA_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80032d0:	f7ff fd71 	bl	8002db6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032d8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80032da:	4a09      	ldr	r2, [pc, #36]	@ (8003300 <HAL_UART_MspInit+0x114>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	2025      	movs	r0, #37	@ 0x25
 80032e6:	f001 fb30 	bl	800494a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80032ea:	2025      	movs	r0, #37	@ 0x25
 80032ec:	f001 fb47 	bl	800497e <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80032f0:	bf00      	nop
 80032f2:	3770      	adds	r7, #112	@ 0x70
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40008000 	.word	0x40008000
 80032fc:	48000400 	.word	0x48000400
 8003300:	200002d0 	.word	0x200002d0
 8003304:	4002001c 	.word	0x4002001c

08003308 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a19      	ldr	r2, [pc, #100]	@ (800338c <HAL_QSPI_MspInit+0x84>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d12b      	bne.n	8003382 <HAL_QSPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800332a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800332e:	f7ff fe98 	bl	8003062 <LL_AHB3_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	2002      	movs	r0, #2
 8003334:	f7ff fe7c 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003338:	2001      	movs	r0, #1
 800333a:	f7ff fe79 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    PB8     ------> QUADSPI_BK1_IO1
    PB9     ------> QUADSPI_BK1_IO0
    PA2     ------> QUADSPI_BK1_NCS
    PA3     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800333e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003342:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003350:	230a      	movs	r3, #10
 8003352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	4619      	mov	r1, r3
 800335a:	480d      	ldr	r0, [pc, #52]	@ (8003390 <HAL_QSPI_MspInit+0x88>)
 800335c:	f001 fe86 	bl	800506c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003360:	230c      	movs	r3, #12
 8003362:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003370:	230a      	movs	r3, #10
 8003372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003374:	f107 030c 	add.w	r3, r7, #12
 8003378:	4619      	mov	r1, r3
 800337a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800337e:	f001 fe75 	bl	800506c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003382:	bf00      	nop
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	a0001000 	.word	0xa0001000
 8003390:	48000400 	.word	0x48000400

08003394 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b096      	sub	sp, #88	@ 0x58
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800339c:	f107 0308 	add.w	r3, r7, #8
 80033a0:	2250      	movs	r2, #80	@ 0x50
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f00e f82d 	bl	8011404 <memset>
  if(hrtc->Instance==RTC)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a12      	ldr	r2, [pc, #72]	@ (80033f8 <HAL_RTC_MspInit+0x64>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d11d      	bne.n	80033f0 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033c0:	f107 0308 	add.w	r3, r7, #8
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 f8de 	bl	8007586 <HAL_RCCEx_PeriphCLKConfig>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80033d0:	f7ff fcf1 	bl	8002db6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033d4:	f7ff fe1b 	bl	800300e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80033d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80033dc:	f7ff fe5a 	bl	8003094 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	2003      	movs	r0, #3
 80033e6:	f001 fab0 	bl	800494a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80033ea:	2003      	movs	r0, #3
 80033ec:	f001 fac7 	bl	800497e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80033f0:	bf00      	nop
 80033f2:	3758      	adds	r7, #88	@ 0x58
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40002800 	.word	0x40002800

080033fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0f      	ldr	r2, [pc, #60]	@ (8003458 <HAL_SPI_MspInit+0x5c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d117      	bne.n	800344e <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800341e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003422:	f7ff fe69 	bl	80030f8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003426:	2001      	movs	r0, #1
 8003428:	f7ff fe02 	bl	8003030 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800342c:	23c2      	movs	r3, #194	@ 0xc2
 800342e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800343c:	2305      	movs	r3, #5
 800343e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	4619      	mov	r1, r3
 8003446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800344a:	f001 fe0f 	bl	800506c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800344e:	bf00      	nop
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40013000 	.word	0x40013000

0800345c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2b      	ldr	r2, [pc, #172]	@ (8003518 <HAL_SAI_MspInit+0xbc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d14f      	bne.n	800350e <HAL_SAI_MspInit+0xb2>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800346e:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_SAI_MspInit+0xc0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_SAI_MspInit+0x22>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003476:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800347a:	f7ff fe3d 	bl	80030f8 <LL_APB2_GRP1_EnableClock>
    }
    SAI1_client ++;
 800347e:	4b27      	ldr	r3, [pc, #156]	@ (800351c <HAL_SAI_MspInit+0xc0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	4a25      	ldr	r2, [pc, #148]	@ (800351c <HAL_SAI_MspInit+0xc0>)
 8003486:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PA8     ------> SAI1_CK2
    PA10     ------> SAI1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003488:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800348c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 800349a:	2303      	movs	r3, #3
 800349c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349e:	f107 030c 	add.w	r3, r7, #12
 80034a2:	4619      	mov	r1, r3
 80034a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034a8:	f001 fde0 	bl	800506c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Channel1;
 80034ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <HAL_SAI_MspInit+0xc8>)
 80034b0:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80034b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034b4:	2212      	movs	r2, #18
 80034b6:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b8:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80034be:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80034c4:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d0:	4b13      	ldr	r3, [pc, #76]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80034d6:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034d8:	2220      	movs	r2, #32
 80034da:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80034dc:	4b10      	ldr	r3, [pc, #64]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034de:	2200      	movs	r2, #0
 80034e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80034e2:	480f      	ldr	r0, [pc, #60]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034e4:	f001 fa90 	bl	8004a08 <HAL_DMA_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_SAI_MspInit+0x96>
    {
      Error_Handler();
 80034ee:	f7ff fc62 	bl	8002db6 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80034fa:	4a09      	ldr	r2, [pc, #36]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a07      	ldr	r2, [pc, #28]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 8003504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003508:	4a05      	ldr	r2, [pc, #20]	@ (8003520 <HAL_SAI_MspInit+0xc4>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 800350e:	bf00      	nop
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40015404 	.word	0x40015404
 800351c:	20000504 	.word	0x20000504
 8003520:	20000430 	.word	0x20000430
 8003524:	40020008 	.word	0x40020008

08003528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <NMI_Handler+0x4>

08003530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <HardFault_Handler+0x4>

08003538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <MemManage_Handler+0x4>

08003540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <BusFault_Handler+0x4>

08003548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <UsageFault_Handler+0x4>

08003550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800357e:	f000 f9c7 	bl	8003910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}

08003586 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800358a:	f7fe faf9 	bl	8001b80 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <DMA1_Channel1_IRQHandler+0x10>)
 800359a:	f001 fc16 	bl	8004dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000430 	.word	0x20000430

080035a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <DMA1_Channel2_IRQHandler+0x10>)
 80035ae:	f001 fc0c 	bl	8004dca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200002d0 	.word	0x200002d0

080035bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <LPUART1_IRQHandler+0x10>)
 80035c2:	f005 fea1 	bl	8009308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000023c 	.word	0x2000023c

080035d0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80035d4:	f00b fad4 	bl	800eb80 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}

080035dc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80035e0:	f00b fb04 	bl	800ebec <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80035ec:	f001 fec6 	bl	800537c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e00a      	b.n	800361c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003606:	f3af 8000 	nop.w
 800360a:	4601      	mov	r1, r0
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	60ba      	str	r2, [r7, #8]
 8003612:	b2ca      	uxtb	r2, r1
 8003614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	dbf0      	blt.n	8003606 <_read+0x12>
  }

  return len;
 8003624:	687b      	ldr	r3, [r7, #4]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_close>:
  }
  return len;
}

int _close(int file)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003656:	605a      	str	r2, [r3, #4]
  return 0;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_isatty>:

int _isatty(int file)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a0:	4a14      	ldr	r2, [pc, #80]	@ (80036f4 <_sbrk+0x5c>)
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <_sbrk+0x60>)
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ac:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <_sbrk+0x64>)
 80036b6:	4a12      	ldr	r2, [pc, #72]	@ (8003700 <_sbrk+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d207      	bcs.n	80036d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c8:	f00d feba 	bl	8011440 <__errno>
 80036cc:	4603      	mov	r3, r0
 80036ce:	220c      	movs	r2, #12
 80036d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036d6:	e009      	b.n	80036ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <_sbrk+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036de:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <_sbrk+0x64>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	4a05      	ldr	r2, [pc, #20]	@ (80036fc <_sbrk+0x64>)
 80036e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20030000 	.word	0x20030000
 80036f8:	00000400 	.word	0x00000400
 80036fc:	20000508 	.word	0x20000508
 8003700:	20001a30 	.word	0x20001a30

08003704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003708:	4b24      	ldr	r3, [pc, #144]	@ (800379c <SystemInit+0x98>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370e:	4a23      	ldr	r2, [pc, #140]	@ (800379c <SystemInit+0x98>)
 8003710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003730:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800373c:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <SystemInit+0x9c>)
 800373e:	4013      	ands	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800374e:	f023 0305 	bic.w	r3, r3, #5
 8003752:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800375a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800375e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800376a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800376e:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <SystemInit+0xa0>)
 8003770:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003776:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <SystemInit+0xa0>)
 8003778:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003788:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00
 80037a0:	faf6fefb 	.word	0xfaf6fefb
 80037a4:	22041000 	.word	0x22041000

080037a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80037a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ac:	3304      	adds	r3, #4

080037ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80037b2:	d3f9      	bcc.n	80037a8 <CopyDataInit>
  bx lr
 80037b4:	4770      	bx	lr

080037b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80037b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80037b8:	3004      	adds	r0, #4

080037ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80037ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80037bc:	d3fb      	bcc.n	80037b6 <FillZerobss>
  bx lr
 80037be:	4770      	bx	lr

080037c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037c0:	480c      	ldr	r0, [pc, #48]	@ (80037f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80037c4:	f7ff ff9e 	bl	8003704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80037c8:	480b      	ldr	r0, [pc, #44]	@ (80037f8 <LoopForever+0x6>)
 80037ca:	490c      	ldr	r1, [pc, #48]	@ (80037fc <LoopForever+0xa>)
 80037cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003800 <LoopForever+0xe>)
 80037ce:	2300      	movs	r3, #0
 80037d0:	f7ff ffed 	bl	80037ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80037d4:	480b      	ldr	r0, [pc, #44]	@ (8003804 <LoopForever+0x12>)
 80037d6:	490c      	ldr	r1, [pc, #48]	@ (8003808 <LoopForever+0x16>)
 80037d8:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <LoopForever+0x1a>)
 80037da:	2300      	movs	r3, #0
 80037dc:	f7ff ffe7 	bl	80037ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80037e0:	480b      	ldr	r0, [pc, #44]	@ (8003810 <LoopForever+0x1e>)
 80037e2:	490c      	ldr	r1, [pc, #48]	@ (8003814 <LoopForever+0x22>)
 80037e4:	2300      	movs	r3, #0
 80037e6:	f7ff ffe8 	bl	80037ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037ea:	f00d fe2f 	bl	801144c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037ee:	f7fe fd71 	bl	80022d4 <main>

080037f2 <LoopForever>:

LoopForever:
  b LoopForever
 80037f2:	e7fe      	b.n	80037f2 <LoopForever>
  ldr   r0, =_estack
 80037f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80037f8:	20000008 	.word	0x20000008
 80037fc:	20000090 	.word	0x20000090
 8003800:	08014c0c 	.word	0x08014c0c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003804:	200301e4 	.word	0x200301e4
 8003808:	20030a67 	.word	0x20030a67
 800380c:	08014cda 	.word	0x08014cda
  INIT_BSS _sbss, _ebss
 8003810:	200000dc 	.word	0x200000dc
 8003814:	20001a30 	.word	0x20001a30

08003818 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003818:	e7fe      	b.n	8003818 <ADC1_IRQHandler>
	...

0800381c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6053      	str	r3, [r2, #4]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e0042000 	.word	0xe0042000

0800383c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	6053      	str	r3, [r2, #4]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	e0042000 	.word	0xe0042000

0800385c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003866:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <HAL_Init+0x3c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <HAL_Init+0x3c>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003870:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003872:	2003      	movs	r0, #3
 8003874:	f001 f85e 	bl	8004934 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003878:	2000      	movs	r0, #0
 800387a:	f000 f80f 	bl	800389c <HAL_InitTick>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	71fb      	strb	r3, [r7, #7]
 8003888:	e001      	b.n	800388e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800388a:	f7ff fc4e 	bl	800312a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800388e:	79fb      	ldrb	r3, [r7, #7]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	58004000 	.word	0x58004000

0800389c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80038a8:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <HAL_InitTick+0x6c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d024      	beq.n	80038fa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038b0:	f003 f9ea 	bl	8006c88 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <HAL_InitTick+0x6c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 f874 	bl	80049b6 <HAL_SYSTICK_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10f      	bne.n	80038f4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	d809      	bhi.n	80038ee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038da:	2200      	movs	r2, #0
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038e2:	f001 f832 	bl	800494a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e6:	4a09      	ldr	r2, [pc, #36]	@ (800390c <HAL_InitTick+0x70>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e007      	b.n	80038fe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	e004      	b.n	80038fe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e001      	b.n	80038fe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000010 	.word	0x20000010
 800390c:	2000000c 	.word	0x2000000c

08003910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003914:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_IncTick+0x20>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_IncTick+0x24>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
 8003920:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <HAL_IncTick+0x24>)
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000010 	.word	0x20000010
 8003934:	2000050c 	.word	0x2000050c

08003938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return uwTick;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <HAL_GetTick+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	2000050c 	.word	0x2000050c

08003950 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HAL_GetTickPrio+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c

08003968 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <HAL_GetTickFreq+0x14>)
 800396e:	781b      	ldrb	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000010 	.word	0x20000010

08003980 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003984:	f7ff ff4a 	bl	800381c <LL_DBGMCU_EnableDBGSleepMode>
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003990:	f7ff ff54 	bl	800383c <LL_DBGMCU_EnableDBGStopMode>
}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}

08003998 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3360      	adds	r3, #96	@ 0x60
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <LL_ADC_SetOffset+0x44>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	03fff000 	.word	0x03fff000

08003a48 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3360      	adds	r3, #96	@ 0x60
 8003a56:	461a      	mov	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3360      	adds	r3, #96	@ 0x60
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3330      	adds	r3, #48	@ 0x30
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	4413      	add	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	211f      	movs	r1, #31
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	401a      	ands	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0e9b      	lsrs	r3, r3, #26
 8003ae2:	f003 011f 	and.w	r1, r3, #31
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	431a      	orrs	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3314      	adds	r3, #20
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	0e5b      	lsrs	r3, r3, #25
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	4413      	add	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	0d1b      	lsrs	r3, r3, #20
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2107      	movs	r1, #7
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	0d1b      	lsrs	r3, r3, #20
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	431a      	orrs	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b70:	43db      	mvns	r3, r3
 8003b72:	401a      	ands	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f003 0318 	and.w	r3, r3, #24
 8003b7a:	4908      	ldr	r1, [pc, #32]	@ (8003b9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b7c:	40d9      	lsrs	r1, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	400b      	ands	r3, r1
 8003b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	0007ffff 	.word	0x0007ffff

08003ba0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003bb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6093      	str	r3, [r2, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bd8:	d101      	bne.n	8003bde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c28:	d101      	bne.n	8003c2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <LL_ADC_IsEnabled+0x18>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <LL_ADC_IsEnabled+0x1a>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d101      	bne.n	8003c7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d101      	bne.n	8003ca0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e000      	b.n	8003ca2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e12e      	b.n	8003f2c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff fa35 	bl	800314c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff65 	bl	8003bc4 <LL_ADC_IsDeepPowerDownEnabled>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff4b 	bl	8003ba0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ff80 	bl	8003c14 <LL_ADC_IsInternalRegulatorEnabled>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff64 	bl	8003bec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d24:	4b83      	ldr	r3, [pc, #524]	@ (8003f34 <HAL_ADC_Init+0x284>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	4a83      	ldr	r2, [pc, #524]	@ (8003f38 <HAL_ADC_Init+0x288>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	099b      	lsrs	r3, r3, #6
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d38:	e002      	b.n	8003d40 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f9      	bne.n	8003d3a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ff62 	bl	8003c14 <LL_ADC_IsInternalRegulatorEnabled>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff73 	bl	8003c62 <LL_ADC_REG_IsConversionOngoing>
 8003d7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 80c7 	bne.w	8003f1a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 80c3 	bne.w	8003f1a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d9c:	f043 0202 	orr.w	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff47 	bl	8003c3c <LL_ADC_IsEnabled>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003db4:	4861      	ldr	r0, [pc, #388]	@ (8003f3c <HAL_ADC_Init+0x28c>)
 8003db6:	f7ff ff41 	bl	8003c3c <LL_ADC_IsEnabled>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	485e      	ldr	r0, [pc, #376]	@ (8003f40 <HAL_ADC_Init+0x290>)
 8003dc8:	f7ff fde6 	bl	8003998 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7e5b      	ldrb	r3, [r3, #25]
 8003dd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ddc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003de2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dea:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003dec:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d106      	bne.n	8003e0c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	3b01      	subs	r3, #1
 8003e04:	045b      	lsls	r3, r3, #17
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	4b45      	ldr	r3, [pc, #276]	@ (8003f44 <HAL_ADC_Init+0x294>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	69b9      	ldr	r1, [r7, #24]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff0e 	bl	8003c62 <LL_ADC_REG_IsConversionOngoing>
 8003e46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff1b 	bl	8003c88 <LL_ADC_INJ_IsConversionOngoing>
 8003e52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d13d      	bne.n	8003ed6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d13a      	bne.n	8003ed6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e7c:	f023 0302 	bic.w	r3, r3, #2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e9e:	f023 0304 	bic.w	r3, r3, #4
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003eb0:	4311      	orrs	r1, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	611a      	str	r2, [r3, #16]
 8003ec4:	e007      	b.n	8003ed6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10c      	bne.n	8003ef8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	f023 010f 	bic.w	r1, r3, #15
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	1e5a      	subs	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ef6:	e007      	b.n	8003f08 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 020f 	bic.w	r2, r2, #15
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	f023 0303 	bic.w	r3, r3, #3
 8003f10:	f043 0201 	orr.w	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f18:	e007      	b.n	8003f2a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000008 	.word	0x20000008
 8003f38:	053e2d63 	.word	0x053e2d63
 8003f3c:	50040000 	.word	0x50040000
 8003f40:	50040300 	.word	0x50040300
 8003f44:	fff0c007 	.word	0xfff0c007

08003f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0b6      	sub	sp, #216	@ 0xd8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x22>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e39f      	b.n	80046aa <HAL_ADC_ConfigChannel+0x762>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fe73 	bl	8003c62 <LL_ADC_REG_IsConversionOngoing>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8384 	bne.w	800468c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f7ff fd8a 	bl	8003aaa <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fe61 	bl	8003c62 <LL_ADC_REG_IsConversionOngoing>
 8003fa0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fe6d 	bl	8003c88 <LL_ADC_INJ_IsConversionOngoing>
 8003fae:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 81a6 	bne.w	8004308 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 81a1 	bne.w	8004308 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f7ff fd95 	bl	8003b02 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d00a      	beq.n	8004010 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6919      	ldr	r1, [r3, #16]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800400a:	f7ff fcf9 	bl	8003a00 <LL_ADC_SetOffset>
 800400e:	e17b      	b.n	8004308 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fd16 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <HAL_ADC_ConfigChannel+0xf4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fd0b 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004032:	4603      	mov	r3, r0
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	f003 021f 	and.w	r2, r3, #31
 800403a:	e01e      	b.n	800407a <HAL_ADC_ConfigChannel+0x132>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fd00 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004048:	4603      	mov	r3, r0
 800404a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 800405a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800405e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8004062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800406a:	2320      	movs	r3, #32
 800406c:	e004      	b.n	8004078 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800406e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	2b00      	cmp	r3, #0
 8004084:	d105      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x14a>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	0e9b      	lsrs	r3, r3, #26
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	e018      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x17c>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80040a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80040ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80040b6:	2320      	movs	r3, #32
 80040b8:	e004      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80040ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d106      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fccf 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fcb3 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x1ba>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fca8 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	0e9b      	lsrs	r3, r3, #26
 80040fc:	f003 021f 	and.w	r2, r3, #31
 8004100:	e01e      	b.n	8004140 <HAL_ADC_ConfigChannel+0x1f8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fc9d 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004120:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e004      	b.n	800413e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8004134:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x210>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0e9b      	lsrs	r3, r3, #26
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	e018      	b.n	800418a <HAL_ADC_ConfigChannel+0x242>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800416c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004174:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 800417c:	2320      	movs	r3, #32
 800417e:	e004      	b.n	800418a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8004180:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004184:	fab3 f383 	clz	r3, r3
 8004188:	b2db      	uxtb	r3, r3
 800418a:	429a      	cmp	r2, r3
 800418c:	d106      	bne.n	800419c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fc6c 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fc50 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x280>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2102      	movs	r1, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fc45 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	0e9b      	lsrs	r3, r3, #26
 80041c2:	f003 021f 	and.w	r2, r3, #31
 80041c6:	e01e      	b.n	8004206 <HAL_ADC_ConfigChannel+0x2be>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fc3a 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80041e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80041ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80041f6:	2320      	movs	r3, #32
 80041f8:	e004      	b.n	8004204 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80041fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <HAL_ADC_ConfigChannel+0x2d6>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	0e9b      	lsrs	r3, r3, #26
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	e016      	b.n	800424c <HAL_ADC_ConfigChannel+0x304>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004230:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800423e:	2320      	movs	r3, #32
 8004240:	e004      	b.n	800424c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8004242:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	429a      	cmp	r2, r3
 800424e:	d106      	bne.n	800425e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2200      	movs	r2, #0
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fc0b 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2103      	movs	r1, #3
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fbef 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800426a:	4603      	mov	r3, r0
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <HAL_ADC_ConfigChannel+0x342>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2103      	movs	r1, #3
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fbe4 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004280:	4603      	mov	r3, r0
 8004282:	0e9b      	lsrs	r3, r3, #26
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	e017      	b.n	80042ba <HAL_ADC_ConfigChannel+0x372>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2103      	movs	r1, #3
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fbd9 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004296:	4603      	mov	r3, r0
 8004298:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80042a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80042a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80042b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d105      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x38a>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	0e9b      	lsrs	r3, r3, #26
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	e011      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x3ae>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80042e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80042e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80042ea:	2320      	movs	r3, #32
 80042ec:	e003      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80042ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d106      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	2103      	movs	r1, #3
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fbb6 	bl	8003a74 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fc95 	bl	8003c3c <LL_ADC_IsEnabled>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 81c2 	bne.w	800469e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f7ff fc16 	bl	8003b58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a8e      	ldr	r2, [pc, #568]	@ (800456c <HAL_ADC_ConfigChannel+0x624>)
 8004332:	4293      	cmp	r3, r2
 8004334:	f040 8130 	bne.w	8004598 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x418>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	3301      	adds	r3, #1
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2b09      	cmp	r3, #9
 8004356:	bf94      	ite	ls
 8004358:	2301      	movls	r3, #1
 800435a:	2300      	movhi	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e019      	b.n	8004394 <HAL_ADC_ConfigChannel+0x44c>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800436e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004370:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004378:	2320      	movs	r3, #32
 800437a:	e003      	b.n	8004384 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800437c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	3301      	adds	r3, #1
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2b09      	cmp	r3, #9
 800438c:	bf94      	ite	ls
 800438e:	2301      	movls	r3, #1
 8004390:	2300      	movhi	r3, #0
 8004392:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004394:	2b00      	cmp	r3, #0
 8004396:	d079      	beq.n	800448c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x46c>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0e9b      	lsrs	r3, r3, #26
 80043aa:	3301      	adds	r3, #1
 80043ac:	069b      	lsls	r3, r3, #26
 80043ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043b2:	e015      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x498>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80043c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80043cc:	2320      	movs	r3, #32
 80043ce:	e003      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80043d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	069b      	lsls	r3, r3, #26
 80043dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d109      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x4b8>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0e9b      	lsrs	r3, r3, #26
 80043f2:	3301      	adds	r3, #1
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2101      	movs	r1, #1
 80043fa:	fa01 f303 	lsl.w	r3, r1, r3
 80043fe:	e017      	b.n	8004430 <HAL_ADC_ConfigChannel+0x4e8>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800440e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004410:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8004418:	2320      	movs	r3, #32
 800441a:	e003      	b.n	8004424 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800441c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	3301      	adds	r3, #1
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2101      	movs	r1, #1
 800442c:	fa01 f303 	lsl.w	r3, r1, r3
 8004430:	ea42 0103 	orr.w	r1, r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x50e>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0e9b      	lsrs	r3, r3, #26
 8004446:	3301      	adds	r3, #1
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	051b      	lsls	r3, r3, #20
 8004454:	e018      	b.n	8004488 <HAL_ADC_ConfigChannel+0x540>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800446e:	2320      	movs	r3, #32
 8004470:	e003      	b.n	800447a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3301      	adds	r3, #1
 800447c:	f003 021f 	and.w	r2, r3, #31
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004488:	430b      	orrs	r3, r1
 800448a:	e080      	b.n	800458e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004494:	2b00      	cmp	r3, #0
 8004496:	d107      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x560>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0e9b      	lsrs	r3, r3, #26
 800449e:	3301      	adds	r3, #1
 80044a0:	069b      	lsls	r3, r3, #26
 80044a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044a6:	e015      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x58c>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80044b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80044c0:	2320      	movs	r3, #32
 80044c2:	e003      	b.n	80044cc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	069b      	lsls	r3, r3, #26
 80044d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x5ac>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	0e9b      	lsrs	r3, r3, #26
 80044e6:	3301      	adds	r3, #1
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2101      	movs	r1, #1
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	e017      	b.n	8004524 <HAL_ADC_ConfigChannel+0x5dc>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	61fb      	str	r3, [r7, #28]
  return result;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800450c:	2320      	movs	r3, #32
 800450e:	e003      	b.n	8004518 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	fab3 f383 	clz	r3, r3
 8004516:	b2db      	uxtb	r3, r3
 8004518:	3301      	adds	r3, #1
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	ea42 0103 	orr.w	r1, r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x608>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	3301      	adds	r3, #1
 800453c:	f003 021f 	and.w	r2, r3, #31
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	3b1e      	subs	r3, #30
 8004548:	051b      	lsls	r3, r3, #20
 800454a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800454e:	e01d      	b.n	800458c <HAL_ADC_ConfigChannel+0x644>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	613b      	str	r3, [r7, #16]
  return result;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e005      	b.n	8004578 <HAL_ADC_ConfigChannel+0x630>
 800456c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	fab3 f383 	clz	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	3301      	adds	r3, #1
 800457a:	f003 021f 	and.w	r2, r3, #31
 800457e:	4613      	mov	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4413      	add	r3, r2
 8004584:	3b1e      	subs	r3, #30
 8004586:	051b      	lsls	r3, r3, #20
 8004588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800458c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004592:	4619      	mov	r1, r3
 8004594:	f7ff fab5 	bl	8003b02 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b45      	ldr	r3, [pc, #276]	@ (80046b4 <HAL_ADC_ConfigChannel+0x76c>)
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d07c      	beq.n	800469e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045a4:	4844      	ldr	r0, [pc, #272]	@ (80046b8 <HAL_ADC_ConfigChannel+0x770>)
 80045a6:	f7ff fa1d 	bl	80039e4 <LL_ADC_GetCommonPathInternalCh>
 80045aa:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045ae:	4843      	ldr	r0, [pc, #268]	@ (80046bc <HAL_ADC_ConfigChannel+0x774>)
 80045b0:	f7ff fb44 	bl	8003c3c <LL_ADC_IsEnabled>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d15e      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a40      	ldr	r2, [pc, #256]	@ (80046c0 <HAL_ADC_ConfigChannel+0x778>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d127      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x6cc>
 80045c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d121      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a39      	ldr	r2, [pc, #228]	@ (80046bc <HAL_ADC_ConfigChannel+0x774>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d161      	bne.n	800469e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045e2:	4619      	mov	r1, r3
 80045e4:	4834      	ldr	r0, [pc, #208]	@ (80046b8 <HAL_ADC_ConfigChannel+0x770>)
 80045e6:	f7ff f9ea 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ea:	4b36      	ldr	r3, [pc, #216]	@ (80046c4 <HAL_ADC_ConfigChannel+0x77c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <HAL_ADC_ConfigChannel+0x780>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004604:	e002      	b.n	800460c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b01      	subs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f9      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004612:	e044      	b.n	800469e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2c      	ldr	r2, [pc, #176]	@ (80046cc <HAL_ADC_ConfigChannel+0x784>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d113      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x6fe>
 800461e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10d      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a23      	ldr	r2, [pc, #140]	@ (80046bc <HAL_ADC_ConfigChannel+0x774>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d134      	bne.n	800469e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004638:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800463c:	4619      	mov	r1, r3
 800463e:	481e      	ldr	r0, [pc, #120]	@ (80046b8 <HAL_ADC_ConfigChannel+0x770>)
 8004640:	f7ff f9bd 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004644:	e02b      	b.n	800469e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a21      	ldr	r2, [pc, #132]	@ (80046d0 <HAL_ADC_ConfigChannel+0x788>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d126      	bne.n	800469e <HAL_ADC_ConfigChannel+0x756>
 8004650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004654:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d120      	bne.n	800469e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <HAL_ADC_ConfigChannel+0x774>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d11b      	bne.n	800469e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800466a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800466e:	4619      	mov	r1, r3
 8004670:	4811      	ldr	r0, [pc, #68]	@ (80046b8 <HAL_ADC_ConfigChannel+0x770>)
 8004672:	f7ff f9a4 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
 8004676:	e012      	b.n	800469e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800468a:	e008      	b.n	800469e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80046a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	37d8      	adds	r7, #216	@ 0xd8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	80080000 	.word	0x80080000
 80046b8:	50040300 	.word	0x50040300
 80046bc:	50040000 	.word	0x50040000
 80046c0:	c7520000 	.word	0xc7520000
 80046c4:	20000008 	.word	0x20000008
 80046c8:	053e2d63 	.word	0x053e2d63
 80046cc:	cb840000 	.word	0xcb840000
 80046d0:	80000001 	.word	0x80000001

080046d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004706:	4a04      	ldr	r2, [pc, #16]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	60d3      	str	r3, [r2, #12]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__NVIC_GetPriorityGrouping+0x18>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	f003 0307 	and.w	r3, r3, #7
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004746:	2b00      	cmp	r3, #0
 8004748:	db0b      	blt.n	8004762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	4907      	ldr	r1, [pc, #28]	@ (8004770 <__NVIC_EnableIRQ+0x38>)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2001      	movs	r0, #1
 800475a:	fa00 f202 	lsl.w	r2, r0, r2
 800475e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e100 	.word	0xe000e100

08004774 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db12      	blt.n	80047ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	490a      	ldr	r1, [pc, #40]	@ (80047b8 <__NVIC_DisableIRQ+0x44>)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2001      	movs	r0, #1
 8004796:	fa00 f202 	lsl.w	r2, r0, r2
 800479a:	3320      	adds	r3, #32
 800479c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80047a0:	f3bf 8f4f 	dsb	sy
}
 80047a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047a6:	f3bf 8f6f 	isb	sy
}
 80047aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000e100 	.word	0xe000e100

080047bc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	db0c      	blt.n	80047e8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	f003 021f 	and.w	r2, r3, #31
 80047d4:	4907      	ldr	r1, [pc, #28]	@ (80047f4 <__NVIC_SetPendingIRQ+0x38>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	2001      	movs	r0, #1
 80047de:	fa00 f202 	lsl.w	r2, r0, r2
 80047e2:	3340      	adds	r3, #64	@ 0x40
 80047e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	4603      	mov	r3, r0
 8004800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	2b00      	cmp	r3, #0
 8004808:	db0c      	blt.n	8004824 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	f003 021f 	and.w	r2, r3, #31
 8004810:	4907      	ldr	r1, [pc, #28]	@ (8004830 <__NVIC_ClearPendingIRQ+0x38>)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	2001      	movs	r0, #1
 800481a:	fa00 f202 	lsl.w	r2, r0, r2
 800481e:	3360      	adds	r3, #96	@ 0x60
 8004820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	e000e100 	.word	0xe000e100

08004834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db0a      	blt.n	800485e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	490c      	ldr	r1, [pc, #48]	@ (8004880 <__NVIC_SetPriority+0x4c>)
 800484e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	440b      	add	r3, r1
 8004858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800485c:	e00a      	b.n	8004874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4908      	ldr	r1, [pc, #32]	@ (8004884 <__NVIC_SetPriority+0x50>)
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	3b04      	subs	r3, #4
 800486c:	0112      	lsls	r2, r2, #4
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	440b      	add	r3, r1
 8004872:	761a      	strb	r2, [r3, #24]
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000e100 	.word	0xe000e100
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	@ 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f1c3 0307 	rsb	r3, r3, #7
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	bf28      	it	cs
 80048a6:	2304      	movcs	r3, #4
 80048a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2b06      	cmp	r3, #6
 80048b0:	d902      	bls.n	80048b8 <NVIC_EncodePriority+0x30>
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	3b03      	subs	r3, #3
 80048b6:	e000      	b.n	80048ba <NVIC_EncodePriority+0x32>
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43da      	mvns	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	401a      	ands	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	43d9      	mvns	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e0:	4313      	orrs	r3, r2
         );
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3724      	adds	r7, #36	@ 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004900:	d301      	bcc.n	8004906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004902:	2301      	movs	r3, #1
 8004904:	e00f      	b.n	8004926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004906:	4a0a      	ldr	r2, [pc, #40]	@ (8004930 <SysTick_Config+0x40>)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3b01      	subs	r3, #1
 800490c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800490e:	210f      	movs	r1, #15
 8004910:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004914:	f7ff ff8e 	bl	8004834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <SysTick_Config+0x40>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800491e:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <SysTick_Config+0x40>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010

08004934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fec9 	bl	80046d4 <__NVIC_SetPriorityGrouping>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	4603      	mov	r3, r0
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004958:	f7ff fee0 	bl	800471c <__NVIC_GetPriorityGrouping>
 800495c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	6978      	ldr	r0, [r7, #20]
 8004964:	f7ff ff90 	bl	8004888 <NVIC_EncodePriority>
 8004968:	4602      	mov	r2, r0
 800496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff5f 	bl	8004834 <__NVIC_SetPriority>
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	4603      	mov	r3, r0
 8004986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fed3 	bl	8004738 <__NVIC_EnableIRQ>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fee3 	bl	8004774 <__NVIC_DisableIRQ>
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ff96 	bl	80048f0 <SysTick_Config>
 80049c4:	4603      	mov	r3, r0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	4603      	mov	r3, r0
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80049d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff feed 	bl	80047bc <__NVIC_SetPendingIRQ>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	4603      	mov	r3, r0
 80049f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fefd 	bl	80047f8 <__NVIC_ClearPendingIRQ>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e08e      	b.n	8004b38 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4b47      	ldr	r3, [pc, #284]	@ (8004b40 <HAL_DMA_Init+0x138>)
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d80f      	bhi.n	8004a46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	4b45      	ldr	r3, [pc, #276]	@ (8004b44 <HAL_DMA_Init+0x13c>)
 8004a2e:	4413      	add	r3, r2
 8004a30:	4a45      	ldr	r2, [pc, #276]	@ (8004b48 <HAL_DMA_Init+0x140>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	091b      	lsrs	r3, r3, #4
 8004a38:	009a      	lsls	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a42      	ldr	r2, [pc, #264]	@ (8004b4c <HAL_DMA_Init+0x144>)
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a44:	e00e      	b.n	8004a64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4b40      	ldr	r3, [pc, #256]	@ (8004b50 <HAL_DMA_Init+0x148>)
 8004a4e:	4413      	add	r3, r2
 8004a50:	4a3d      	ldr	r2, [pc, #244]	@ (8004b48 <HAL_DMA_Init+0x140>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	009a      	lsls	r2, r3, #2
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a3c      	ldr	r2, [pc, #240]	@ (8004b54 <HAL_DMA_Init+0x14c>)
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa74 	bl	8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ac4:	d102      	bne.n	8004acc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ae2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d010      	beq.n	8004b0e <HAL_DMA_Init+0x106>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d80c      	bhi.n	8004b0e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa93 	bl	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b0a:	605a      	str	r2, [r3, #4]
 8004b0c:	e008      	b.n	8004b20 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40020407 	.word	0x40020407
 8004b44:	bffdfff8 	.word	0xbffdfff8
 8004b48:	cccccccd 	.word	0xcccccccd
 8004b4c:	40020000 	.word	0x40020000
 8004b50:	bffdfbf8 	.word	0xbffdfbf8
 8004b54:	40020400 	.word	0x40020400

08004b58 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_DMA_Start_IT+0x20>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e066      	b.n	8004c46 <HAL_DMA_Start_IT+0xee>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d155      	bne.n	8004c38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f9b9 	bl	8004f28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 020e 	orr.w	r2, r2, #14
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e00f      	b.n	8004bf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0204 	bic.w	r2, r2, #4
 8004bde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 020a 	orr.w	r2, r2, #10
 8004bee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e005      	b.n	8004c44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
 8004c42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e04f      	b.n	8004d00 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d008      	beq.n	8004c7e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e040      	b.n	8004d00 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 020e 	bic.w	r2, r2, #14
 8004c8c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	f003 021c 	and.w	r2, r3, #28
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	2101      	movs	r1, #1
 8004cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00c      	beq.n	8004cee <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d005      	beq.n	8004d30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2204      	movs	r2, #4
 8004d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
 8004d2e:	e047      	b.n	8004dc0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 020e 	bic.w	r2, r2, #14
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d64:	f003 021c 	and.w	r2, r3, #28
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
    }
  }
  return status;
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f003 031c 	and.w	r3, r3, #28
 8004dea:	2204      	movs	r2, #4
 8004dec:	409a      	lsls	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d026      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x7a>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d021      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0204 	bic.w	r2, r2, #4
 8004e1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f003 021c 	and.w	r2, r3, #28
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d071      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e42:	e06c      	b.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e48:	f003 031c 	and.w	r3, r3, #28
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02e      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xec>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d029      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 020a 	bic.w	r2, r2, #10
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8c:	f003 021c 	and.w	r2, r3, #28
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	2102      	movs	r1, #2
 8004e96:	fa01 f202 	lsl.w	r2, r1, r2
 8004e9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d038      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004eb4:	e033      	b.n	8004f1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f003 031c 	and.w	r3, r3, #28
 8004ebe:	2208      	movs	r2, #8
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d02a      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x156>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d025      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 020e 	bic.w	r2, r2, #14
 8004ee2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee8:	f003 021c 	and.w	r2, r3, #28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
}
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f56:	f003 021c 	and.w	r2, r3, #28
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f202 	lsl.w	r2, r1, r2
 8004f64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d108      	bne.n	8004f88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f86:	e007      	b.n	8004f98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b17      	ldr	r3, [pc, #92]	@ (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d80a      	bhi.n	8004fce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fc4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6493      	str	r3, [r2, #72]	@ 0x48
 8004fcc:	e007      	b.n	8004fde <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	089b      	lsrs	r3, r3, #2
 8004fd4:	009a      	lsls	r2, r3, #2
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004fd8:	4413      	add	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	3b08      	subs	r3, #8
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ff4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	409a      	lsls	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40020407 	.word	0x40020407
 8005014:	4002081c 	.word	0x4002081c
 8005018:	cccccccd 	.word	0xcccccccd
 800501c:	40020880 	.word	0x40020880

08005020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005030:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	461a      	mov	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a09      	ldr	r2, [pc, #36]	@ (8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005044:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b01      	subs	r3, #1
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2201      	movs	r2, #1
 8005050:	409a      	lsls	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	1000823f 	.word	0x1000823f
 8005068:	40020940 	.word	0x40020940

0800506c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800507a:	e14c      	b.n	8005316 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	4013      	ands	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 813e 	beq.w	8005310 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b01      	cmp	r3, #1
 800509e:	d005      	beq.n	80050ac <HAL_GPIO_Init+0x40>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d130      	bne.n	800510e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	2203      	movs	r2, #3
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050e2:	2201      	movs	r2, #1
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4013      	ands	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 0201 	and.w	r2, r3, #1
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b03      	cmp	r3, #3
 8005118:	d017      	beq.n	800514a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	2203      	movs	r2, #3
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d123      	bne.n	800519e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	08da      	lsrs	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3208      	adds	r2, #8
 800515e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	6939      	ldr	r1, [r7, #16]
 800519a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	2203      	movs	r2, #3
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4013      	ands	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0203 	and.w	r2, r3, #3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8098 	beq.w	8005310 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80051e0:	4a54      	ldr	r2, [pc, #336]	@ (8005334 <HAL_GPIO_Init+0x2c8>)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	3302      	adds	r3, #2
 80051e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	220f      	movs	r2, #15
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800520a:	d019      	beq.n	8005240 <HAL_GPIO_Init+0x1d4>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a4a      	ldr	r2, [pc, #296]	@ (8005338 <HAL_GPIO_Init+0x2cc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <HAL_GPIO_Init+0x1d0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a49      	ldr	r2, [pc, #292]	@ (800533c <HAL_GPIO_Init+0x2d0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00d      	beq.n	8005238 <HAL_GPIO_Init+0x1cc>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a48      	ldr	r2, [pc, #288]	@ (8005340 <HAL_GPIO_Init+0x2d4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <HAL_GPIO_Init+0x1c8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a47      	ldr	r2, [pc, #284]	@ (8005344 <HAL_GPIO_Init+0x2d8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d101      	bne.n	8005230 <HAL_GPIO_Init+0x1c4>
 800522c:	2304      	movs	r3, #4
 800522e:	e008      	b.n	8005242 <HAL_GPIO_Init+0x1d6>
 8005230:	2307      	movs	r3, #7
 8005232:	e006      	b.n	8005242 <HAL_GPIO_Init+0x1d6>
 8005234:	2303      	movs	r3, #3
 8005236:	e004      	b.n	8005242 <HAL_GPIO_Init+0x1d6>
 8005238:	2302      	movs	r3, #2
 800523a:	e002      	b.n	8005242 <HAL_GPIO_Init+0x1d6>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_GPIO_Init+0x1d6>
 8005240:	2300      	movs	r3, #0
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	f002 0203 	and.w	r2, r2, #3
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	4093      	lsls	r3, r2
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005252:	4938      	ldr	r1, [pc, #224]	@ (8005334 <HAL_GPIO_Init+0x2c8>)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	3302      	adds	r3, #2
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005260:	4b39      	ldr	r3, [pc, #228]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43db      	mvns	r3, r3
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4013      	ands	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005284:	4a30      	ldr	r2, [pc, #192]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800528a:	4b2f      	ldr	r3, [pc, #188]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	43db      	mvns	r3, r3
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052ae:	4a26      	ldr	r2, [pc, #152]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052b4:	4b24      	ldr	r3, [pc, #144]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052da:	4a1b      	ldr	r2, [pc, #108]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80052e2:	4b19      	ldr	r3, [pc, #100]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 80052e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4013      	ands	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005308:	4a0f      	ldr	r2, [pc, #60]	@ (8005348 <HAL_GPIO_Init+0x2dc>)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3301      	adds	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	f47f aeab 	bne.w	800507c <HAL_GPIO_Init+0x10>
  }
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	40010000 	.word	0x40010000
 8005338:	48000400 	.word	0x48000400
 800533c:	48000800 	.word	0x48000800
 8005340:	48000c00 	.word	0x48000c00
 8005344:	48001000 	.word	0x48001000
 8005348:	58000800 	.word	0x58000800

0800534c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
 8005358:	4613      	mov	r3, r2
 800535a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800535c:	787b      	ldrb	r3, [r7, #1]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005368:	e002      	b.n	8005370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <HAL_HSEM_IRQHandler+0x30>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005388:	4b08      	ldr	r3, [pc, #32]	@ (80053ac <HAL_HSEM_IRQHandler+0x30>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	43db      	mvns	r3, r3
 8005390:	4906      	ldr	r1, [pc, #24]	@ (80053ac <HAL_HSEM_IRQHandler+0x30>)
 8005392:	4013      	ands	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005396:	4a05      	ldr	r2, [pc, #20]	@ (80053ac <HAL_HSEM_IRQHandler+0x30>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f807 	bl	80053b0 <HAL_HSEM_FreeCallback>
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	58001500 	.word	0x58001500

080053b0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01e      	beq.n	8005414 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80053d6:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <HAL_IPCC_Init+0x60>)
 80053d8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fd fedc 	bl	80031a4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80053ec:	68b8      	ldr	r0, [r7, #8]
 80053ee:	f000 f85b 	bl	80054a8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f82c 	bl	800545c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005412:	e001      	b.n	8005418 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	58000c00 	.word	0x58000c00

08005428 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005442:	b480      	push	{r7}
 8005444:	b085      	sub	sp, #20
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	4613      	mov	r3, r2
 800544e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e00f      	b.n	800548a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	4a0b      	ldr	r2, [pc, #44]	@ (80054a0 <IPCC_SetDefaultCallbacks+0x44>)
 8005474:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3306      	adds	r3, #6
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	4a08      	ldr	r2, [pc, #32]	@ (80054a4 <IPCC_SetDefaultCallbacks+0x48>)
 8005482:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b05      	cmp	r3, #5
 800548e:	d9ec      	bls.n	800546a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	08005429 	.word	0x08005429
 80054a4:	08005443 	.word	0x08005443

080054a8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80054bc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	223f      	movs	r2, #63	@ 0x3f
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054d4:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054de:	6013      	str	r3, [r2, #0]
}
 80054e0:	bf00      	nop
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	58000400 	.word	0x58000400

080054f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <HAL_PWREx_GetVoltageRange+0x18>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	58000400 	.word	0x58000400

0800550c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af02      	add	r7, sp, #8
 8005512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005514:	f7fe fa10 	bl	8003938 <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e063      	b.n	80055ec <HAL_QSPI_Init+0xe0>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fd fee5 	bl	8003308 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800553e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f948 	bl	80057d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	3b01      	subs	r3, #1
 8005558:	021a      	lsls	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	2120      	movs	r1, #32
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f940 	bl	80057f4 <QSPI_WaitFlagStateUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005578:	7afb      	ldrb	r3, [r7, #11]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d131      	bne.n	80055e2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005588:	f023 0310 	bic.w	r3, r3, #16
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6852      	ldr	r2, [r2, #4]
 8005590:	0611      	lsls	r1, r2, #24
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68d2      	ldr	r2, [r2, #12]
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	430b      	orrs	r3, r1
 800559e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	4b13      	ldr	r3, [pc, #76]	@ (80055f4 <HAL_QSPI_Init+0xe8>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6912      	ldr	r2, [r2, #16]
 80055ae:	0411      	lsls	r1, r2, #16
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6952      	ldr	r2, [r2, #20]
 80055b4:	4311      	orrs	r1, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6992      	ldr	r2, [r2, #24]
 80055ba:	4311      	orrs	r1, r2
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80055ea:	7afb      	ldrb	r3, [r7, #11]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	ffe0f8fe 	.word	0xffe0f8fe

080055f8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005604:	f7fe f998 	bl	8003938 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_QSPI_Command+0x22>
 8005616:	2302      	movs	r3, #2
 8005618:	e048      	b.n	80056ac <HAL_QSPI_Command+0xb4>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d137      	bne.n	800569e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2200      	movs	r2, #0
 8005644:	2120      	movs	r1, #32
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f8d4 	bl	80057f4 <QSPI_WaitFlagStateUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d125      	bne.n	80056a2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005656:	2200      	movs	r2, #0
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f901 	bl	8005862 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d115      	bne.n	8005694 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2201      	movs	r2, #1
 8005670:	2102      	movs	r1, #2
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f8be 	bl	80057f4 <QSPI_WaitFlagStateUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10f      	bne.n	80056a2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2202      	movs	r2, #2
 8005688:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8005692:	e006      	b.n	80056a2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800569c:	e001      	b.n	80056a2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800569e:	2302      	movs	r3, #2
 80056a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	@ 0x28
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80056c4:	f7fe f938 	bl	8003938 <HAL_GetTick>
 80056c8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3320      	adds	r3, #32
 80056d0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_QSPI_Transmit+0x2e>
 80056de:	2302      	movs	r3, #2
 80056e0:	e076      	b.n	80057d0 <HAL_QSPI_Transmit+0x11c>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d165      	bne.n	80057c2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d056      	beq.n	80057b0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2212      	movs	r2, #18
 8005706:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005736:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005738:	e01b      	b.n	8005772 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2201      	movs	r2, #1
 8005742:	2104      	movs	r1, #4
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f855 	bl	80057f4 <QSPI_WaitFlagStateUntilTimeout>
 800574a:	4603      	mov	r3, r0
 800574c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800574e:	7ffb      	ldrb	r3, [r7, #31]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d113      	bne.n	800577c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	1e5a      	subs	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1df      	bne.n	800573a <HAL_QSPI_Transmit+0x86>
 800577a:	e000      	b.n	800577e <HAL_QSPI_Transmit+0xca>
          break;
 800577c:	bf00      	nop
      }

      if (status == HAL_OK)
 800577e:	7ffb      	ldrb	r3, [r7, #31]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d110      	bne.n	80057a6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2201      	movs	r2, #1
 800578c:	2102      	movs	r1, #2
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f830 	bl	80057f4 <QSPI_WaitFlagStateUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005798:	7ffb      	ldrb	r3, [r7, #31]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2202      	movs	r2, #2
 80057a4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80057ae:	e00a      	b.n	80057c6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b4:	f043 0208 	orr.w	r2, r3, #8
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e001      	b.n	80057c6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
 80057c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80057ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3720      	adds	r7, #32
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005804:	e01a      	b.n	800583c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800580c:	d016      	beq.n	800583c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580e:	f7fe f893 	bl	8003938 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2204      	movs	r2, #4
 8005828:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	f043 0201 	orr.w	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e00e      	b.n	800585a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	429a      	cmp	r2, r3
 8005856:	d1d6      	bne.n	8005806 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <QSPI_Config+0x28>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800587c:	d005      	beq.n	800588a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3a01      	subs	r2, #1
 8005888:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80b5 	beq.w	80059fe <QSPI_Config+0x19c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05d      	beq.n	8005958 <QSPI_Config+0xf6>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d02e      	beq.n	800590c <QSPI_Config+0xaa>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	431a      	orrs	r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	049b      	lsls	r3, r3, #18
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	431a      	orrs	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	ea42 0103 	orr.w	r1, r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80058fc:	f000 8129 	beq.w	8005b52 <QSPI_Config+0x2f0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	6852      	ldr	r2, [r2, #4]
 8005908:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800590a:	e122      	b.n	8005b52 <QSPI_Config+0x2f0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	431a      	orrs	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	431a      	orrs	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	049b      	lsls	r3, r3, #18
 8005922:	431a      	orrs	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	431a      	orrs	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	431a      	orrs	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	431a      	orrs	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	431a      	orrs	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	ea42 0103 	orr.w	r1, r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	430a      	orrs	r2, r1
 800594c:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	619a      	str	r2, [r3, #24]
}
 8005956:	e0fc      	b.n	8005b52 <QSPI_Config+0x2f0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d02b      	beq.n	80059b8 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005968:	431a      	orrs	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	431a      	orrs	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	049b      	lsls	r3, r3, #18
 8005976:	431a      	orrs	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	431a      	orrs	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	431a      	orrs	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	431a      	orrs	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	431a      	orrs	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	ea42 0103 	orr.w	r1, r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	430a      	orrs	r2, r1
 80059a0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80059a8:	f000 80d3 	beq.w	8005b52 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	6852      	ldr	r2, [r2, #4]
 80059b4:	619a      	str	r2, [r3, #24]
}
 80059b6:	e0cc      	b.n	8005b52 <QSPI_Config+0x2f0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	049b      	lsls	r3, r3, #18
 80059ce:	431a      	orrs	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	431a      	orrs	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	ea42 0103 	orr.w	r1, r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2200      	movs	r2, #0
 80059fa:	619a      	str	r2, [r3, #24]
}
 80059fc:	e0a9      	b.n	8005b52 <QSPI_Config+0x2f0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d056      	beq.n	8005ab4 <QSPI_Config+0x252>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	6892      	ldr	r2, [r2, #8]
 8005a0e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02a      	beq.n	8005a6e <QSPI_Config+0x20c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	049b      	lsls	r3, r3, #18
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	ea42 0103 	orr.w	r1, r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a60:	d077      	beq.n	8005b52 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	6852      	ldr	r2, [r2, #4]
 8005a6a:	619a      	str	r2, [r3, #24]
}
 8005a6c:	e071      	b.n	8005b52 <QSPI_Config+0x2f0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	431a      	orrs	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	049b      	lsls	r3, r3, #18
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	ea42 0103 	orr.w	r1, r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	619a      	str	r2, [r3, #24]
}
 8005ab2:	e04e      	b.n	8005b52 <QSPI_Config+0x2f0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d027      	beq.n	8005b0c <QSPI_Config+0x2aa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	049b      	lsls	r3, r3, #18
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	ea42 0103 	orr.w	r1, r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005afe:	d028      	beq.n	8005b52 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	6852      	ldr	r2, [r2, #4]
 8005b08:	619a      	str	r2, [r3, #24]
}
 8005b0a:	e022      	b.n	8005b52 <QSPI_Config+0x2f0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01e      	beq.n	8005b52 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->SIOOMode |
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	431a      	orrs	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	049b      	lsls	r3, r3, #18
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	ea42 0103 	orr.w	r1, r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	619a      	str	r2, [r3, #24]
}
 8005b52:	bf00      	nop
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b70:	d101      	bne.n	8005b76 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <LL_RCC_HSE_Enable>:
{
 8005b82:	b480      	push	{r7}
 8005b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b94:	6013      	str	r3, [r2, #0]
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_RCC_HSE_Disable>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_HSE_IsReady>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bd0:	d101      	bne.n	8005bd6 <LL_RCC_HSE_IsReady+0x18>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <LL_RCC_HSE_IsReady+0x1a>
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <LL_RCC_HSI_Enable>:
{
 8005be2:	b480      	push	{r7}
 8005be4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf4:	6013      	str	r3, [r2, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <LL_RCC_HSI_Disable>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c12:	6013      	str	r3, [r2, #0]
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <LL_RCC_HSI_IsReady>:
{
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c30:	d101      	bne.n	8005c36 <LL_RCC_HSI_IsReady+0x18>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <LL_RCC_HSI_IsReady+0x1a>
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <LL_RCC_HSI48_Enable>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <LL_RCC_HSI48_Disable>:
{
 8005c8e:	b480      	push	{r7}
 8005c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005ca6:	bf00      	nop
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_HSI48_IsReady>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d101      	bne.n	8005cc8 <LL_RCC_HSI48_IsReady+0x18>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <LL_RCC_HSI48_IsReady+0x1a>
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <LL_RCC_LSE_Enable>:
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005cec:	bf00      	nop
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <LL_RCC_LSE_Disable>:
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d0e:	bf00      	nop
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <LL_RCC_LSE_EnableBypass>:
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d28:	f043 0304 	orr.w	r3, r3, #4
 8005d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <LL_RCC_LSE_DisableBypass>:
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d4a:	f023 0304 	bic.w	r3, r3, #4
 8005d4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005d52:	bf00      	nop
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <LL_RCC_LSE_IsReady>:
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d101      	bne.n	8005d74 <LL_RCC_LSE_IsReady+0x18>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <LL_RCC_LSE_IsReady+0x1a>
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <LL_RCC_LSI1_Enable>:
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005d98:	bf00      	nop
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <LL_RCC_LSI1_Disable>:
{
 8005da2:	b480      	push	{r7}
 8005da4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005dba:	bf00      	nop
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <LL_RCC_LSI1_IsReady>:
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d101      	bne.n	8005ddc <LL_RCC_LSI1_IsReady+0x18>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <LL_RCC_LSI1_IsReady+0x1a>
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_RCC_LSI2_Enable>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005df8:	f043 0304 	orr.w	r3, r3, #4
 8005dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <LL_RCC_LSI2_Disable>:
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e1a:	f023 0304 	bic.w	r3, r3, #4
 8005e1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005e22:	bf00      	nop
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <LL_RCC_LSI2_IsReady>:
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e38:	f003 0308 	and.w	r3, r3, #8
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d101      	bne.n	8005e44 <LL_RCC_LSI2_IsReady+0x18>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <LL_RCC_LSI2_IsReady+0x1a>
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <LL_RCC_LSI2_SetTrimming>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e60:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <LL_RCC_MSI_Enable>:
{
 8005e7e:	b480      	push	{r7}
 8005e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	6013      	str	r3, [r2, #0]
}
 8005e92:	bf00      	nop
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <LL_RCC_MSI_Disable>:
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	6013      	str	r3, [r2, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <LL_RCC_MSI_IsReady>:
{
 8005eba:	b480      	push	{r7}
 8005ebc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d101      	bne.n	8005ed0 <LL_RCC_MSI_IsReady+0x16>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <LL_RCC_MSI_IsReady+0x18>
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <LL_RCC_MSI_SetRange>:
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	600b      	str	r3, [r1, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_RCC_MSI_GetRange>:
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f14:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2bb0      	cmp	r3, #176	@ 0xb0
 8005f1a:	d901      	bls.n	8005f20 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005f1c:	23b0      	movs	r3, #176	@ 0xb0
 8005f1e:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005f20:	687b      	ldr	r3, [r7, #4]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <LL_RCC_MSI_SetCalibTrimming>:
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <LL_RCC_SetSysClkSource>:
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f023 0203 	bic.w	r2, r3, #3
 8005f6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	608b      	str	r3, [r1, #8]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <LL_RCC_GetSysClkSource>:
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_RCC_SetAHBPrescaler>:
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005faa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	608b      	str	r3, [r1, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005fc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_RCC_SetAHB4Prescaler>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ffc:	f023 020f 	bic.w	r2, r3, #15
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <LL_RCC_SetAPB1Prescaler>:
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800602c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <LL_RCC_SetAPB2Prescaler>:
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800604a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006054:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4313      	orrs	r3, r2
 800605c:	608b      	str	r3, [r1, #8]
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <LL_RCC_GetAHBPrescaler>:
{
 800606a:	b480      	push	{r7}
 800606c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800606e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006078:	4618      	mov	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <LL_RCC_GetAHB4Prescaler>:
{
 8006082:	b480      	push	{r7}
 8006084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800608e:	011b      	lsls	r3, r3, #4
 8006090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006094:	4618      	mov	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_RCC_GetAPB1Prescaler>:
{
 800609e:	b480      	push	{r7}
 80060a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <LL_RCC_GetAPB2Prescaler>:
{
 80060b6:	b480      	push	{r7}
 80060b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80060ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80060ce:	b480      	push	{r7}
 80060d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80060d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060e0:	6013      	str	r3, [r2, #0]
}
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80060f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060fe:	6013      	str	r3, [r2, #0]
}
 8006100:	bf00      	nop
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800610a:	b480      	push	{r7}
 800610c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800610e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800611c:	d101      	bne.n	8006122 <LL_RCC_PLL_IsReady+0x18>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <LL_RCC_PLL_IsReady+0x1a>
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800612e:	b480      	push	{r7}
 8006130:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800613e:	4618      	mov	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006156:	4618      	mov	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800616e:	4618      	mov	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800617c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0303 	and.w	r3, r3, #3
}
 8006186:	4618      	mov	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800619e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a2:	d101      	bne.n	80061a8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80061c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061c8:	d101      	bne.n	80061ce <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80061e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ee:	d101      	bne.n	80061f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006212:	d101      	bne.n	8006218 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006236:	d101      	bne.n	800623c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006248:	b590      	push	{r4, r7, lr}
 800624a:	b08d      	sub	sp, #52	@ 0x34
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e363      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 808d 	beq.w	8006382 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006268:	f7ff fe8a 	bl	8005f80 <LL_RCC_GetSysClkSource>
 800626c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800626e:	f7ff ff83 	bl	8006178 <LL_RCC_PLL_GetMainSource>
 8006272:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCC_OscConfig+0x3e>
 800627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d147      	bne.n	8006310 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	2b01      	cmp	r3, #1
 8006284:	d144      	bne.n	8006310 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e347      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006296:	f7ff fe35 	bl	8005f04 <LL_RCC_MSI_GetRange>
 800629a:	4603      	mov	r3, r0
 800629c:	429c      	cmp	r4, r3
 800629e:	d914      	bls.n	80062ca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fd2f 	bl	8006d08 <RCC_SetFlashLatencyFromMSIRange>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e336      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fe0f 	bl	8005edc <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fe33 	bl	8005f2e <LL_RCC_MSI_SetCalibTrimming>
 80062c8:	e013      	b.n	80062f2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fe04 	bl	8005edc <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fe28 	bl	8005f2e <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fd10 	bl	8006d08 <RCC_SetFlashLatencyFromMSIRange>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e317      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062f2:	f000 fcc9 	bl	8006c88 <HAL_RCC_GetHCLKFreq>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4aa4      	ldr	r2, [pc, #656]	@ (800658c <HAL_RCC_OscConfig+0x344>)
 80062fa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80062fc:	4ba4      	ldr	r3, [pc, #656]	@ (8006590 <HAL_RCC_OscConfig+0x348>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f7fd facb 	bl	800389c <HAL_InitTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d039      	beq.n	8006380 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e308      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01e      	beq.n	8006356 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006318:	f7ff fdb1 	bl	8005e7e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800631c:	f7fd fb0c 	bl	8003938 <HAL_GetTick>
 8006320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006324:	f7fd fb08 	bl	8003938 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e2f5      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006336:	f7ff fdc0 	bl	8005eba <LL_RCC_MSI_IsReady>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0f1      	beq.n	8006324 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fdc9 	bl	8005edc <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fded 	bl	8005f2e <LL_RCC_MSI_SetCalibTrimming>
 8006354:	e015      	b.n	8006382 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006356:	f7ff fda1 	bl	8005e9c <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800635a:	f7fd faed 	bl	8003938 <HAL_GetTick>
 800635e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006362:	f7fd fae9 	bl	8003938 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e2d6      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006374:	f7ff fda1 	bl	8005eba <LL_RCC_MSI_IsReady>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f1      	bne.n	8006362 <HAL_RCC_OscConfig+0x11a>
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006380:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d047      	beq.n	800641e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800638e:	f7ff fdf7 	bl	8005f80 <LL_RCC_GetSysClkSource>
 8006392:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006394:	f7ff fef0 	bl	8006178 <LL_RCC_PLL_GetMainSource>
 8006398:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d005      	beq.n	80063ac <HAL_RCC_OscConfig+0x164>
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d108      	bne.n	80063b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d105      	bne.n	80063b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d134      	bne.n	800641e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e2b4      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063c0:	d102      	bne.n	80063c8 <HAL_RCC_OscConfig+0x180>
 80063c2:	f7ff fbde 	bl	8005b82 <LL_RCC_HSE_Enable>
 80063c6:	e001      	b.n	80063cc <HAL_RCC_OscConfig+0x184>
 80063c8:	f7ff fbea 	bl	8005ba0 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d012      	beq.n	80063fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fd fab0 	bl	8003938 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fd faac 	bl	8003938 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	@ 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e299      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80063ee:	f7ff fbe6 	bl	8005bbe <LL_RCC_HSE_IsReady>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f1      	beq.n	80063dc <HAL_RCC_OscConfig+0x194>
 80063f8:	e011      	b.n	800641e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fa:	f7fd fa9d 	bl	8003938 <HAL_GetTick>
 80063fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006402:	f7fd fa99 	bl	8003938 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b64      	cmp	r3, #100	@ 0x64
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e286      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006414:	f7ff fbd3 	bl	8005bbe <LL_RCC_HSE_IsReady>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f1      	bne.n	8006402 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d04c      	beq.n	80064c4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642a:	f7ff fda9 	bl	8005f80 <LL_RCC_GetSysClkSource>
 800642e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006430:	f7ff fea2 	bl	8006178 <LL_RCC_PLL_GetMainSource>
 8006434:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b04      	cmp	r3, #4
 800643a:	d005      	beq.n	8006448 <HAL_RCC_OscConfig+0x200>
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d10e      	bne.n	8006460 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d10b      	bne.n	8006460 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e266      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fbf2 	bl	8005c42 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800645e:	e031      	b.n	80064c4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d019      	beq.n	800649c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006468:	f7ff fbbb 	bl	8005be2 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fd fa64 	bl	8003938 <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006474:	f7fd fa60 	bl	8003938 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e24d      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006486:	f7ff fbca 	bl	8005c1e <LL_RCC_HSI_IsReady>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f1      	beq.n	8006474 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff fbd4 	bl	8005c42 <LL_RCC_HSI_SetCalibTrimming>
 800649a:	e013      	b.n	80064c4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800649c:	f7ff fbb0 	bl	8005c00 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fd fa4a 	bl	8003938 <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a8:	f7fd fa46 	bl	8003938 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e233      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80064ba:	f7ff fbb0 	bl	8005c1e <LL_RCC_HSI_IsReady>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1f1      	bne.n	80064a8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80a3 	beq.w	8006624 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d076      	beq.n	80065d4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d046      	beq.n	8006580 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80064f2:	f7ff fc67 	bl	8005dc4 <LL_RCC_LSI1_IsReady>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d113      	bne.n	8006524 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80064fc:	f7ff fc40 	bl	8005d80 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006500:	f7fd fa1a 	bl	8003938 <HAL_GetTick>
 8006504:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006508:	f7fd fa16 	bl	8003938 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e203      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800651a:	f7ff fc53 	bl	8005dc4 <LL_RCC_LSI1_IsReady>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f1      	beq.n	8006508 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006524:	f7ff fc60 	bl	8005de8 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fd fa06 	bl	8003938 <HAL_GetTick>
 800652c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006530:	f7fd fa02 	bl	8003938 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e1ef      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006542:	f7ff fc73 	bl	8005e2c <LL_RCC_LSI2_IsReady>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f1      	beq.n	8006530 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fc7d 	bl	8005e50 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006556:	f7ff fc24 	bl	8005da2 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655a:	f7fd f9ed 	bl	8003938 <HAL_GetTick>
 800655e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006562:	f7fd f9e9 	bl	8003938 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e1d6      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006574:	f7ff fc26 	bl	8005dc4 <LL_RCC_LSI1_IsReady>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f1      	bne.n	8006562 <HAL_RCC_OscConfig+0x31a>
 800657e:	e051      	b.n	8006624 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006580:	f7ff fbfe 	bl	8005d80 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fd f9d8 	bl	8003938 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800658a:	e00c      	b.n	80065a6 <HAL_RCC_OscConfig+0x35e>
 800658c:	20000008 	.word	0x20000008
 8006590:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006594:	f7fd f9d0 	bl	8003938 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e1bd      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80065a6:	f7ff fc0d 	bl	8005dc4 <LL_RCC_LSI1_IsReady>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f1      	beq.n	8006594 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80065b0:	f7ff fc2b 	bl	8005e0a <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065b6:	f7fd f9bf 	bl	8003938 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e1ac      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80065c8:	f7ff fc30 	bl	8005e2c <LL_RCC_LSI2_IsReady>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f1      	bne.n	80065b6 <HAL_RCC_OscConfig+0x36e>
 80065d2:	e027      	b.n	8006624 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80065d4:	f7ff fc19 	bl	8005e0a <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d8:	f7fd f9ae 	bl	8003938 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80065e0:	f7fd f9aa 	bl	8003938 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e197      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80065f2:	f7ff fc1b 	bl	8005e2c <LL_RCC_LSI2_IsReady>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f1      	bne.n	80065e0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80065fc:	f7ff fbd1 	bl	8005da2 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006600:	f7fd f99a 	bl	8003938 <HAL_GetTick>
 8006604:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006608:	f7fd f996 	bl	8003938 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e183      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800661a:	f7ff fbd3 	bl	8005dc4 <LL_RCC_LSI1_IsReady>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f1      	bne.n	8006608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d05b      	beq.n	80066e8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006630:	4ba7      	ldr	r3, [pc, #668]	@ (80068d0 <HAL_RCC_OscConfig+0x688>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d114      	bne.n	8006666 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800663c:	f7fe ff48 	bl	80054d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006640:	f7fd f97a 	bl	8003938 <HAL_GetTick>
 8006644:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006648:	f7fd f976 	bl	8003938 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e163      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800665a:	4b9d      	ldr	r3, [pc, #628]	@ (80068d0 <HAL_RCC_OscConfig+0x688>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0f0      	beq.n	8006648 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d102      	bne.n	8006674 <HAL_RCC_OscConfig+0x42c>
 800666e:	f7ff fb31 	bl	8005cd4 <LL_RCC_LSE_Enable>
 8006672:	e00c      	b.n	800668e <HAL_RCC_OscConfig+0x446>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b05      	cmp	r3, #5
 800667a:	d104      	bne.n	8006686 <HAL_RCC_OscConfig+0x43e>
 800667c:	f7ff fb4c 	bl	8005d18 <LL_RCC_LSE_EnableBypass>
 8006680:	f7ff fb28 	bl	8005cd4 <LL_RCC_LSE_Enable>
 8006684:	e003      	b.n	800668e <HAL_RCC_OscConfig+0x446>
 8006686:	f7ff fb36 	bl	8005cf6 <LL_RCC_LSE_Disable>
 800668a:	f7ff fb56 	bl	8005d3a <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d014      	beq.n	80066c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006696:	f7fd f94f 	bl	8003938 <HAL_GetTick>
 800669a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800669c:	e00a      	b.n	80066b4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fd f94b 	bl	8003938 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e136      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80066b4:	f7ff fb52 	bl	8005d5c <LL_RCC_LSE_IsReady>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ef      	beq.n	800669e <HAL_RCC_OscConfig+0x456>
 80066be:	e013      	b.n	80066e8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c0:	f7fd f93a 	bl	8003938 <HAL_GetTick>
 80066c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80066c6:	e00a      	b.n	80066de <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c8:	f7fd f936 	bl	8003938 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e121      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80066de:	f7ff fb3d 	bl	8005d5c <LL_RCC_LSE_IsReady>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1ef      	bne.n	80066c8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d02c      	beq.n	800674e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d014      	beq.n	8006726 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066fc:	f7ff fab6 	bl	8005c6c <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fd f91a 	bl	8003938 <HAL_GetTick>
 8006704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006708:	f7fd f916 	bl	8003938 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e103      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800671a:	f7ff fac9 	bl	8005cb0 <LL_RCC_HSI48_IsReady>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d0f1      	beq.n	8006708 <HAL_RCC_OscConfig+0x4c0>
 8006724:	e013      	b.n	800674e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006726:	f7ff fab2 	bl	8005c8e <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672a:	f7fd f905 	bl	8003938 <HAL_GetTick>
 800672e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006732:	f7fd f901 	bl	8003938 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e0ee      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006744:	f7ff fab4 	bl	8005cb0 <LL_RCC_HSI48_IsReady>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 80e4 	beq.w	8006920 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006758:	f7ff fc12 	bl	8005f80 <LL_RCC_GetSysClkSource>
 800675c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800675e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676a:	2b02      	cmp	r3, #2
 800676c:	f040 80b4 	bne.w	80068d8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f003 0203 	and.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	429a      	cmp	r2, r3
 800677c:	d123      	bne.n	80067c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d11c      	bne.n	80067c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	0a1b      	lsrs	r3, r3, #8
 8006790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006798:	429a      	cmp	r2, r3
 800679a:	d114      	bne.n	80067c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d10d      	bne.n	80067c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d106      	bne.n	80067c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d05d      	beq.n	8006882 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	2b0c      	cmp	r3, #12
 80067ca:	d058      	beq.n	800687e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80067cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e0a1      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80067de:	f7ff fc85 	bl	80060ec <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067e2:	f7fd f8a9 	bl	8003938 <HAL_GetTick>
 80067e6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ea:	f7fd f8a5 	bl	8003938 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e092      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1ef      	bne.n	80067ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800680a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	4b30      	ldr	r3, [pc, #192]	@ (80068d4 <HAL_RCC_OscConfig+0x68c>)
 8006812:	4013      	ands	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800681c:	4311      	orrs	r1, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006822:	0212      	lsls	r2, r2, #8
 8006824:	4311      	orrs	r1, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800682a:	4311      	orrs	r1, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006830:	4311      	orrs	r1, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006836:	430a      	orrs	r2, r1
 8006838:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800683c:	4313      	orrs	r3, r2
 800683e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006840:	f7ff fc45 	bl	80060ce <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006852:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006854:	f7fd f870 	bl	8003938 <HAL_GetTick>
 8006858:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800685c:	f7fd f86c 	bl	8003938 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e059      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800686e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0ef      	beq.n	800685c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800687c:	e050      	b.n	8006920 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e04f      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d147      	bne.n	8006920 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006890:	f7ff fc1d 	bl	80060ce <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068a4:	f7fd f848 	bl	8003938 <HAL_GetTick>
 80068a8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ac:	f7fd f844 	bl	8003938 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e031      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0ef      	beq.n	80068ac <HAL_RCC_OscConfig+0x664>
 80068cc:	e028      	b.n	8006920 <HAL_RCC_OscConfig+0x6d8>
 80068ce:	bf00      	nop
 80068d0:	58000400 	.word	0x58000400
 80068d4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b0c      	cmp	r3, #12
 80068dc:	d01e      	beq.n	800691c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068de:	f7ff fc05 	bl	80060ec <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e2:	f7fd f829 	bl	8003938 <HAL_GetTick>
 80068e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ea:	f7fd f825 	bl	8003938 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e012      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1ef      	bne.n	80068ea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800690a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006914:	4b05      	ldr	r3, [pc, #20]	@ (800692c <HAL_RCC_OscConfig+0x6e4>)
 8006916:	4013      	ands	r3, r2
 8006918:	60cb      	str	r3, [r1, #12]
 800691a:	e001      	b.n	8006920 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3734      	adds	r7, #52	@ 0x34
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}
 800692a:	bf00      	nop
 800692c:	eefefffc 	.word	0xeefefffc

08006930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e12d      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006944:	4b98      	ldr	r3, [pc, #608]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d91b      	bls.n	800698a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006952:	4b95      	ldr	r3, [pc, #596]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 0207 	bic.w	r2, r3, #7
 800695a:	4993      	ldr	r1, [pc, #588]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	4313      	orrs	r3, r2
 8006960:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006962:	f7fc ffe9 	bl	8003938 <HAL_GetTick>
 8006966:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006968:	e008      	b.n	800697c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800696a:	f7fc ffe5 	bl	8003938 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e111      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697c:	4b8a      	ldr	r3, [pc, #552]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d1ef      	bne.n	800696a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d016      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fafc 	bl	8005f98 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069a0:	f7fc ffca 	bl	8003938 <HAL_GetTick>
 80069a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069a8:	f7fc ffc6 	bl	8003938 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e0f2      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80069ba:	f7ff fbe9 	bl	8006190 <LL_RCC_IsActiveFlag_HPRE>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0f1      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d016      	beq.n	80069fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff faf3 	bl	8005fc0 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069da:	f7fc ffad 	bl	8003938 <HAL_GetTick>
 80069de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069e2:	f7fc ffa9 	bl	8003938 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e0d5      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80069f4:	f7ff fbde 	bl	80061b4 <LL_RCC_IsActiveFlag_C2HPRE>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f1      	beq.n	80069e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff faec 	bl	8005fec <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a14:	f7fc ff90 	bl	8003938 <HAL_GetTick>
 8006a18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a1c:	f7fc ff8c 	bl	8003938 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e0b8      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a2e:	f7ff fbd4 	bl	80061da <LL_RCC_IsActiveFlag_SHDHPRE>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0f1      	beq.n	8006a1c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d016      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fae6 	bl	800601a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a4e:	f7fc ff73 	bl	8003938 <HAL_GetTick>
 8006a52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a56:	f7fc ff6f 	bl	8003938 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e09b      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006a68:	f7ff fbca 	bl	8006200 <LL_RCC_IsActiveFlag_PPRE1>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f1      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d017      	beq.n	8006aae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fadc 	bl	8006042 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a8a:	f7fc ff55 	bl	8003938 <HAL_GetTick>
 8006a8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a92:	f7fc ff51 	bl	8003938 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e07d      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006aa4:	f7ff fbbe 	bl	8006224 <LL_RCC_IsActiveFlag_PPRE2>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0f1      	beq.n	8006a92 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d043      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d106      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006ac2:	f7ff f87c 	bl	8005bbe <LL_RCC_HSE_IsReady>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d11e      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e067      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d106      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006ad8:	f7ff fb17 	bl	800610a <LL_RCC_PLL_IsReady>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d113      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e05c      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006aee:	f7ff f9e4 	bl	8005eba <LL_RCC_MSI_IsReady>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d108      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e051      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006afc:	f7ff f88f 	bl	8005c1e <LL_RCC_HSI_IsReady>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e04a      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff fa22 	bl	8005f58 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b14:	f7fc ff10 	bl	8003938 <HAL_GetTick>
 8006b18:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1a:	e00a      	b.n	8006b32 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b1c:	f7fc ff0c 	bl	8003938 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e036      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b32:	f7ff fa25 	bl	8005f80 <LL_RCC_GetSysClkSource>
 8006b36:	4602      	mov	r2, r0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d1ec      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b42:	4b19      	ldr	r3, [pc, #100]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d21b      	bcs.n	8006b88 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b50:	4b15      	ldr	r3, [pc, #84]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f023 0207 	bic.w	r2, r3, #7
 8006b58:	4913      	ldr	r1, [pc, #76]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b60:	f7fc feea 	bl	8003938 <HAL_GetTick>
 8006b64:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b68:	f7fc fee6 	bl	8003938 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e012      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <HAL_RCC_ClockConfig+0x278>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d1ef      	bne.n	8006b68 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006b88:	f000 f87e 	bl	8006c88 <HAL_RCC_GetHCLKFreq>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4a07      	ldr	r2, [pc, #28]	@ (8006bac <HAL_RCC_ClockConfig+0x27c>)
 8006b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006b92:	f7fc fedd 	bl	8003950 <HAL_GetTickPrio>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fc fe7f 	bl	800389c <HAL_InitTick>
 8006b9e:	4603      	mov	r3, r0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	58004000 	.word	0x58004000
 8006bac:	20000008 	.word	0x20000008

08006bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bb6:	f7ff f9e3 	bl	8005f80 <LL_RCC_GetSysClkSource>
 8006bba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006bc2:	f7ff f99f 	bl	8005f04 <LL_RCC_MSI_GetRange>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	4a2b      	ldr	r2, [pc, #172]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e04b      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d102      	bne.n	8006be4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006bde:	4b28      	ldr	r3, [pc, #160]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e045      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b08      	cmp	r3, #8
 8006be8:	d10a      	bne.n	8006c00 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006bea:	f7fe ffb8 	bl	8005b5e <LL_RCC_HSE_IsEnabledDiv2>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d102      	bne.n	8006bfa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006bf4:	4b22      	ldr	r3, [pc, #136]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e03a      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006bfa:	4b22      	ldr	r3, [pc, #136]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e037      	b.n	8006c70 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006c00:	f7ff faba 	bl	8006178 <LL_RCC_PLL_GetMainSource>
 8006c04:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d003      	beq.n	8006c14 <HAL_RCC_GetSysClockFreq+0x64>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d003      	beq.n	8006c1a <HAL_RCC_GetSysClockFreq+0x6a>
 8006c12:	e00d      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006c14:	4b1a      	ldr	r3, [pc, #104]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c16:	60bb      	str	r3, [r7, #8]
        break;
 8006c18:	e015      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c1a:	f7fe ffa0 	bl	8005b5e <LL_RCC_HSE_IsEnabledDiv2>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d102      	bne.n	8006c2a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006c24:	4b16      	ldr	r3, [pc, #88]	@ (8006c80 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c26:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006c28:	e00d      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006c2a:	4b16      	ldr	r3, [pc, #88]	@ (8006c84 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c2c:	60bb      	str	r3, [r7, #8]
        break;
 8006c2e:	e00a      	b.n	8006c46 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c30:	f7ff f968 	bl	8005f04 <LL_RCC_MSI_GetRange>
 8006c34:	4603      	mov	r3, r0
 8006c36:	091b      	lsrs	r3, r3, #4
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	4a0f      	ldr	r2, [pc, #60]	@ (8006c7c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c42:	60bb      	str	r3, [r7, #8]
        break;
 8006c44:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006c46:	f7ff fa72 	bl	800612e <LL_RCC_PLL_GetN>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	fb03 f402 	mul.w	r4, r3, r2
 8006c52:	f7ff fa85 	bl	8006160 <LL_RCC_PLL_GetDivider>
 8006c56:	4603      	mov	r3, r0
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	fbb4 f4f3 	udiv	r4, r4, r3
 8006c60:	f7ff fa72 	bl	8006148 <LL_RCC_PLL_GetR>
 8006c64:	4603      	mov	r3, r0
 8006c66:	0f5b      	lsrs	r3, r3, #29
 8006c68:	3301      	adds	r3, #1
 8006c6a:	fbb4 f3f3 	udiv	r3, r4, r3
 8006c6e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd90      	pop	{r4, r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	08014198 	.word	0x08014198
 8006c80:	00f42400 	.word	0x00f42400
 8006c84:	01e84800 	.word	0x01e84800

08006c88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c88:	b598      	push	{r3, r4, r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006c8c:	f7ff ff90 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8006c90:	4604      	mov	r4, r0
 8006c92:	f7ff f9ea 	bl	800606a <LL_RCC_GetAHBPrescaler>
 8006c96:	4603      	mov	r3, r0
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	4a03      	ldr	r2, [pc, #12]	@ (8006cac <HAL_RCC_GetHCLKFreq+0x24>)
 8006ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd98      	pop	{r3, r4, r7, pc}
 8006cac:	08014138 	.word	0x08014138

08006cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cb0:	b598      	push	{r3, r4, r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006cb4:	f7ff ffe8 	bl	8006c88 <HAL_RCC_GetHCLKFreq>
 8006cb8:	4604      	mov	r4, r0
 8006cba:	f7ff f9f0 	bl	800609e <LL_RCC_GetAPB1Prescaler>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	4a04      	ldr	r2, [pc, #16]	@ (8006cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ccc:	f003 031f 	and.w	r3, r3, #31
 8006cd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	bd98      	pop	{r3, r4, r7, pc}
 8006cd8:	08014178 	.word	0x08014178

08006cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cdc:	b598      	push	{r3, r4, r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006ce0:	f7ff ffd2 	bl	8006c88 <HAL_RCC_GetHCLKFreq>
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	f7ff f9e6 	bl	80060b6 <LL_RCC_GetAPB2Prescaler>
 8006cea:	4603      	mov	r3, r0
 8006cec:	0adb      	lsrs	r3, r3, #11
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	4a04      	ldr	r2, [pc, #16]	@ (8006d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	bd98      	pop	{r3, r4, r7, pc}
 8006d04:	08014178 	.word	0x08014178

08006d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d08:	b590      	push	{r4, r7, lr}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2bb0      	cmp	r3, #176	@ 0xb0
 8006d14:	d903      	bls.n	8006d1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006d16:	4b15      	ldr	r3, [pc, #84]	@ (8006d6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	e007      	b.n	8006d2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	091b      	lsrs	r3, r3, #4
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	4a11      	ldr	r2, [pc, #68]	@ (8006d6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006d2e:	f7ff f9a8 	bl	8006082 <LL_RCC_GetAHB4Prescaler>
 8006d32:	4603      	mov	r3, r0
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8006d70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	0c9c      	lsrs	r4, r3, #18
 8006d52:	f7fe fbcd 	bl	80054f0 <HAL_PWREx_GetVoltageRange>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 f80c 	bl	8006d78 <RCC_SetFlashLatency>
 8006d60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd90      	pop	{r4, r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	08014198 	.word	0x08014198
 8006d70:	08014138 	.word	0x08014138
 8006d74:	431bde83 	.word	0x431bde83

08006d78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b093      	sub	sp, #76	@ 0x4c
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006d82:	4b37      	ldr	r3, [pc, #220]	@ (8006e60 <RCC_SetFlashLatency+0xe8>)
 8006d84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006d8e:	4a35      	ldr	r2, [pc, #212]	@ (8006e64 <RCC_SetFlashLatency+0xec>)
 8006d90:	f107 031c 	add.w	r3, r7, #28
 8006d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006d9a:	4b33      	ldr	r3, [pc, #204]	@ (8006e68 <RCC_SetFlashLatency+0xf0>)
 8006d9c:	f107 040c 	add.w	r4, r7, #12
 8006da0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006da6:	2300      	movs	r3, #0
 8006da8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db0:	d11a      	bne.n	8006de8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006db6:	e013      	b.n	8006de0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	3348      	adds	r3, #72	@ 0x48
 8006dbe:	443b      	add	r3, r7
 8006dc0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d807      	bhi.n	8006dda <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	3348      	adds	r3, #72	@ 0x48
 8006dd0:	443b      	add	r3, r7
 8006dd2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006dd6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006dd8:	e020      	b.n	8006e1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ddc:	3301      	adds	r3, #1
 8006dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8006de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d9e8      	bls.n	8006db8 <RCC_SetFlashLatency+0x40>
 8006de6:	e019      	b.n	8006e1c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006de8:	2300      	movs	r3, #0
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dec:	e013      	b.n	8006e16 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	3348      	adds	r3, #72	@ 0x48
 8006df4:	443b      	add	r3, r7
 8006df6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d807      	bhi.n	8006e10 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3348      	adds	r3, #72	@ 0x48
 8006e06:	443b      	add	r3, r7
 8006e08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e0c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006e0e:	e005      	b.n	8006e1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e12:	3301      	adds	r3, #1
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d9e8      	bls.n	8006dee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006e1c:	4b13      	ldr	r3, [pc, #76]	@ (8006e6c <RCC_SetFlashLatency+0xf4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f023 0207 	bic.w	r2, r3, #7
 8006e24:	4911      	ldr	r1, [pc, #68]	@ (8006e6c <RCC_SetFlashLatency+0xf4>)
 8006e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e2c:	f7fc fd84 	bl	8003938 <HAL_GetTick>
 8006e30:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e32:	e008      	b.n	8006e46 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e34:	f7fc fd80 	bl	8003938 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e007      	b.n	8006e56 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e46:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <RCC_SetFlashLatency+0xf4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d1ef      	bne.n	8006e34 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	374c      	adds	r7, #76	@ 0x4c
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd90      	pop	{r4, r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	08012d34 	.word	0x08012d34
 8006e64:	08012d44 	.word	0x08012d44
 8006e68:	08012d50 	.word	0x08012d50
 8006e6c:	58004000 	.word	0x58004000

08006e70 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e82:	d101      	bne.n	8006e88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <LL_RCC_HSE_IsReady>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea6:	d101      	bne.n	8006eac <LL_RCC_HSE_IsReady+0x18>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <LL_RCC_HSE_IsReady+0x1a>
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <LL_RCC_HSI_IsReady>:
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eca:	d101      	bne.n	8006ed0 <LL_RCC_HSI_IsReady+0x18>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <LL_RCC_HSI_IsReady+0x1a>
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <LL_RCC_HSI48_IsReady>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d101      	bne.n	8006ef4 <LL_RCC_HSI48_IsReady+0x18>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <LL_RCC_HSI48_IsReady+0x1a>
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <LL_RCC_LSE_IsEnabled>:
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <LL_RCC_LSE_IsEnabled+0x18>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <LL_RCC_LSE_IsEnabled+0x1a>
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_RCC_LSE_IsReady>:
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d101      	bne.n	8006f3c <LL_RCC_LSE_IsReady+0x18>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <LL_RCC_LSE_IsReady+0x1a>
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <LL_RCC_LSI1_IsReady>:
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d101      	bne.n	8006f60 <LL_RCC_LSI1_IsReady+0x18>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <LL_RCC_LSI1_IsReady+0x1a>
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_RCC_LSI2_IsReady>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d101      	bne.n	8006f84 <LL_RCC_LSI2_IsReady+0x18>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <LL_RCC_LSI2_IsReady+0x1a>
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <LL_RCC_MSI_IsReady>:
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d101      	bne.n	8006fa6 <LL_RCC_MSI_IsReady+0x16>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <LL_RCC_MSI_IsReady+0x18>
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <LL_RCC_MSI_GetRange>:
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fc2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2bb0      	cmp	r3, #176	@ 0xb0
 8006fc8:	d901      	bls.n	8006fce <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006fca:	23b0      	movs	r3, #176	@ 0xb0
 8006fcc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006fce:	687b      	ldr	r3, [r7, #4]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <LL_RCC_SetRFWKPClockSource>:
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <LL_RCC_GetRFWKPClockSource>:
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RFWKPSEL));
 800700c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007014:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8007018:	4618      	mov	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <LL_RCC_GetAHBPrescaler>:
{
 8007022:	b480      	push	{r7}
 8007024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007030:	4618      	mov	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <LL_RCC_GetAPB1Prescaler>:
{
 800703a:	b480      	push	{r7}
 800703c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800703e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8007048:	4618      	mov	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <LL_RCC_GetAPB2Prescaler>:
{
 8007052:	b480      	push	{r7}
 8007054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8007060:	4618      	mov	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <LL_RCC_SetSMPSClockSource>:
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007078:	f023 0203 	bic.w	r2, r3, #3
 800707c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4313      	orrs	r3, r2
 8007084:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <LL_RCC_GetSMPSClockSource>:
{
 8007092:	b480      	push	{r7}
 8007094:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSSWS));
 8007096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <LL_RCC_SetSMPSPrescaler>:
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80070b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <LL_RCC_GetSMPSPrescaler>:
{
 80070d2:	b480      	push	{r7}
 80070d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV));
 80070d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <LL_RCC_SetUSARTClockSource>:
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80070f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070fa:	f023 0203 	bic.w	r2, r3, #3
 80070fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <LL_RCC_SetLPUARTClockSource>:
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800711e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007126:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800712a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <LL_RCC_SetI2CClockSource>:
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800714a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800714e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800715a:	43db      	mvns	r3, r3
 800715c:	401a      	ands	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <LL_RCC_SetLPTIMClockSource>:
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007188:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	43db      	mvns	r3, r3
 8007194:	401a      	ands	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800719e:	4313      	orrs	r3, r2
 80071a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <LL_RCC_SetSAIClockSource>:
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80071b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <LL_RCC_SetRNGClockSource>:
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80071e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ec:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80071f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LL_RCC_SetCLK48ClockSource>:
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007218:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800721c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <LL_RCC_SetUSBClockSource>:
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ffe3 	bl	8007208 <LL_RCC_SetCLK48ClockSource>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <LL_RCC_SetADCClockSource>:
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800725e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <LL_RCC_GetUSARTClockSource>:
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800727e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007282:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4013      	ands	r3, r2
}
 800728a:	4618      	mov	r0, r3
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <LL_RCC_GetLPUARTClockSource>:
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800729e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4013      	ands	r3, r2
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <LL_RCC_GetI2CClockSource>:
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, I2Cx) >> 4) | (I2Cx << 4));
 80072be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4013      	ands	r3, r2
 80072ca:	091a      	lsrs	r2, r3, #4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	4313      	orrs	r3, r2
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <LL_RCC_GetLPTIMClockSource>:
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80072e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4013      	ands	r3, r2
 80072f2:	0c1a      	lsrs	r2, r3, #16
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4313      	orrs	r3, r2
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <LL_RCC_GetSAIClockSource>:
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, SAIx));
 800730c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007310:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4013      	ands	r3, r2
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <LL_RCC_GetRNGClockSource>:
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, RNGx));
 800732c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007330:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4013      	ands	r3, r2
}
 8007338:	4618      	mov	r0, r3
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <LL_RCC_GetCLK48ClockSource>:
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, CLK48x));
 800734c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007350:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4013      	ands	r3, r2
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <LL_RCC_GetUSBClockSource>:
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetCLK48ClockSource(USBx);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ffe9 	bl	8007344 <LL_RCC_GetCLK48ClockSource>
 8007372:	4603      	mov	r3, r0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <LL_RCC_GetADCClockSource>:
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, ADCx));
 8007384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007388:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4013      	ands	r3, r2
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <LL_RCC_SetRTCClockSource>:
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80073a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <LL_RCC_GetRTCClockSource>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80073cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80073d8:	4618      	mov	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <LL_RCC_ForceBackupDomainReset>:
{
 80073e2:	b480      	push	{r7}
 80073e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80073e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80073fa:	bf00      	nop
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800741c:	bf00      	nop
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <LL_RCC_PLL_IsReady>:
{
 8007426:	b480      	push	{r7}
 8007428:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800742a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007438:	d101      	bne.n	800743e <LL_RCC_PLL_IsReady+0x18>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <LL_RCC_PLL_IsReady+0x1a>
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <LL_RCC_PLL_GetN>:
{
 800744a:	b480      	push	{r7}
 800744c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800744e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	0a1b      	lsrs	r3, r3, #8
 8007456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800745a:	4618      	mov	r0, r3
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <LL_RCC_PLL_GetP>:
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f403 1378 	and.w	r3, r3, #4063232	@ 0x3e0000
}
 8007472:	4618      	mov	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <LL_RCC_PLL_GetQ>:
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ));
 8007480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
}
 800748a:	4618      	mov	r0, r3
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <LL_RCC_PLL_GetDivider>:
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_RCC_PLLSAI1_Enable>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074be:	6013      	str	r3, [r2, #0]
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <LL_RCC_PLLSAI1_Disable>:
{
 80074ca:	b480      	push	{r7}
 80074cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074dc:	6013      	str	r3, [r2, #0]
}
 80074de:	bf00      	nop
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <LL_RCC_PLLSAI1_IsReady>:
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80074ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074fa:	d101      	bne.n	8007500 <LL_RCC_PLLSAI1_IsReady+0x18>
 80074fc:	2301      	movs	r3, #1
 80074fe:	e000      	b.n	8007502 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <LL_RCC_PLLSAI1_GetN>:
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLN) >> RCC_PLLSAI1CFGR_PLLN_Pos);
 8007510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800751c:	4618      	mov	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <LL_RCC_PLLSAI1_GetP>:
{
 8007526:	b480      	push	{r7}
 8007528:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLP));
 800752a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f403 1378 	and.w	r3, r3, #4063232	@ 0x3e0000
}
 8007534:	4618      	mov	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <LL_RCC_PLLSAI1_GetQ>:
{
 800753e:	b480      	push	{r7}
 8007540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLQ));
 8007542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
}
 800754c:	4618      	mov	r0, r3
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <LL_RCC_PLLSAI1_GetR>:
{
 8007556:	b480      	push	{r7}
 8007558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR));
 800755a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8007564:	4618      	mov	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <LL_RCC_PLL_GetMainSource>:
{
 800756e:	b480      	push	{r7}
 8007570:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0303 	and.w	r3, r3, #3
}
 800757c:	4618      	mov	r0, r3
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b088      	sub	sp, #32
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800758e:	2300      	movs	r3, #0
 8007590:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007592:	2300      	movs	r3, #0
 8007594:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d034      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075aa:	d021      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80075ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075b0:	d81b      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075b6:	d01d      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80075b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075bc:	d815      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x54>
 80075c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075c6:	d110      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075d6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80075d8:	e00d      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3304      	adds	r3, #4
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fd5d 	bl	800809e <RCCEx_PLLSAI1_ConfigNP>
 80075e4:	4603      	mov	r3, r0
 80075e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075e8:	e005      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	77fb      	strb	r3, [r7, #31]
        break;
 80075ee:	e002      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f6:	7ffb      	ldrb	r3, [r7, #31]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d105      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fdd5 	bl	80071b0 <LL_RCC_SetSAIClockSource>
 8007606:	e001      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007608:	7ffb      	ldrb	r3, [r7, #31]
 800760a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007614:	2b00      	cmp	r3, #0
 8007616:	d046      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007618:	f7ff fed6 	bl	80073c8 <LL_RCC_GetRTCClockSource>
 800761c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	429a      	cmp	r2, r3
 8007626:	d03c      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007628:	f7fd ff52 	bl	80054d0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff feb0 	bl	800739c <LL_RCC_SetRTCClockSource>
 800763c:	e02e      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800763e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007646:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007648:	f7ff fecb 	bl	80073e2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800764c:	f7ff feda 	bl	8007404 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800765e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007668:	f7ff fc4a 	bl	8006f00 <LL_RCC_LSE_IsEnabled>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d114      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007672:	f7fc f961 	bl	8003938 <HAL_GetTick>
 8007676:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007678:	e00b      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767a:	f7fc f95d 	bl	8003938 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007688:	4293      	cmp	r3, r2
 800768a:	d902      	bls.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	77fb      	strb	r3, [r7, #31]
              break;
 8007690:	e004      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007692:	f7ff fc47 	bl	8006f24 <LL_RCC_LSE_IsReady>
 8007696:	4603      	mov	r3, r0
 8007698:	2b01      	cmp	r3, #1
 800769a:	d1ee      	bne.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800769c:	7ffb      	ldrb	r3, [r7, #31]
 800769e:	77bb      	strb	r3, [r7, #30]
 80076a0:	e001      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fd17 	bl	80070ea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fd22 	bl	8007116 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fd4a 	bl	800717c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff fd3f 	bl	800717c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fd17 	bl	8007142 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fd0c 	bl	8007142 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007732:	2b00      	cmp	r3, #0
 8007734:	d022      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff fd7a 	bl	8007234 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007748:	d107      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800774a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007754:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007758:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800775e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007762:	d10b      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fcf3 	bl	8008154 <RCCEx_PLLSAI1_ConfigNQ>
 800776e:	4603      	mov	r3, r0
 8007770:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007772:	7ffb      	ldrb	r3, [r7, #31]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007778:	7ffb      	ldrb	r3, [r7, #31]
 800777a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007784:	2b00      	cmp	r3, #0
 8007786:	d02b      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007790:	d008      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800779a:	d003      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fd17 	bl	80071dc <LL_RCC_SetRNGClockSource>
 80077ae:	e00a      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	2000      	movs	r0, #0
 80077bc:	f7ff fd0e 	bl	80071dc <LL_RCC_SetRNGClockSource>
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f7ff fd21 	bl	8007208 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80077ce:	d107      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80077d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d022      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fd2a 	bl	800724a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077fe:	d107      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800780a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800780e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007818:	d10b      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fcf3 	bl	800820a <RCCEx_PLLSAI1_ConfigNR>
 8007824:	4603      	mov	r3, r0
 8007826:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007828:	7ffb      	ldrb	r3, [r7, #31]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800782e:	7ffb      	ldrb	r3, [r7, #31]
 8007830:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d004      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff fbca 	bl	8006fdc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d009      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fc26 	bl	80070aa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fc01 	bl	800706a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007868:	7fbb      	ldrb	r3, [r7, #30]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RFWAKEUP  RFWKP peripheral clock
  *            @arg @ref RCC_PERIPHCLK_SMPS  SMPS peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007874:	b590      	push	{r4, r7, lr}
 8007876:	b093      	sub	sp, #76	@ 0x4c
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(RCC_SMPS_SUPPORT)
  uint32_t smps_prescaler_index = ((LL_RCC_GetSMPSPrescaler()) >> RCC_SMPSCR_SMPSDIV_Pos);
 8007880:	f7ff fc27 	bl	80070d2 <LL_RCC_GetSMPSPrescaler>
 8007884:	4603      	mov	r3, r0
 8007886:	091b      	lsrs	r3, r3, #4
 8007888:	643b      	str	r3, [r7, #64]	@ 0x40
#endif /* RCC_SMPS_SUPPORT */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007890:	d12d      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
  {
    uint32_t rtcClockSource = LL_RCC_GetRTCClockSource();
 8007892:	f7ff fd99 	bl	80073c8 <LL_RCC_GetRTCClockSource>
 8007896:	6138      	str	r0, [r7, #16]

    if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSE) /* LSE clock used as RTC clock source */
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800789e:	d109      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 80078a0:	f7ff fb40 	bl	8006f24 <LL_RCC_LSE_IsReady>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	f040 83d2 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 80078ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b2:	e3cd      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_LSI) /* LSI clock used as RTC clock source */
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078ba:	d110      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 80078bc:	f7ff fb44 	bl	8006f48 <LL_RCC_LSI1_IsReady>
 80078c0:	60f8      	str	r0, [r7, #12]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 80078c2:	f7ff fb53 	bl	8006f6c <LL_RCC_LSI2_IsReady>
 80078c6:	60b8      	str	r0, [r7, #8]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d003      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	f040 83bd 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 80078d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078da:	647b      	str	r3, [r7, #68]	@ 0x44
 80078dc:	e3b8      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rtcClockSource == LL_RCC_RTC_CLKSOURCE_HSE_DIV32) /* HSE clock used as RTC clock source */
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078e4:	f040 83b4 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      frequency = HSE_VALUE / 32U;
 80078e8:	4bab      	ldr	r3, [pc, #684]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
 80078ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ec:	e3b0      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(SAI1)
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	d130      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
  {
    switch (LL_RCC_GetSAIClockSource(LL_RCC_SAI1_CLKSOURCE))
 80078f4:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 80078f8:	f7ff fd04 	bl	8007304 <LL_RCC_GetSAIClockSource>
 80078fc:	4603      	mov	r3, r0
 80078fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007902:	d008      	beq.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007904:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007908:	d822      	bhi.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800790e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007912:	d013      	beq.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007914:	e01c      	b.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
    {
      case LL_RCC_SAI1_CLKSOURCE_HSI:        /* HSI clock used as SAI1 clock source */
        if (LL_RCC_HSI_IsReady() == 1U)
 8007916:	f7ff facf 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 800791a:	4603      	mov	r3, r0
 800791c:	2b01      	cmp	r3, #1
 800791e:	f040 8378 	bne.w	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
        {
          frequency = HSI_VALUE;
 8007922:	4b9e      	ldr	r3, [pc, #632]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007924:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007926:	e374      	b.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>

      case LL_RCC_SAI1_CLKSOURCE_PLLSAI1:    /* PLLSAI1 clock used as SAI1 clock source */
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007928:	f7ff fdde 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 800792c:	4603      	mov	r3, r0
 800792e:	2b01      	cmp	r3, #1
 8007930:	f040 8371 	bne.w	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          frequency = RCC_PLLSAI1_GetFreqDomain_P();
 8007934:	f000 fdc6 	bl	80084c4 <RCC_PLLSAI1_GetFreqDomain_P>
 8007938:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 800793a:	e36c      	b.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>

      case LL_RCC_SAI1_CLKSOURCE_PLL:        /* PLL clock used as SAI1 clock source */
        if (LL_RCC_PLL_IsReady() == 1U)
 800793c:	f7ff fd73 	bl	8007426 <LL_RCC_PLL_IsReady>
 8007940:	4603      	mov	r3, r0
 8007942:	2b01      	cmp	r3, #1
 8007944:	f040 8369 	bne.w	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
        {
          frequency = RCC_PLL_GetFreqDomain_P();
 8007948:	f000 fcba 	bl	80082c0 <RCC_PLL_GetFreqDomain_P>
 800794c:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 800794e:	e364      	b.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>

      default: /* External input clock used as SAI1 clock source */
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007950:	4b93      	ldr	r3, [pc, #588]	@ (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8007952:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007954:	e37c      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* SAI1 */
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800795c:	d168      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
  {
    uint32_t rngClockSource = HAL_RCCEx_GetRngCLKSource();
 800795e:	f000 fb85 	bl	800806c <HAL_RCCEx_GetRngCLKSource>
 8007962:	61f8      	str	r0, [r7, #28]

    if (rngClockSource == RCC_RNGCLKSOURCE_LSI)             /* LSI clock used as RNG clock source */
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800796a:	d110      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 800796c:	f7ff faec 	bl	8006f48 <LL_RCC_LSI1_IsReady>
 8007970:	61b8      	str	r0, [r7, #24]
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007972:	f7ff fafb 	bl	8006f6c <LL_RCC_LSI2_IsReady>
 8007976:	6178      	str	r0, [r7, #20]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d003      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b01      	cmp	r3, #1
 8007982:	f040 8365 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8007986:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800798a:	647b      	str	r3, [r7, #68]	@ 0x44
 800798c:	e360      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_LSE)        /* LSE clock used as RNG clock source */
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007994:	d109      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x136>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007996:	f7ff fac5 	bl	8006f24 <LL_RCC_LSE_IsReady>
 800799a:	4603      	mov	r3, r0
 800799c:	2b01      	cmp	r3, #1
 800799e:	f040 8357 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 80079a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079a8:	e352      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLL)        /* PLL clock divided by 3 used as RNG clock source */
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80079b0:	d10e      	bne.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
    {
      if (LL_RCC_PLL_IsReady() == 1U)
 80079b2:	f7ff fd38 	bl	8007426 <LL_RCC_PLL_IsReady>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	f040 8349 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = (RCC_PLL_GetFreqDomain_Q() / 3U);
 80079be:	f000 fcd5 	bl	800836c <RCC_PLL_GetFreqDomain_Q>
 80079c2:	4603      	mov	r3, r0
 80079c4:	4a77      	ldr	r2, [pc, #476]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	085b      	lsrs	r3, r3, #1
 80079cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ce:	e33f      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rngClockSource == RCC_RNGCLKSOURCE_MSI)        /* MSI clock divided by 3 used as RNG clock source */
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f1b3 5fe0 	cmp.w	r3, #469762048	@ 0x1c000000
 80079d6:	d114      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    {
      if (LL_RCC_MSI_IsReady() == 1U)
 80079d8:	f7ff fada 	bl	8006f90 <LL_RCC_MSI_IsReady>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	f040 8336 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = (__LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange()) / 3U);
 80079e4:	f7ff fae5 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 80079e8:	4603      	mov	r3, r0
 80079ea:	091b      	lsrs	r3, r3, #4
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	4a6d      	ldr	r2, [pc, #436]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80079f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f6:	4a6b      	ldr	r2, [pc, #428]	@ (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a00:	e326      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
#if defined(SAI1)
    else if (rngClockSource == RCC_RNGCLKSOURCE_PLLSAI1)    /* PLLSAI1 clock used as SAI1 clock source */
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f1b3 5fa0 	cmp.w	r3, #335544320	@ 0x14000000
 8007a08:	d109      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    {
      if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007a0a:	f7ff fd6d 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	f040 831d 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8007a16:	f000 fdab 	bl	8008570 <RCC_PLLSAI1_GetFreqDomain_Q>
 8007a1a:	6478      	str	r0, [r7, #68]	@ 0x44
 8007a1c:	e318      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
#endif /* SAI1 */
    else                                                    /* HSI48 clock divided by 3 used as RNG clock source */
    {
#if defined(RCC_HSI48_SUPPORT)
      if (LL_RCC_HSI48_IsReady() == 1U)
 8007a1e:	f7ff fa5d 	bl	8006edc <LL_RCC_HSI48_IsReady>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	f040 8313 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI48_VALUE / 3U;
 8007a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a2e:	e30f      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      /* Nothing to do as frequency already initialized to 0U */
#endif /* RCC_HSI48_SUPPORT */
    }
  }
#if defined(USB)
  else if (PeriphClk == RCC_PERIPHCLK_USB)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a36:	d13f      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  {
    switch (LL_RCC_GetUSBClockSource(LL_RCC_USB_CLKSOURCE))
 8007a38:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 8007a3c:	f7ff fc92 	bl	8007364 <LL_RCC_GetUSBClockSource>
 8007a40:	4603      	mov	r3, r0
 8007a42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a46:	d01d      	beq.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8007a48:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007a4c:	d82b      	bhi.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
 8007a4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007a52:	d003      	beq.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8007a54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a58:	d00a      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007a5a:	e024      	b.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
    {
#if defined(SAI1)
      case LL_RCC_USB_CLKSOURCE_PLLSAI1:       /* PLLSAI1 clock used as USB clock source */
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007a5c:	f7ff fd44 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	f040 82db 	bne.w	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
        {
          frequency = RCC_PLLSAI1_GetFreqDomain_Q();
 8007a68:	f000 fd82 	bl	8008570 <RCC_PLLSAI1_GetFreqDomain_Q>
 8007a6c:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007a6e:	e2d6      	b.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
#endif /* SAI1 */

      case LL_RCC_USB_CLKSOURCE_PLL:           /* PLL clock used as USB clock source */
        if (LL_RCC_PLL_IsReady() == 1U)
 8007a70:	f7ff fcd9 	bl	8007426 <LL_RCC_PLL_IsReady>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	f040 82d3 	bne.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
        {
          frequency = RCC_PLL_GetFreqDomain_Q();
 8007a7c:	f000 fc76 	bl	800836c <RCC_PLL_GetFreqDomain_Q>
 8007a80:	6478      	str	r0, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007a82:	e2ce      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>

      case LL_RCC_USB_CLKSOURCE_MSI:           /* MSI clock used as USB clock source */
        if (LL_RCC_MSI_IsReady() == 1U)
 8007a84:	f7ff fa84 	bl	8006f90 <LL_RCC_MSI_IsReady>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	f040 82cb 	bne.w	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007a90:	f7ff fa8f 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 8007a94:	4603      	mov	r3, r0
 8007a96:	091b      	lsrs	r3, r3, #4
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	4a42      	ldr	r2, [pc, #264]	@ (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8007a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007aa4:	e2bf      	b.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>

      default: /* HSI48 clock used as USB clock source */
        if (LL_RCC_HSI48_IsReady() == 1U)
 8007aa6:	f7ff fa19 	bl	8006edc <LL_RCC_HSI48_IsReady>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	f040 82bc 	bne.w	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
        {
          frequency = HSI48_VALUE;
 8007ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8007ab4:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007ab6:	e2b8      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
    }
  }
#endif /* USB */
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d140      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
  {
    switch (LL_RCC_GetUSARTClockSource(LL_RCC_USART1_CLKSOURCE))
 8007abe:	2003      	movs	r0, #3
 8007ac0:	f7ff fbd9 	bl	8007276 <LL_RCC_GetUSARTClockSource>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d013      	beq.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d81b      	bhi.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d002      	beq.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007ad6:	e016      	b.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 8007ad8:	f7ff f86a 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007adc:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8007ade:	e2b7      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8007ae0:	f7ff f9ea 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	f040 82a1 	bne.w	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        {
          frequency = HSI_VALUE;
 8007aec:	4b2b      	ldr	r3, [pc, #172]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007aee:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007af0:	e29d      	b.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8007af2:	f7ff fa17 	bl	8006f24 <LL_RCC_LSE_IsReady>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	f040 829a 	bne.w	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
        {
          frequency = LSE_VALUE;
 8007afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007b04:	e295      	b.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>

      default: /* USART1 Clock is PCLK2 */
        frequency = __LL_RCC_CALC_PCLK2_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8007b06:	f7ff f853 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	f7ff fa89 	bl	8007022 <LL_RCC_GetAHBPrescaler>
 8007b10:	4603      	mov	r3, r0
 8007b12:	091b      	lsrs	r3, r3, #4
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	4a25      	ldr	r2, [pc, #148]	@ (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8007b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b1e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007b22:	f7ff fa96 	bl	8007052 <LL_RCC_GetAPB2Prescaler>
 8007b26:	4603      	mov	r3, r0
 8007b28:	0adb      	lsrs	r3, r3, #11
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	4a21      	ldr	r2, [pc, #132]	@ (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8007b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b34:	f003 031f 	and.w	r3, r3, #31
 8007b38:	fa24 f303 	lsr.w	r3, r4, r3
 8007b3c:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB2Prescaler());
        break;
 8007b3e:	e287      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#if defined(LPUART1)
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d155      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
  {
    switch (LL_RCC_GetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE))
 8007b46:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007b4a:	f7ff fba4 	bl	8007296 <LL_RCC_GetLPUARTClockSource>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b54:	d016      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8007b56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b5a:	d82d      	bhi.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
 8007b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b60:	d003      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8007b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b66:	d004      	beq.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8007b68:	e026      	b.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 8007b6a:	f7ff f821 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007b6e:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8007b70:	e26e      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8007b72:	f7ff f9a1 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	f040 825c 	bne.w	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
        {
          frequency = HSI_VALUE;
 8007b7e:	4b07      	ldr	r3, [pc, #28]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007b80:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007b82:	e258      	b.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8007b84:	f7ff f9ce 	bl	8006f24 <LL_RCC_LSE_IsReady>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	f040 8255 	bne.w	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
        {
          frequency = LSE_VALUE;
 8007b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b94:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007b96:	e250      	b.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8007b98:	000f4240 	.word	0x000f4240
 8007b9c:	00f42400 	.word	0x00f42400
 8007ba0:	001fff68 	.word	0x001fff68
 8007ba4:	aaaaaaab 	.word	0xaaaaaaab
 8007ba8:	08014198 	.word	0x08014198
 8007bac:	02dc6c00 	.word	0x02dc6c00
 8007bb0:	08014138 	.word	0x08014138
 8007bb4:	08014178 	.word	0x08014178

      default: /* LPUART1 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8007bb8:	f7fe fffa 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	f7ff fa30 	bl	8007022 <LL_RCC_GetAHBPrescaler>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	091b      	lsrs	r3, r3, #4
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	4aaf      	ldr	r2, [pc, #700]	@ (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8007bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd0:	fbb4 f4f3 	udiv	r4, r4, r3
 8007bd4:	f7ff fa31 	bl	800703a <LL_RCC_GetAPB1Prescaler>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	4aaa      	ldr	r2, [pc, #680]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8007be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007be6:	f003 031f 	and.w	r3, r3, #31
 8007bea:	fa24 f303 	lsr.w	r3, r4, r3
 8007bee:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 8007bf0:	e22e      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* LPUART1 */
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf8:	d12a      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
  {
    switch (LL_RCC_GetADCClockSource(LL_RCC_ADC_CLKSOURCE))
 8007bfa:	f04f 5040 	mov.w	r0, #805306368	@ 0x30000000
 8007bfe:	f7ff fbbd 	bl	800737c <LL_RCC_GetADCClockSource>
 8007c02:	4603      	mov	r3, r0
 8007c04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c08:	d014      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8007c0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c0e:	f200 8216 	bhi.w	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c16:	d003      	beq.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c1c:	d00e      	beq.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;

      default: /* No clock used as ADC clock source */
        break;
 8007c1e:	e20e      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
        if (LL_RCC_PLLSAI1_IsReady() == 1U)
 8007c20:	f7ff fc62 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	f040 820b 	bne.w	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
          frequency = RCC_PLLSAI1_GetFreqDomain_R();
 8007c2c:	f000 fbf4 	bl	8008418 <RCC_PLLSAI1_GetFreqDomain_R>
 8007c30:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8007c32:	e206      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
        frequency = HAL_RCC_GetSysClockFreq();
 8007c34:	f7fe ffbc 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007c38:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8007c3a:	e209      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        if (LL_RCC_PLL_IsReady() == 1U)
 8007c3c:	f7ff fbf3 	bl	8007426 <LL_RCC_PLL_IsReady>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	f040 81ff 	bne.w	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
          frequency = RCC_PLL_GetFreqDomain_P();
 8007c48:	f000 fb3a 	bl	80082c0 <RCC_PLL_GetFreqDomain_P>
 8007c4c:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8007c4e:	e1fa      	b.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d135      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C1_CLKSOURCE))
 8007c56:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8007c5a:	f7ff fb2c 	bl	80072b6 <LL_RCC_GetI2CClockSource>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4a8b      	ldr	r2, [pc, #556]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d003      	beq.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 8007c66:	4a8b      	ldr	r2, [pc, #556]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x620>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d004      	beq.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007c6c:	e00c      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
    {
      case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 8007c6e:	f7fe ff9f 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007c72:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8007c74:	e1ec      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8007c76:	f7ff f91f 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f040 81e4 	bne.w	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
        {
          frequency = HSI_VALUE;
 8007c82:	4b85      	ldr	r3, [pc, #532]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8007c84:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007c86:	e1e0      	b.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>

      default: /* I2C1 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8007c88:	f7fe ff92 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	f7ff f9c8 	bl	8007022 <LL_RCC_GetAHBPrescaler>
 8007c92:	4603      	mov	r3, r0
 8007c94:	091b      	lsrs	r3, r3, #4
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	4a7b      	ldr	r2, [pc, #492]	@ (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8007c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ca0:	fbb4 f4f3 	udiv	r4, r4, r3
 8007ca4:	f7ff f9c9 	bl	800703a <LL_RCC_GetAPB1Prescaler>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	4a76      	ldr	r2, [pc, #472]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8007cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	fa24 f303 	lsr.w	r3, r4, r3
 8007cbe:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 8007cc0:	e1c6      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#if defined(I2C3)
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d135      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  {
    switch (LL_RCC_GetI2CClockSource(LL_RCC_I2C3_CLKSOURCE))
 8007cc8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8007ccc:	f7ff faf3 	bl	80072b6 <LL_RCC_GetI2CClockSource>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4a72      	ldr	r2, [pc, #456]	@ (8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x628>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8007cd8:	4a71      	ldr	r2, [pc, #452]	@ (8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
 8007cde:	e00c      	b.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
        frequency = HAL_RCC_GetSysClockFreq();
 8007ce0:	f7fe ff66 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007ce4:	6478      	str	r0, [r7, #68]	@ 0x44
        break;
 8007ce6:	e1b3      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>

      case LL_RCC_I2C3_CLKSOURCE_HSI: /* I2C3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8007ce8:	f7ff f8e6 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	f040 81ad 	bne.w	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          frequency = HSI_VALUE;
 8007cf4:	4b68      	ldr	r3, [pc, #416]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8007cf6:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        else
        {
          /* Nothing to do as frequency already initialized to 0U */
        }
        break;
 8007cf8:	e1a9      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>

      default: /* I2C3 Clock is PCLK1 */
        frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8007cfa:	f7fe ff59 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007cfe:	4604      	mov	r4, r0
 8007d00:	f7ff f98f 	bl	8007022 <LL_RCC_GetAHBPrescaler>
 8007d04:	4603      	mov	r3, r0
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8007d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d12:	fbb4 f4f3 	udiv	r4, r4, r3
 8007d16:	f7ff f990 	bl	800703a <LL_RCC_GetAPB1Prescaler>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	0a1b      	lsrs	r3, r3, #8
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	4a5a      	ldr	r2, [pc, #360]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8007d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8007d30:	647b      	str	r3, [r7, #68]	@ 0x44
                                                                      LL_RCC_GetAHBPrescaler()),
                                             LL_RCC_GetAPB1Prescaler());
        break;
 8007d32:	e18d      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    }
  }
#endif /* I2C3 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d151      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE);
 8007d3a:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8007d3e:	f7ff face 	bl	80072de <LL_RCC_GetLPTIMClockSource>
 8007d42:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSI) /* LPTIM1 Clock is LSI Osc. */
 8007d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d46:	4a57      	ldr	r2, [pc, #348]	@ (8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d110      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007d4c:	f7ff f8fc 	bl	8006f48 <LL_RCC_LSI1_IsReady>
 8007d50:	6278      	str	r0, [r7, #36]	@ 0x24
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007d52:	f7ff f90b 	bl	8006f6c <LL_RCC_LSI2_IsReady>
 8007d56:	6238      	str	r0, [r7, #32]
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	f040 8175 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8007d66:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d6c:	e170      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_HSI) /* LPTIM1 Clock is HSI Osc. */
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	4a4d      	ldr	r2, [pc, #308]	@ (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d108      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007d76:	f7ff f89f 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	f040 8167 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE;
 8007d82:	4b45      	ldr	r3, [pc, #276]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8007d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d86:	e163      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM1_CLKSOURCE_LSE) /* LPTIM1 Clock is LSE Osc. */
 8007d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8a:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8007d8e:	d109      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007d90:	f7ff f8c8 	bl	8006f24 <LL_RCC_LSE_IsReady>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	f040 815a 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 8007d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007da2:	e155      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM1 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8007da4:	f7fe ff04 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007da8:	4604      	mov	r4, r0
 8007daa:	f7ff f93a 	bl	8007022 <LL_RCC_GetAHBPrescaler>
 8007dae:	4603      	mov	r3, r0
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	4a34      	ldr	r2, [pc, #208]	@ (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8007db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dbc:	fbb4 f4f3 	udiv	r4, r4, r3
 8007dc0:	f7ff f93b 	bl	800703a <LL_RCC_GetAPB1Prescaler>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	0a1b      	lsrs	r3, r3, #8
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8007dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	fa24 f303 	lsr.w	r3, r4, r3
 8007dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ddc:	e138      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
                                                                    LL_RCC_GetAHBPrescaler()),
                                           LL_RCC_GetAPB1Prescaler());
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d167      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
  {
    uint32_t lptimClockSource = LL_RCC_GetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE);
 8007de4:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8007de8:	f7ff fa79 	bl	80072de <LL_RCC_GetLPTIMClockSource>
 8007dec:	6378      	str	r0, [r7, #52]	@ 0x34

    if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSI) /* LPTIM2 Clock is LSI Osc. */
 8007dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df0:	4a2e      	ldr	r2, [pc, #184]	@ (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d110      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
    {
      const uint32_t temp_lsi1ready = LL_RCC_LSI1_IsReady();
 8007df6:	f7ff f8a7 	bl	8006f48 <LL_RCC_LSI1_IsReady>
 8007dfa:	6338      	str	r0, [r7, #48]	@ 0x30
      const uint32_t temp_lsi2ready = LL_RCC_LSI2_IsReady();
 8007dfc:	f7ff f8b6 	bl	8006f6c <LL_RCC_LSI2_IsReady>
 8007e00:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if ((temp_lsi1ready == 1U) || (temp_lsi2ready == 1U))
 8007e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d003      	beq.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	f040 8120 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSI_VALUE;
 8007e10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e16:	e11b      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_HSI) /* LPTIM2 Clock is HSI Osc. */
 8007e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1a:	4a25      	ldr	r2, [pc, #148]	@ (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d108      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007e20:	f7ff f84a 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	f040 8112 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE;
 8007e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x624>)
 8007e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e30:	e10e      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (lptimClockSource == LL_RCC_LPTIM2_CLKSOURCE_LSE) /* LPTIM2 Clock is LSE Osc. */
 8007e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e34:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8007e38:	d109      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007e3a:	f7ff f873 	bl	8006f24 <LL_RCC_LSE_IsReady>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	f040 8105 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 8007e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e4c:	e100      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else /* LPTIM2 Clock is PCLK1 */
    {
      frequency = __LL_RCC_CALC_PCLK1_FREQ(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(),
 8007e4e:	f7fe feaf 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8007e52:	4604      	mov	r4, r0
 8007e54:	f7ff f8e5 	bl	8007022 <LL_RCC_GetAHBPrescaler>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	091b      	lsrs	r3, r3, #4
 8007e5c:	f003 030f 	and.w	r3, r3, #15
 8007e60:	4a09      	ldr	r2, [pc, #36]	@ (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8007e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e66:	fbb4 f4f3 	udiv	r4, r4, r3
 8007e6a:	f7ff f8e6 	bl	800703a <LL_RCC_GetAPB1Prescaler>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	0a1b      	lsrs	r3, r3, #8
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	4a05      	ldr	r2, [pc, #20]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>)
 8007e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	fa24 f303 	lsr.w	r3, r4, r3
 8007e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e86:	e0e3      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007e88:	08014138 	.word	0x08014138
 8007e8c:	08014178 	.word	0x08014178
 8007e90:	00030100 	.word	0x00030100
 8007e94:	00030200 	.word	0x00030200
 8007e98:	00f42400 	.word	0x00f42400
 8007e9c:	00301000 	.word	0x00301000
 8007ea0:	00302000 	.word	0x00302000
 8007ea4:	000c0004 	.word	0x000c0004
 8007ea8:	000c0008 	.word	0x000c0008
 8007eac:	00300010 	.word	0x00300010
 8007eb0:	00300020 	.word	0x00300020
                                                                    LL_RCC_GetAHBPrescaler()),
                                           LL_RCC_GetAPB1Prescaler());
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_RFWAKEUP)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eba:	d119      	bne.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
  {
    uint32_t rfwkpClockSource = LL_RCC_GetRFWKPClockSource();
 8007ebc:	f7ff f8a4 	bl	8007008 <LL_RCC_GetRFWKPClockSource>
 8007ec0:	63b8      	str	r0, [r7, #56]	@ 0x38

    if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_LSE) /* LSE clock used as RF Wakeup clock source */
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ec8:	d109      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
    {
      if (LL_RCC_LSE_IsReady() == 1U)
 8007eca:	f7ff f82b 	bl	8006f24 <LL_RCC_LSE_IsReady>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	f040 80bd 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = LSE_VALUE;
 8007ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8007edc:	e0b8      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (rfwkpClockSource == LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024) /* HSE clock used as RF Wakeup clock source */
 8007ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ee4:	f040 80b4 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      frequency = HSE_VALUE / 1024U;
 8007ee8:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8007eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eee:	e0af      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#if defined(RCC_SMPS_SUPPORT)
  else if (PeriphClk == RCC_PERIPHCLK_SMPS)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef6:	f040 80ab 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
  {
    uint32_t smpsClockSource = LL_RCC_GetSMPSClockSource();
 8007efa:	f7ff f8ca 	bl	8007092 <LL_RCC_GetSMPSClockSource>
 8007efe:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSI) /* SMPS Clock source is HSI Osc. */
 8007f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d115      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
    {
      if (LL_RCC_HSI_IsReady() == 1U)
 8007f06:	f7fe ffd7 	bl	8006eb8 <LL_RCC_HSI_IsReady>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	f040 809f 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSI_VALUE / SmpsPrescalerTable[smps_prescaler_index][0];
 8007f12:	4952      	ldr	r1, [pc, #328]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8007f14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f16:	4613      	mov	r3, r2
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	4413      	add	r3, r2
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	440b      	add	r3, r1
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a4f      	ldr	r2, [pc, #316]	@ (8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>)
 8007f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f28:	647b      	str	r3, [r7, #68]	@ 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f30:	e08e      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_HSE) /* SMPS Clock source is HSE Osc. */
 8007f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f38:	d116      	bne.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
    {
      if (LL_RCC_HSE_IsReady() == 1U)
 8007f3a:	f7fe ffab 	bl	8006e94 <LL_RCC_HSE_IsReady>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	f040 8085 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      {
        frequency = HSE_VALUE / SmpsPrescalerTable[smps_prescaler_index][5];
 8007f46:	4945      	ldr	r1, [pc, #276]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8007f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	4413      	add	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	440b      	add	r3, r1
 8007f54:	3314      	adds	r3, #20
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a42      	ldr	r2, [pc, #264]	@ (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>)
 8007f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5e:	647b      	str	r3, [r7, #68]	@ 0x44
        frequency = frequency >> 1U; /* Systematic Div by 2 */
 8007f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f66:	e073      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
      else
      {
        /* Nothing to do as frequency already initialized to 0U */
      }
    }
    else if (smpsClockSource == LL_RCC_SMPS_CLKSOURCE_STATUS_MSI) /* SMPS Clock source is MSI Osc. */
 8007f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6e:	d16f      	bne.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
    {
      switch (LL_RCC_MSI_GetRange())
 8007f70:	f7ff f81f 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2bb0      	cmp	r3, #176	@ 0xb0
 8007f78:	d037      	beq.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8007f7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8007f7c:	d844      	bhi.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007f7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007f80:	d024      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8007f82:	2ba0      	cmp	r3, #160	@ 0xa0
 8007f84:	d840      	bhi.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007f86:	2b80      	cmp	r3, #128	@ 0x80
 8007f88:	d002      	beq.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007f8a:	2b90      	cmp	r3, #144	@ 0x90
 8007f8c:	d00f      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          break;
        case LL_RCC_MSIRANGE_11:
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
          break;
        default:
          break;
 8007f8e:	e03b      	b.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_8) / SmpsPrescalerTable[smps_prescaler_index][4];
 8007f90:	4b35      	ldr	r3, [pc, #212]	@ (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007f92:	6a19      	ldr	r1, [r3, #32]
 8007f94:	4831      	ldr	r0, [pc, #196]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8007f96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f98:	4613      	mov	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4413      	add	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4403      	add	r3, r0
 8007fa2:	3310      	adds	r3, #16
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007faa:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8007fac:	e02d      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_9) / SmpsPrescalerTable[smps_prescaler_index][3];
 8007fae:	4b2e      	ldr	r3, [pc, #184]	@ (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007fb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007fb2:	482a      	ldr	r0, [pc, #168]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8007fb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	4413      	add	r3, r2
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	4403      	add	r3, r0
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fc8:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8007fca:	e01e      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_10) / SmpsPrescalerTable[smps_prescaler_index][2];
 8007fcc:	4b26      	ldr	r3, [pc, #152]	@ (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007fce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007fd0:	4822      	ldr	r0, [pc, #136]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8007fd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	4413      	add	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4403      	add	r3, r0
 8007fde:	3308      	adds	r3, #8
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fe6:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8007fe8:	e00f      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGE_11) / SmpsPrescalerTable[smps_prescaler_index][1];
 8007fea:	4b1f      	ldr	r3, [pc, #124]	@ (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>)
 8007fec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007fee:	481b      	ldr	r0, [pc, #108]	@ (800805c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8007ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4413      	add	r3, r2
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	4403      	add	r3, r0
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	fbb1 f3f3 	udiv	r3, r1, r3
 8008004:	647b      	str	r3, [r7, #68]	@ 0x44
          break;
 8008006:	e000      	b.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x796>
          break;
 8008008:	bf00      	nop
      }
      frequency = frequency >> 1U; /* Systematic Div by 2 */
 800800a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800800c:	085b      	lsrs	r3, r3, #1
 800800e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008010:	e01e      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008012:	bf00      	nop
 8008014:	e01c      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008016:	bf00      	nop
 8008018:	e01a      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800801a:	bf00      	nop
 800801c:	e018      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800801e:	bf00      	nop
 8008020:	e016      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008022:	bf00      	nop
 8008024:	e014      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008026:	bf00      	nop
 8008028:	e012      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800802a:	bf00      	nop
 800802c:	e010      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800802e:	bf00      	nop
 8008030:	e00e      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008032:	bf00      	nop
 8008034:	e00c      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008036:	bf00      	nop
 8008038:	e00a      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800803a:	bf00      	nop
 800803c:	e008      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800803e:	bf00      	nop
 8008040:	e006      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008042:	bf00      	nop
 8008044:	e004      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 8008046:	bf00      	nop
 8008048:	e002      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800804a:	bf00      	nop
 800804c:	e000      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        break;
 800804e:	bf00      	nop
      /* Nothing to do as frequency already initialized to 0U */
    }
  }
#endif /* RCC_SMPS_SUPPORT */

  return (frequency);
 8008050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008052:	4618      	mov	r0, r3
 8008054:	374c      	adds	r7, #76	@ 0x4c
 8008056:	46bd      	mov	sp, r7
 8008058:	bd90      	pop	{r4, r7, pc}
 800805a:	bf00      	nop
 800805c:	080141d8 	.word	0x080141d8
 8008060:	00f42400 	.word	0x00f42400
 8008064:	01e84800 	.word	0x01e84800
 8008068:	08014198 	.word	0x08014198

0800806c <HAL_RCCEx_GetRngCLKSource>:
  *
  *         (*) Value not defined in all devices.
  *
  */
uint32_t HAL_RCCEx_GetRngCLKSource(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
  uint32_t rng_clock_source = LL_RCC_GetRNGClockSource(LL_RCC_RNG_CLKSOURCE);
 8008072:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 8008076:	f7ff f955 	bl	8007324 <LL_RCC_GetRNGClockSource>
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t clk48_clock_source;

  /* RNG clock source originates from 48 MHz RC oscillator */
  if (rng_clock_source == RCC_RNGCLKSOURCE_CLK48)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d108      	bne.n	8008094 <HAL_RCCEx_GetRngCLKSource+0x28>
  {
    clk48_clock_source = LL_RCC_GetCLK48ClockSource(LL_RCC_CLK48_CLKSOURCE);
 8008082:	f04f 6040 	mov.w	r0, #201326592	@ 0xc000000
 8008086:	f7ff f95d 	bl	8007344 <LL_RCC_GetCLK48ClockSource>
 800808a:	6038      	str	r0, [r7, #0]
    rng_clock_source = (CLK48_MASK | clk48_clock_source);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008092:	607b      	str	r3, [r7, #4]
  }

  return rng_clock_source;
 8008094:	687b      	ldr	r3, [r7, #4]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80080aa:	f7ff fa0e 	bl	80074ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080ae:	f7fb fc43 	bl	8003938 <HAL_GetTick>
 80080b2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80080b4:	e009      	b.n	80080ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080b6:	f7fb fc3f 	bl	8003938 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d902      	bls.n	80080ca <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
      break;
 80080c8:	e004      	b.n	80080d4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80080ca:	f7ff fa0d 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1f0      	bne.n	80080b6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d137      	bne.n	800814a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80080da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080ee:	4313      	orrs	r3, r2
 80080f0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80080f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008104:	4313      	orrs	r3, r2
 8008106:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008108:	f7ff f9d0 	bl	80074ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800810c:	f7fb fc14 	bl	8003938 <HAL_GetTick>
 8008110:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008112:	e009      	b.n	8008128 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008114:	f7fb fc10 	bl	8003938 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d902      	bls.n	8008128 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
        break;
 8008126:	e004      	b.n	8008132 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008128:	f7ff f9de 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 800812c:	4603      	mov	r3, r0
 800812e:	2b01      	cmp	r3, #1
 8008130:	d1f0      	bne.n	8008114 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d108      	bne.n	800814a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008146:	4313      	orrs	r3, r2
 8008148:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008160:	f7ff f9b3 	bl	80074ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008164:	f7fb fbe8 	bl	8003938 <HAL_GetTick>
 8008168:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800816a:	e009      	b.n	8008180 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800816c:	f7fb fbe4 	bl	8003938 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d902      	bls.n	8008180 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	73fb      	strb	r3, [r7, #15]
      break;
 800817e:	e004      	b.n	800818a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008180:	f7ff f9b2 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d137      	bne.n	8008200 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081a4:	4313      	orrs	r3, r2
 80081a6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081ba:	4313      	orrs	r3, r2
 80081bc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80081be:	f7ff f975 	bl	80074ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081c2:	f7fb fbb9 	bl	8003938 <HAL_GetTick>
 80081c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80081c8:	e009      	b.n	80081de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081ca:	f7fb fbb5 	bl	8003938 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d902      	bls.n	80081de <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
        break;
 80081dc:	e004      	b.n	80081e8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80081de:	f7ff f983 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d1f0      	bne.n	80081ca <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d108      	bne.n	8008200 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80081ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081fc:	4313      	orrs	r3, r2
 80081fe:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008216:	f7ff f958 	bl	80074ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800821a:	f7fb fb8d 	bl	8003938 <HAL_GetTick>
 800821e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008220:	e009      	b.n	8008236 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008222:	f7fb fb89 	bl	8003938 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b02      	cmp	r3, #2
 800822e:	d902      	bls.n	8008236 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	73fb      	strb	r3, [r7, #15]
      break;
 8008234:	e004      	b.n	8008240 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008236:	f7ff f957 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1f0      	bne.n	8008222 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008240:	7bfb      	ldrb	r3, [r7, #15]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d137      	bne.n	80082b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800825a:	4313      	orrs	r3, r2
 800825c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800825e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008270:	4313      	orrs	r3, r2
 8008272:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008274:	f7ff f91a 	bl	80074ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008278:	f7fb fb5e 	bl	8003938 <HAL_GetTick>
 800827c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800827e:	e009      	b.n	8008294 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008280:	f7fb fb5a 	bl	8003938 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d902      	bls.n	8008294 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	73fb      	strb	r3, [r7, #15]
        break;
 8008292:	e004      	b.n	800829e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008294:	f7ff f928 	bl	80074e8 <LL_RCC_PLLSAI1_IsReady>
 8008298:	4603      	mov	r3, r0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d1f0      	bne.n	8008280 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d108      	bne.n	80082b6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80082a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082b2:	4313      	orrs	r3, r2
 80082b4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <RCC_PLL_GetFreqDomain_P>:
/**
  * @brief  Return PLL clock (PLLPCLK) frequency used for SAI domain
  * @retval PLLPCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_P(void)
{
 80082c0:	b590      	push	{r4, r7, lr}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value / PLLM) * PLLN
     SAI Domain clock = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80082c6:	f7ff f952 	bl	800756e <LL_RCC_PLL_GetMainSource>
 80082ca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d017      	beq.n	8008302 <RCC_PLL_GetFreqDomain_P+0x42>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d81f      	bhi.n	8008318 <RCC_PLL_GetFreqDomain_P+0x58>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d003      	beq.n	80082e6 <RCC_PLL_GetFreqDomain_P+0x26>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d00b      	beq.n	80082fc <RCC_PLL_GetFreqDomain_P+0x3c>
 80082e4:	e018      	b.n	8008318 <RCC_PLL_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80082e6:	f7fe fe64 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 80082ea:	4603      	mov	r3, r0
 80082ec:	091b      	lsrs	r3, r3, #4
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008360 <RCC_PLL_GetFreqDomain_P+0xa0>)
 80082f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f8:	607b      	str	r3, [r7, #4]
      break;
 80082fa:	e018      	b.n	800832e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80082fc:	4b19      	ldr	r3, [pc, #100]	@ (8008364 <RCC_PLL_GetFreqDomain_P+0xa4>)
 80082fe:	607b      	str	r3, [r7, #4]
      break;
 8008300:	e015      	b.n	800832e <RCC_PLL_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008302:	f7fe fdb5 	bl	8006e70 <LL_RCC_HSE_IsEnabledDiv2>
 8008306:	4603      	mov	r3, r0
 8008308:	2b01      	cmp	r3, #1
 800830a:	d102      	bne.n	8008312 <RCC_PLL_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 800830c:	4b15      	ldr	r3, [pc, #84]	@ (8008364 <RCC_PLL_GetFreqDomain_P+0xa4>)
 800830e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008310:	e00d      	b.n	800832e <RCC_PLL_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8008312:	4b15      	ldr	r3, [pc, #84]	@ (8008368 <RCC_PLL_GetFreqDomain_P+0xa8>)
 8008314:	607b      	str	r3, [r7, #4]
      break;
 8008316:	e00a      	b.n	800832e <RCC_PLL_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008318:	f7fe fe4b 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 800831c:	4603      	mov	r3, r0
 800831e:	091b      	lsrs	r3, r3, #4
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	4a0e      	ldr	r2, [pc, #56]	@ (8008360 <RCC_PLL_GetFreqDomain_P+0xa0>)
 8008326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832a:	607b      	str	r3, [r7, #4]
      break;
 800832c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800832e:	f7ff f88c 	bl	800744a <LL_RCC_PLL_GetN>
 8008332:	4602      	mov	r2, r0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	fb03 f402 	mul.w	r4, r3, r2
 800833a:	f7ff f8ab 	bl	8007494 <LL_RCC_PLL_GetDivider>
 800833e:	4603      	mov	r3, r0
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	3301      	adds	r3, #1
 8008344:	fbb4 f4f3 	udiv	r4, r4, r3
 8008348:	f7ff f88c 	bl	8007464 <LL_RCC_PLL_GetP>
 800834c:	4603      	mov	r3, r0
 800834e:	0c5b      	lsrs	r3, r3, #17
 8008350:	3301      	adds	r3, #1
 8008352:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8008356:	4618      	mov	r0, r3
 8008358:	370c      	adds	r7, #12
 800835a:	46bd      	mov	sp, r7
 800835c:	bd90      	pop	{r4, r7, pc}
 800835e:	bf00      	nop
 8008360:	08014198 	.word	0x08014198
 8008364:	00f42400 	.word	0x00f42400
 8008368:	01e84800 	.word	0x01e84800

0800836c <RCC_PLL_GetFreqDomain_Q>:
/**
  * @brief  Return PLL clock (PLLQCLK) frequency used for 48 MHz domain
  * @retval PLLQCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_Q(void)
{
 800836c:	b590      	push	{r4, r7, lr}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLN
     48M Domain clock = PLL_VCO / PLLQ
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008372:	f7ff f8fc 	bl	800756e <LL_RCC_PLL_GetMainSource>
 8008376:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b03      	cmp	r3, #3
 800837c:	d017      	beq.n	80083ae <RCC_PLL_GetFreqDomain_Q+0x42>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b03      	cmp	r3, #3
 8008382:	d81f      	bhi.n	80083c4 <RCC_PLL_GetFreqDomain_Q+0x58>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d003      	beq.n	8008392 <RCC_PLL_GetFreqDomain_Q+0x26>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d00b      	beq.n	80083a8 <RCC_PLL_GetFreqDomain_Q+0x3c>
 8008390:	e018      	b.n	80083c4 <RCC_PLL_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008392:	f7fe fe0e 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 8008396:	4603      	mov	r3, r0
 8008398:	091b      	lsrs	r3, r3, #4
 800839a:	f003 030f 	and.w	r3, r3, #15
 800839e:	4a1b      	ldr	r2, [pc, #108]	@ (800840c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 80083a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a4:	607b      	str	r3, [r7, #4]
      break;
 80083a6:	e018      	b.n	80083da <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80083a8:	4b19      	ldr	r3, [pc, #100]	@ (8008410 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 80083aa:	607b      	str	r3, [r7, #4]
      break;
 80083ac:	e015      	b.n	80083da <RCC_PLL_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80083ae:	f7fe fd5f 	bl	8006e70 <LL_RCC_HSE_IsEnabledDiv2>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <RCC_PLL_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80083b8:	4b15      	ldr	r3, [pc, #84]	@ (8008410 <RCC_PLL_GetFreqDomain_Q+0xa4>)
 80083ba:	607b      	str	r3, [r7, #4]
      else
      {
        pllinputfreq = HSE_VALUE;
      }

      break;
 80083bc:	e00d      	b.n	80083da <RCC_PLL_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 80083be:	4b15      	ldr	r3, [pc, #84]	@ (8008414 <RCC_PLL_GetFreqDomain_Q+0xa8>)
 80083c0:	607b      	str	r3, [r7, #4]
      break;
 80083c2:	e00a      	b.n	80083da <RCC_PLL_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80083c4:	f7fe fdf5 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 80083c8:	4603      	mov	r3, r0
 80083ca:	091b      	lsrs	r3, r3, #4
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	4a0e      	ldr	r2, [pc, #56]	@ (800840c <RCC_PLL_GetFreqDomain_Q+0xa0>)
 80083d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d6:	607b      	str	r3, [r7, #4]
      break;
 80083d8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80083da:	f7ff f836 	bl	800744a <LL_RCC_PLL_GetN>
 80083de:	4602      	mov	r2, r0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	fb03 f402 	mul.w	r4, r3, r2
 80083e6:	f7ff f855 	bl	8007494 <LL_RCC_PLL_GetDivider>
 80083ea:	4603      	mov	r3, r0
 80083ec:	091b      	lsrs	r3, r3, #4
 80083ee:	3301      	adds	r3, #1
 80083f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80083f4:	f7ff f842 	bl	800747c <LL_RCC_PLL_GetQ>
 80083f8:	4603      	mov	r3, r0
 80083fa:	0e5b      	lsrs	r3, r3, #25
 80083fc:	3301      	adds	r3, #1
 80083fe:	fbb4 f3f3 	udiv	r3, r4, r3
                                       LL_RCC_PLL_GetN(), LL_RCC_PLL_GetQ());
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	bd90      	pop	{r4, r7, pc}
 800840a:	bf00      	nop
 800840c:	08014198 	.word	0x08014198
 8008410:	00f42400 	.word	0x00f42400
 8008414:	01e84800 	.word	0x01e84800

08008418 <RCC_PLLSAI1_GetFreqDomain_R>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1RCLK) frequency used for ADC domain
  * @retval PLLSAI1RCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_R(void)
{
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1R */
  pllsource = LL_RCC_PLL_GetMainSource();
 800841e:	f7ff f8a6 	bl	800756e <LL_RCC_PLL_GetMainSource>
 8008422:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b03      	cmp	r3, #3
 8008428:	d017      	beq.n	800845a <RCC_PLLSAI1_GetFreqDomain_R+0x42>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d81f      	bhi.n	8008470 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d003      	beq.n	800843e <RCC_PLLSAI1_GetFreqDomain_R+0x26>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d00b      	beq.n	8008454 <RCC_PLLSAI1_GetFreqDomain_R+0x3c>
 800843c:	e018      	b.n	8008470 <RCC_PLLSAI1_GetFreqDomain_R+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800843e:	f7fe fdb8 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 8008442:	4603      	mov	r3, r0
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	4a1b      	ldr	r2, [pc, #108]	@ (80084b8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 800844c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008450:	607b      	str	r3, [r7, #4]
      break;
 8008452:	e018      	b.n	8008486 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8008454:	4b19      	ldr	r3, [pc, #100]	@ (80084bc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8008456:	607b      	str	r3, [r7, #4]
      break;
 8008458:	e015      	b.n	8008486 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800845a:	f7fe fd09 	bl	8006e70 <LL_RCC_HSE_IsEnabledDiv2>
 800845e:	4603      	mov	r3, r0
 8008460:	2b01      	cmp	r3, #1
 8008462:	d102      	bne.n	800846a <RCC_PLLSAI1_GetFreqDomain_R+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008464:	4b15      	ldr	r3, [pc, #84]	@ (80084bc <RCC_PLLSAI1_GetFreqDomain_R+0xa4>)
 8008466:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008468:	e00d      	b.n	8008486 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>
        pllinputfreq = HSE_VALUE;
 800846a:	4b15      	ldr	r3, [pc, #84]	@ (80084c0 <RCC_PLLSAI1_GetFreqDomain_R+0xa8>)
 800846c:	607b      	str	r3, [r7, #4]
      break;
 800846e:	e00a      	b.n	8008486 <RCC_PLLSAI1_GetFreqDomain_R+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008470:	f7fe fd9f 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 8008474:	4603      	mov	r3, r0
 8008476:	091b      	lsrs	r3, r3, #4
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	4a0e      	ldr	r2, [pc, #56]	@ (80084b8 <RCC_PLLSAI1_GetFreqDomain_R+0xa0>)
 800847e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008482:	607b      	str	r3, [r7, #4]
      break;
 8008484:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_ADC_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008486:	f7ff f841 	bl	800750c <LL_RCC_PLLSAI1_GetN>
 800848a:	4602      	mov	r2, r0
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	fb03 f402 	mul.w	r4, r3, r2
 8008492:	f7fe ffff 	bl	8007494 <LL_RCC_PLL_GetDivider>
 8008496:	4603      	mov	r3, r0
 8008498:	091b      	lsrs	r3, r3, #4
 800849a:	3301      	adds	r3, #1
 800849c:	fbb4 f4f3 	udiv	r4, r4, r3
 80084a0:	f7ff f859 	bl	8007556 <LL_RCC_PLLSAI1_GetR>
 80084a4:	4603      	mov	r3, r0
 80084a6:	0f5b      	lsrs	r3, r3, #29
 80084a8:	3301      	adds	r3, #1
 80084aa:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetR());
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd90      	pop	{r4, r7, pc}
 80084b6:	bf00      	nop
 80084b8:	08014198 	.word	0x08014198
 80084bc:	00f42400 	.word	0x00f42400
 80084c0:	01e84800 	.word	0x01e84800

080084c4 <RCC_PLLSAI1_GetFreqDomain_P>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1PCLK) frequency used for SAI domain
  * @retval PLLSAI1PCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_P(void)
{
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* SAI Domain clock  = PLLSAI1_VCO / PLLSAI1P */
  pllsource = LL_RCC_PLL_GetMainSource();
 80084ca:	f7ff f850 	bl	800756e <LL_RCC_PLL_GetMainSource>
 80084ce:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d017      	beq.n	8008506 <RCC_PLLSAI1_GetFreqDomain_P+0x42>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d81f      	bhi.n	800851c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d003      	beq.n	80084ea <RCC_PLLSAI1_GetFreqDomain_P+0x26>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d00b      	beq.n	8008500 <RCC_PLLSAI1_GetFreqDomain_P+0x3c>
 80084e8:	e018      	b.n	800851c <RCC_PLLSAI1_GetFreqDomain_P+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80084ea:	f7fe fd62 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 80084ee:	4603      	mov	r3, r0
 80084f0:	091b      	lsrs	r3, r3, #4
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008564 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 80084f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084fc:	607b      	str	r3, [r7, #4]
      break;
 80084fe:	e018      	b.n	8008532 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 8008500:	4b19      	ldr	r3, [pc, #100]	@ (8008568 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8008502:	607b      	str	r3, [r7, #4]
      break;
 8008504:	e015      	b.n	8008532 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008506:	f7fe fcb3 	bl	8006e70 <LL_RCC_HSE_IsEnabledDiv2>
 800850a:	4603      	mov	r3, r0
 800850c:	2b01      	cmp	r3, #1
 800850e:	d102      	bne.n	8008516 <RCC_PLLSAI1_GetFreqDomain_P+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 8008510:	4b15      	ldr	r3, [pc, #84]	@ (8008568 <RCC_PLLSAI1_GetFreqDomain_P+0xa4>)
 8008512:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 8008514:	e00d      	b.n	8008532 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>
        pllinputfreq = HSE_VALUE;
 8008516:	4b15      	ldr	r3, [pc, #84]	@ (800856c <RCC_PLLSAI1_GetFreqDomain_P+0xa8>)
 8008518:	607b      	str	r3, [r7, #4]
      break;
 800851a:	e00a      	b.n	8008532 <RCC_PLLSAI1_GetFreqDomain_P+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800851c:	f7fe fd49 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 8008520:	4603      	mov	r3, r0
 8008522:	091b      	lsrs	r3, r3, #4
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	4a0e      	ldr	r2, [pc, #56]	@ (8008564 <RCC_PLLSAI1_GetFreqDomain_P+0xa0>)
 800852a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800852e:	607b      	str	r3, [r7, #4]
      break;
 8008530:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_SAI_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008532:	f7fe ffeb 	bl	800750c <LL_RCC_PLLSAI1_GetN>
 8008536:	4602      	mov	r2, r0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	fb03 f402 	mul.w	r4, r3, r2
 800853e:	f7fe ffa9 	bl	8007494 <LL_RCC_PLL_GetDivider>
 8008542:	4603      	mov	r3, r0
 8008544:	091b      	lsrs	r3, r3, #4
 8008546:	3301      	adds	r3, #1
 8008548:	fbb4 f4f3 	udiv	r4, r4, r3
 800854c:	f7fe ffeb 	bl	8007526 <LL_RCC_PLLSAI1_GetP>
 8008550:	4603      	mov	r3, r0
 8008552:	0c5b      	lsrs	r3, r3, #17
 8008554:	3301      	adds	r3, #1
 8008556:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetP());
}
 800855a:	4618      	mov	r0, r3
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	bd90      	pop	{r4, r7, pc}
 8008562:	bf00      	nop
 8008564:	08014198 	.word	0x08014198
 8008568:	00f42400 	.word	0x00f42400
 800856c:	01e84800 	.word	0x01e84800

08008570 <RCC_PLLSAI1_GetFreqDomain_Q>:
/**
  * @brief  Return PLLSAI1 clock (PLLSAI1QCLK) frequency used for 48Mhz domain
  * @retval PLLSAI1QCLK clock frequency (in Hz)
  */
static uint32_t RCC_PLLSAI1_GetFreqDomain_Q(void)
{
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq;
  uint32_t pllsource;

  /* PLLSAI1_VCO = (HSE_VALUE or HSI_VALUE or MSI Value/ PLLM) * PLLSAI1N */
  /* 48M Domain clock  = PLLSAI1_VCO / PLLSAI1Q */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008576:	f7fe fffa 	bl	800756e <LL_RCC_PLL_GetMainSource>
 800857a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b03      	cmp	r3, #3
 8008580:	d017      	beq.n	80085b2 <RCC_PLLSAI1_GetFreqDomain_Q+0x42>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b03      	cmp	r3, #3
 8008586:	d81f      	bhi.n	80085c8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d003      	beq.n	8008596 <RCC_PLLSAI1_GetFreqDomain_Q+0x26>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d00b      	beq.n	80085ac <RCC_PLLSAI1_GetFreqDomain_Q+0x3c>
 8008594:	e018      	b.n	80085c8 <RCC_PLLSAI1_GetFreqDomain_Q+0x58>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLLSAI1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008596:	f7fe fd0c 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 800859a:	4603      	mov	r3, r0
 800859c:	091b      	lsrs	r3, r3, #4
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008610 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 80085a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a8:	607b      	str	r3, [r7, #4]
      break;
 80085aa:	e018      	b.n	80085de <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLLSAI1 clock source */
      pllinputfreq = HSI_VALUE;
 80085ac:	4b19      	ldr	r3, [pc, #100]	@ (8008614 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 80085ae:	607b      	str	r3, [r7, #4]
      break;
 80085b0:	e015      	b.n	80085de <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLLSAI1 clock source */
      if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80085b2:	f7fe fc5d 	bl	8006e70 <LL_RCC_HSE_IsEnabledDiv2>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d102      	bne.n	80085c2 <RCC_PLLSAI1_GetFreqDomain_Q+0x52>
      {
        pllinputfreq = HSE_VALUE / 2U;
 80085bc:	4b15      	ldr	r3, [pc, #84]	@ (8008614 <RCC_PLLSAI1_GetFreqDomain_Q+0xa4>)
 80085be:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSE_VALUE;
      }
      break;
 80085c0:	e00d      	b.n	80085de <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>
        pllinputfreq = HSE_VALUE;
 80085c2:	4b15      	ldr	r3, [pc, #84]	@ (8008618 <RCC_PLLSAI1_GetFreqDomain_Q+0xa8>)
 80085c4:	607b      	str	r3, [r7, #4]
      break;
 80085c6:	e00a      	b.n	80085de <RCC_PLLSAI1_GetFreqDomain_Q+0x6e>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80085c8:	f7fe fcf3 	bl	8006fb2 <LL_RCC_MSI_GetRange>
 80085cc:	4603      	mov	r3, r0
 80085ce:	091b      	lsrs	r3, r3, #4
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	4a0e      	ldr	r2, [pc, #56]	@ (8008610 <RCC_PLLSAI1_GetFreqDomain_Q+0xa0>)
 80085d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085da:	607b      	str	r3, [r7, #4]
      break;
 80085dc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLSAI1_48M_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80085de:	f7fe ff95 	bl	800750c <LL_RCC_PLLSAI1_GetN>
 80085e2:	4602      	mov	r2, r0
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	fb03 f402 	mul.w	r4, r3, r2
 80085ea:	f7fe ff53 	bl	8007494 <LL_RCC_PLL_GetDivider>
 80085ee:	4603      	mov	r3, r0
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	3301      	adds	r3, #1
 80085f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80085f8:	f7fe ffa1 	bl	800753e <LL_RCC_PLLSAI1_GetQ>
 80085fc:	4603      	mov	r3, r0
 80085fe:	0e5b      	lsrs	r3, r3, #25
 8008600:	3301      	adds	r3, #1
 8008602:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLLSAI1_GetN(), LL_RCC_PLLSAI1_GetQ());
}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	bd90      	pop	{r4, r7, pc}
 800860e:	bf00      	nop
 8008610:	08014198 	.word	0x08014198
 8008614:	00f42400 	.word	0x00f42400
 8008618:	01e84800 	.word	0x01e84800

0800861c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e07a      	b.n	8008728 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7fa fea4 	bl	8003394 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2202      	movs	r2, #2
 8008650:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f003 0310 	and.w	r3, r3, #16
 800865e:	2b10      	cmp	r3, #16
 8008660:	d058      	beq.n	8008714 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	22ca      	movs	r2, #202	@ 0xca
 8008668:	625a      	str	r2, [r3, #36]	@ 0x24
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2253      	movs	r2, #83	@ 0x53
 8008670:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f882 	bl	800877c <RTC_EnterInitMode>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d12c      	bne.n	80086dc <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	6812      	ldr	r2, [r2, #0]
 800868c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008694:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6899      	ldr	r1, [r3, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	68d2      	ldr	r2, [r2, #12]
 80086bc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6919      	ldr	r1, [r3, #16]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	041a      	lsls	r2, r3, #16
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f88a 	bl	80087ec <RTC_ExitInitMode>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d113      	bne.n	800870a <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0203 	bic.w	r2, r2, #3
 80086f0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	69da      	ldr	r2, [r3, #28]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	22ff      	movs	r2, #255	@ 0xff
 8008710:	625a      	str	r2, [r3, #36]	@ 0x24
 8008712:	e001      	b.n	8008718 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d103      	bne.n	8008726 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0d      	ldr	r2, [pc, #52]	@ (8008778 <HAL_RTC_WaitForSynchro+0x48>)
 8008742:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008744:	f7fb f8f8 	bl	8003938 <HAL_GetTick>
 8008748:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800874a:	e009      	b.n	8008760 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800874c:	f7fb f8f4 	bl	8003938 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800875a:	d901      	bls.n	8008760 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e007      	b.n	8008770 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0ee      	beq.n	800874c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	0001ff5f 	.word	0x0001ff5f

0800877c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d123      	bne.n	80087e2 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80087a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087aa:	f7fb f8c5 	bl	8003938 <HAL_GetTick>
 80087ae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80087b0:	e00d      	b.n	80087ce <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80087b2:	f7fb f8c1 	bl	8003938 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80087c0:	d905      	bls.n	80087ce <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2204      	movs	r2, #4
 80087c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <RTC_EnterInitMode+0x66>
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d1e7      	bne.n	80087b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008806:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10b      	bne.n	800882e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff ff8a 	bl	8008730 <HAL_RTC_WaitForSynchro>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2204      	movs	r2, #4
 8008826:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8008844:	4b5f      	ldr	r3, [pc, #380]	@ (80089c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a5f      	ldr	r2, [pc, #380]	@ (80089c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800884a:	fba2 2303 	umull	r2, r3, r2, r3
 800884e:	0adb      	lsrs	r3, r3, #11
 8008850:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008854:	fb02 f303 	mul.w	r3, r2, r3
 8008858:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 8008864:	2302      	movs	r3, #2
 8008866:	e0a7      	b.n	80089b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	22ca      	movs	r2, #202	@ 0xca
 800887e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2253      	movs	r2, #83	@ 0x53
 8008886:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008892:	2b00      	cmp	r3, #0
 8008894:	d01a      	beq.n	80088cc <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	3b01      	subs	r3, #1
 800889a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10d      	bne.n	80088be <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	22ff      	movs	r2, #255	@ 0xff
 80088a8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2203      	movs	r2, #3
 80088ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e07c      	b.n	80089b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f003 0304 	and.w	r3, r3, #4
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e4      	bne.n	8008896 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088da:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80088ec:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80088ee:	4b35      	ldr	r3, [pc, #212]	@ (80089c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a35      	ldr	r2, [pc, #212]	@ (80089c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	0adb      	lsrs	r3, r3, #11
 80088fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80088fe:	fb02 f303 	mul.w	r3, r2, r3
 8008902:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	3b01      	subs	r3, #1
 8008908:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10d      	bne.n	800892c <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	22ff      	movs	r2, #255	@ 0xff
 8008916:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2203      	movs	r2, #3
 800891c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e045      	b.n	80089b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0e4      	beq.n	8008904 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0207 	bic.w	r2, r2, #7
 8008948:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6899      	ldr	r1, [r3, #8]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	430a      	orrs	r2, r1
 8008958:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008962:	4b1a      	ldr	r3, [pc, #104]	@ (80089cc <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8008964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008968:	4a18      	ldr	r2, [pc, #96]	@ (80089cc <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800896a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800896e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008972:	4b16      	ldr	r3, [pc, #88]	@ (80089cc <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a15      	ldr	r2, [pc, #84]	@ (80089cc <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8008978:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800897c:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800898c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800899c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	22ff      	movs	r2, #255	@ 0xff
 80089a4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	20000008 	.word	0x20000008
 80089c8:	10624dd3 	.word	0x10624dd3
 80089cc:	58000800 	.word	0x58000800

080089d0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e17c      	b.n	8008cdc <HAL_SAI_Init+0x30c>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d10e      	bne.n	8008a0a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a5c      	ldr	r2, [pc, #368]	@ (8008b64 <HAL_SAI_Init+0x194>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d107      	bne.n	8008a06 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d103      	bne.n	8008a06 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e168      	b.n	8008cdc <HAL_SAI_Init+0x30c>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7fa fd1c 	bl	800345c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fa3b 	bl	8008ea0 <SAI_Disable>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e153      	b.n	8008cdc <HAL_SAI_Init+0x30c>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.Synchro)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <HAL_SAI_Init+0x7a>
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d003      	beq.n	8008a50 <HAL_SAI_Init+0x80>
 8008a48:	e006      	b.n	8008a58 <HAL_SAI_Init+0x88>
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
      break;
 8008a4e:	e006      	b.n	8008a5e <HAL_SAI_Init+0x8e>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a54:	61bb      	str	r3, [r7, #24]
      break;
 8008a56:	e002      	b.n	8008a5e <HAL_SAI_Init+0x8e>
    default :
      syncen_bits = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	61bb      	str	r3, [r7, #24]
      break;
 8008a5c:	bf00      	nop
  }

  SAI1->GCR = 0;
 8008a5e:	4b42      	ldr	r3, [pc, #264]	@ (8008b68 <HAL_SAI_Init+0x198>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d062      	beq.n	8008b32 <HAL_SAI_Init+0x162>
  {
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008a6c:	2040      	movs	r0, #64	@ 0x40
 8008a6e:	f7fe ff01 	bl	8007874 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a72:	60f8      	str	r0, [r7, #12]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a7c:	d120      	bne.n	8008ac0 <HAL_SAI_Init+0xf0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d102      	bne.n	8008a8c <HAL_SAI_Init+0xbc>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008a86:	2340      	movs	r3, #64	@ 0x40
 8008a88:	613b      	str	r3, [r7, #16]
 8008a8a:	e00a      	b.n	8008aa2 <HAL_SAI_Init+0xd2>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d103      	bne.n	8008a9c <HAL_SAI_Init+0xcc>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	e002      	b.n	8008aa2 <HAL_SAI_Init+0xd2>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa0:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	4619      	mov	r1, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	fb02 f303 	mul.w	r3, r2, r3
 8008ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e017      	b.n	8008af0 <HAL_SAI_Init+0x120>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ac8:	d101      	bne.n	8008ace <HAL_SAI_Init+0xfe>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e000      	b.n	8008ad0 <HAL_SAI_Init+0x100>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	4619      	mov	r1, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	fb02 f303 	mul.w	r3, r2, r3
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8008aee:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	4a1e      	ldr	r2, [pc, #120]	@ (8008b6c <HAL_SAI_Init+0x19c>)
 8008af4:	fba2 2303 	umull	r2, r3, r2, r3
 8008af8:	08da      	lsrs	r2, r3, #3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008afe:	6979      	ldr	r1, [r7, #20]
 8008b00:	4b1a      	ldr	r3, [pc, #104]	@ (8008b6c <HAL_SAI_Init+0x19c>)
 8008b02:	fba3 2301 	umull	r2, r3, r3, r1
 8008b06:	08da      	lsrs	r2, r3, #3
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	1aca      	subs	r2, r1, r3
 8008b12:	2a08      	cmp	r2, #8
 8008b14:	d904      	bls.n	8008b20 <HAL_SAI_Init+0x150>
    {
      hsai->Init.Mckdiv += 1U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d104      	bne.n	8008b32 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2c:	085a      	lsrs	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_SAI_Init+0x172>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d109      	bne.n	8008b56 <HAL_SAI_Init+0x186>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d101      	bne.n	8008b4e <HAL_SAI_Init+0x17e>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e001      	b.n	8008b52 <HAL_SAI_Init+0x182>
 8008b4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e00e      	b.n	8008b74 <HAL_SAI_Init+0x1a4>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d108      	bne.n	8008b70 <HAL_SAI_Init+0x1a0>
 8008b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b62:	e006      	b.n	8008b72 <HAL_SAI_Init+0x1a2>
 8008b64:	40015404 	.word	0x40015404
 8008b68:	40015400 	.word	0x40015400
 8008b6c:	cccccccd 	.word	0xcccccccd
 8008b70:	2300      	movs	r3, #0
 8008b72:	61fb      	str	r3, [r7, #28]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	4b59      	ldr	r3, [pc, #356]	@ (8008ce4 <HAL_SAI_Init+0x314>)
 8008b80:	400b      	ands	r3, r1
 8008b82:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6819      	ldr	r1, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b92:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008b98:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 8008bac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008bb8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbe:	051b      	lsls	r3, r3, #20
 8008bc0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008bc6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8008be4:	f023 030f 	bic.w	r3, r3, #15
 8008be8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6859      	ldr	r1, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	69da      	ldr	r2, [r3, #28]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6899      	ldr	r1, [r3, #8]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	4b35      	ldr	r3, [pc, #212]	@ (8008ce8 <HAL_SAI_Init+0x318>)
 8008c14:	400b      	ands	r3, r1
 8008c16:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6899      	ldr	r1, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c22:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008c28:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8008c2e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8008c34:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008c3e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68d9      	ldr	r1, [r3, #12]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008c56:	400b      	ands	r3, r1
 8008c58:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68d9      	ldr	r1, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c68:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c6e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c70:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c76:	3b01      	subs	r3, #1
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a18      	ldr	r2, [pc, #96]	@ (8008cec <HAL_SAI_Init+0x31c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d119      	bne.n	8008cc2 <HAL_SAI_Init+0x2f2>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008c8e:	4b18      	ldr	r3, [pc, #96]	@ (8008cf0 <HAL_SAI_Init+0x320>)
 8008c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c92:	4a17      	ldr	r2, [pc, #92]	@ (8008cf0 <HAL_SAI_Init+0x320>)
 8008c94:	f023 0301 	bic.w	r3, r3, #1
 8008c98:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d10e      	bne.n	8008cc2 <HAL_SAI_Init+0x2f2>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cac:	3b01      	subs	r3, #1
 8008cae:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008cb0:	490f      	ldr	r1, [pc, #60]	@ (8008cf0 <HAL_SAI_Init+0x320>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8008cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8008cf0 <HAL_SAI_Init+0x320>)
 8008cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cba:	4a0d      	ldr	r2, [pc, #52]	@ (8008cf0 <HAL_SAI_Init+0x320>)
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	6453      	str	r3, [r2, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3720      	adds	r7, #32
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	f005c010 	.word	0xf005c010
 8008ce8:	fff88000 	.word	0xfff88000
 8008cec:	40015404 	.word	0x40015404
 8008cf0:	40015400 	.word	0x40015400

08008cf4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_SAI_Receive_DMA+0x1a>
 8008d08:	88fb      	ldrh	r3, [r7, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e079      	b.n	8008e06 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d172      	bne.n	8008e04 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_SAI_Receive_DMA+0x38>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e06c      	b.n	8008e06 <HAL_SAI_Receive_DMA+0x112>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	88fa      	ldrh	r2, [r7, #6]
 8008d3e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	88fa      	ldrh	r2, [r7, #6]
 8008d46:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2222      	movs	r2, #34	@ 0x22
 8008d56:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d60:	4a2b      	ldr	r2, [pc, #172]	@ (8008e10 <HAL_SAI_Receive_DMA+0x11c>)
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e14 <HAL_SAI_Receive_DMA+0x120>)
 8008d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d74:	4a28      	ldr	r2, [pc, #160]	@ (8008e18 <HAL_SAI_Receive_DMA+0x124>)
 8008d76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d7e:	2200      	movs	r2, #0
 8008d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	331c      	adds	r3, #28
 8008d8e:	4619      	mov	r1, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d94:	461a      	mov	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008d9c:	f7fb fedc 	bl	8004b58 <HAL_DMA_Start_IT>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d005      	beq.n	8008db2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e029      	b.n	8008e06 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008db2:	2100      	movs	r1, #0
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f83b 	bl	8008e30 <SAI_InterruptFlag>
 8008dba:	4601      	mov	r1, r0
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008dd8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d107      	bne.n	8008df8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008df6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	e000      	b.n	8008e06 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008e04:	2302      	movs	r3, #2
  }
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	08008f73 	.word	0x08008f73
 8008e14:	08008f15 	.word	0x08008f15
 8008e18:	08008f8f 	.word	0x08008f8f

08008e1c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d103      	bne.n	8008e4e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f043 0308 	orr.w	r3, r3, #8
 8008e4c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d10b      	bne.n	8008e6e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d003      	beq.n	8008e66 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d103      	bne.n	8008e6e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f043 0310 	orr.w	r3, r3, #16
 8008e6c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d003      	beq.n	8008e7e <SAI_InterruptFlag+0x4e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d104      	bne.n	8008e88 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e003      	b.n	8008e90 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f043 0304 	orr.w	r3, r3, #4
 8008e8e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008e90:	68fb      	ldr	r3, [r7, #12]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008ea8:	4b18      	ldr	r3, [pc, #96]	@ (8008f0c <SAI_Disable+0x6c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a18      	ldr	r2, [pc, #96]	@ (8008f10 <SAI_Disable+0x70>)
 8008eae:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb2:	0b1b      	lsrs	r3, r3, #12
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008eca:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10a      	bne.n	8008ee8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ed8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ee6:	e009      	b.n	8008efc <SAI_Disable+0x5c>
    }
    count--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e7      	bne.n	8008ecc <SAI_Disable+0x2c>

  return status;
 8008efc:	7afb      	ldrb	r3, [r7, #11]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000008 	.word	0x20000008
 8008f10:	95cbec1b 	.word	0x95cbec1b

08008f14 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f20:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	d01c      	beq.n	8008f64 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008f38:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008f42:	2100      	movs	r1, #0
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff ff73 	bl	8008e30 <SAI_InterruptFlag>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	43d9      	mvns	r1, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	400a      	ands	r2, r1
 8008f5a:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7f9 f993 	bl	8002290 <HAL_SAI_RxCpltCallback>
#endif
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f7f9 f963 	bl	800224c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fa2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008fba:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff ff6f 	bl	8008ea0 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff ff22 	bl	8008e1c <HAL_SAI_ErrorCallback>
#endif
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e095      	b.n	800911e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d108      	bne.n	800900c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009002:	d009      	beq.n	8009018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	61da      	str	r2, [r3, #28]
 800900a:	e005      	b.n	8009018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fa f9e2 	bl	80033fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800904e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009058:	d902      	bls.n	8009060 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e002      	b.n	8009066 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009064:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800906e:	d007      	beq.n	8009080 <HAL_SPI_Init+0xa0>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009078:	d002      	beq.n	8009080 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090c2:	ea42 0103 	orr.w	r1, r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	0c1b      	lsrs	r3, r3, #16
 80090dc:	f003 0204 	and.w	r2, r3, #4
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e4:	f003 0310 	and.w	r3, r3, #16
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ee:	f003 0308 	and.w	r3, r3, #8
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80090fc:	ea42 0103 	orr.w	r1, r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <LL_RCC_GetUSARTClockSource>:
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800912e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009132:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4013      	ands	r3, r2
}
 800913a:	4618      	mov	r0, r3
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <LL_RCC_GetLPUARTClockSource>:
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800914e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009152:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4013      	ands	r3, r2
}
 800915a:	4618      	mov	r0, r3
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b082      	sub	sp, #8
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e042      	b.n	80091fe <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7fa f82e 	bl	80031ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2224      	movs	r2, #36	@ 0x24
 8009194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0201 	bic.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fe33 	bl	8009e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fc08 	bl	80099cc <UART_SetConfig>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e01b      	b.n	80091fe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80091d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	689a      	ldr	r2, [r3, #8]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80091e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0201 	orr.w	r2, r2, #1
 80091f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 feb2 	bl	8009f60 <UART_CheckIdleState>
 80091fc:	4603      	mov	r3, r0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	@ 0x28
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800921c:	2b20      	cmp	r3, #32
 800921e:	d167      	bne.n	80092f0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_UART_Transmit_DMA+0x24>
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e060      	b.n	80092f2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	88fa      	ldrh	r2, [r7, #6]
 8009242:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2221      	movs	r2, #33	@ 0x21
 8009252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d028      	beq.n	80092b0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009262:	4a26      	ldr	r2, [pc, #152]	@ (80092fc <HAL_UART_Transmit_DMA+0xf4>)
 8009264:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800926a:	4a25      	ldr	r2, [pc, #148]	@ (8009300 <HAL_UART_Transmit_DMA+0xf8>)
 800926c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009272:	4a24      	ldr	r2, [pc, #144]	@ (8009304 <HAL_UART_Transmit_DMA+0xfc>)
 8009274:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800927a:	2200      	movs	r2, #0
 800927c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009286:	4619      	mov	r1, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3328      	adds	r3, #40	@ 0x28
 800928e:	461a      	mov	r2, r3
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	f7fb fc61 	bl	8004b58 <HAL_DMA_Start_IT>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d009      	beq.n	80092b0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2210      	movs	r2, #16
 80092a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e020      	b.n	80092f2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2240      	movs	r2, #64	@ 0x40
 80092b6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3308      	adds	r3, #8
 80092be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	e853 3f00 	ldrex	r3, [r3]
 80092c6:	613b      	str	r3, [r7, #16]
   return(result);
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3308      	adds	r3, #8
 80092d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d8:	623a      	str	r2, [r7, #32]
 80092da:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	69f9      	ldr	r1, [r7, #28]
 80092de:	6a3a      	ldr	r2, [r7, #32]
 80092e0:	e841 2300 	strex	r3, r2, [r1]
 80092e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e5      	bne.n	80092b8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	e000      	b.n	80092f2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80092f0:	2302      	movs	r3, #2
  }
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3728      	adds	r7, #40	@ 0x28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	0800a2dd 	.word	0x0800a2dd
 8009300:	0800a377 	.word	0x0800a377
 8009304:	0800a393 	.word	0x0800a393

08009308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b0ba      	sub	sp, #232	@ 0xe8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800932e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009332:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009336:	4013      	ands	r3, r2
 8009338:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800933c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d11b      	bne.n	800937c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d015      	beq.n	800937c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d105      	bne.n	8009368 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800935c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d009      	beq.n	800937c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 8300 	beq.w	8009972 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	4798      	blx	r3
      }
      return;
 800937a:	e2fa      	b.n	8009972 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800937c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8123 	beq.w	80095cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009386:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800938a:	4b8d      	ldr	r3, [pc, #564]	@ (80095c0 <HAL_UART_IRQHandler+0x2b8>)
 800938c:	4013      	ands	r3, r2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009392:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009396:	4b8b      	ldr	r3, [pc, #556]	@ (80095c4 <HAL_UART_IRQHandler+0x2bc>)
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8116 	beq.w	80095cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d011      	beq.n	80093d0 <HAL_UART_IRQHandler+0xc8>
 80093ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2201      	movs	r2, #1
 80093be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c6:	f043 0201 	orr.w	r2, r3, #1
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d011      	beq.n	8009400 <HAL_UART_IRQHandler+0xf8>
 80093dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2202      	movs	r2, #2
 80093ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f6:	f043 0204 	orr.w	r2, r3, #4
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009404:	f003 0304 	and.w	r3, r3, #4
 8009408:	2b00      	cmp	r3, #0
 800940a:	d011      	beq.n	8009430 <HAL_UART_IRQHandler+0x128>
 800940c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2204      	movs	r2, #4
 800941e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009426:	f043 0202 	orr.w	r2, r3, #2
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009434:	f003 0308 	and.w	r3, r3, #8
 8009438:	2b00      	cmp	r3, #0
 800943a:	d017      	beq.n	800946c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800943c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009440:	f003 0320 	and.w	r3, r3, #32
 8009444:	2b00      	cmp	r3, #0
 8009446:	d105      	bne.n	8009454 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009448:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800944c:	4b5c      	ldr	r3, [pc, #368]	@ (80095c0 <HAL_UART_IRQHandler+0x2b8>)
 800944e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00b      	beq.n	800946c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2208      	movs	r2, #8
 800945a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009462:	f043 0208 	orr.w	r2, r3, #8
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800946c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009470:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009474:	2b00      	cmp	r3, #0
 8009476:	d012      	beq.n	800949e <HAL_UART_IRQHandler+0x196>
 8009478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800947c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00c      	beq.n	800949e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800948c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009494:	f043 0220 	orr.w	r2, r3, #32
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 8266 	beq.w	8009976 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ae:	f003 0320 	and.w	r3, r3, #32
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d013      	beq.n	80094de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d105      	bne.n	80094ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d007      	beq.n	80094de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094f2:	2b40      	cmp	r3, #64	@ 0x40
 80094f4:	d005      	beq.n	8009502 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d054      	beq.n	80095ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fe84 	bl	800a210 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009512:	2b40      	cmp	r3, #64	@ 0x40
 8009514:	d146      	bne.n	80095a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800952c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800954e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800955a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1d9      	bne.n	8009516 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009568:	2b00      	cmp	r3, #0
 800956a:	d017      	beq.n	800959c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009572:	4a15      	ldr	r2, [pc, #84]	@ (80095c8 <HAL_UART_IRQHandler+0x2c0>)
 8009574:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800957c:	4618      	mov	r0, r3
 800957e:	f7fb fbc5 	bl	8004d0c <HAL_DMA_Abort_IT>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d019      	beq.n	80095bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009596:	4610      	mov	r0, r2
 8009598:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800959a:	e00f      	b.n	80095bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f9ff 	bl	80099a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a2:	e00b      	b.n	80095bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f9fb 	bl	80099a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095aa:	e007      	b.n	80095bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f9f7 	bl	80099a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80095ba:	e1dc      	b.n	8009976 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095bc:	bf00      	nop
    return;
 80095be:	e1da      	b.n	8009976 <HAL_UART_IRQHandler+0x66e>
 80095c0:	10000001 	.word	0x10000001
 80095c4:	04000120 	.word	0x04000120
 80095c8:	0800a413 	.word	0x0800a413

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	f040 8170 	bne.w	80098b6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095da:	f003 0310 	and.w	r3, r3, #16
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 8169 	beq.w	80098b6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8162 	beq.w	80098b6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2210      	movs	r2, #16
 80095f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009604:	2b40      	cmp	r3, #64	@ 0x40
 8009606:	f040 80d8 	bne.w	80097ba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 80af 	beq.w	8009780 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009628:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800962c:	429a      	cmp	r2, r3
 800962e:	f080 80a7 	bcs.w	8009780 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009638:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 8087 	bne.w	800975e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800966c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800967a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800967e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1da      	bne.n	8009650 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3308      	adds	r3, #8
 80096a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096ac:	f023 0301 	bic.w	r3, r3, #1
 80096b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3308      	adds	r3, #8
 80096ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e1      	bne.n	800969a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3308      	adds	r3, #8
 80096dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80096fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1e3      	bne.n	80096d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800972a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800972c:	f023 0310 	bic.w	r3, r3, #16
 8009730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800973e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009740:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009746:	e841 2300 	strex	r3, r2, [r1]
 800974a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800974c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e4      	bne.n	800971c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009758:	4618      	mov	r0, r3
 800975a:	f7fb fa78 	bl	8004c4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2202      	movs	r2, #2
 8009762:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009770:	b29b      	uxth	r3, r3
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	b29b      	uxth	r3, r3
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f91b 	bl	80099b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800977e:	e0fc      	b.n	800997a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800978a:	429a      	cmp	r2, r3
 800978c:	f040 80f5 	bne.w	800997a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b20      	cmp	r3, #32
 80097a0:	f040 80eb 	bne.w	800997a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f8fe 	bl	80099b4 <HAL_UARTEx_RxEventCallback>
      return;
 80097b8:	e0df      	b.n	800997a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80d1 	beq.w	800997e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80097dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 80cc 	beq.w	800997e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009808:	647b      	str	r3, [r7, #68]	@ 0x44
 800980a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800980e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e4      	bne.n	80097e6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3308      	adds	r3, #8
 8009822:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	623b      	str	r3, [r7, #32]
   return(result);
 800982c:	6a3b      	ldr	r3, [r7, #32]
 800982e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009832:	f023 0301 	bic.w	r3, r3, #1
 8009836:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3308      	adds	r3, #8
 8009840:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009844:	633a      	str	r2, [r7, #48]	@ 0x30
 8009846:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800984a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e1      	bne.n	800981c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	60fb      	str	r3, [r7, #12]
   return(result);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f023 0310 	bic.w	r3, r3, #16
 8009880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	69b9      	ldr	r1, [r7, #24]
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	617b      	str	r3, [r7, #20]
   return(result);
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e4      	bne.n	800986c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2202      	movs	r2, #2
 80098a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f880 	bl	80099b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098b4:	e063      	b.n	800997e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00e      	beq.n	80098e0 <HAL_UART_IRQHandler+0x5d8>
 80098c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fdd7 	bl	800a48c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098de:	e051      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d014      	beq.n	8009916 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d105      	bne.n	8009904 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009908:	2b00      	cmp	r3, #0
 800990a:	d03a      	beq.n	8009982 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
    }
    return;
 8009914:	e035      	b.n	8009982 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800991a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991e:	2b00      	cmp	r3, #0
 8009920:	d009      	beq.n	8009936 <HAL_UART_IRQHandler+0x62e>
 8009922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fd81 	bl	800a436 <UART_EndTransmit_IT>
    return;
 8009934:	e026      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800993a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <HAL_UART_IRQHandler+0x64e>
 8009942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009946:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fdb0 	bl	800a4b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009954:	e016      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800995a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d010      	beq.n	8009984 <HAL_UART_IRQHandler+0x67c>
 8009962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009966:	2b00      	cmp	r3, #0
 8009968:	da0c      	bge.n	8009984 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fd98 	bl	800a4a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009970:	e008      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
      return;
 8009972:	bf00      	nop
 8009974:	e006      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
    return;
 8009976:	bf00      	nop
 8009978:	e004      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
      return;
 800997a:	bf00      	nop
 800997c:	e002      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
      return;
 800997e:	bf00      	nop
 8009980:	e000      	b.n	8009984 <HAL_UART_IRQHandler+0x67c>
    return;
 8009982:	bf00      	nop
  }
}
 8009984:	37e8      	adds	r7, #232	@ 0xe8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop

0800998c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099d0:	b08c      	sub	sp, #48	@ 0x30
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	431a      	orrs	r2, r3
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4baf      	ldr	r3, [pc, #700]	@ (8009cb8 <UART_SetConfig+0x2ec>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	6812      	ldr	r2, [r2, #0]
 8009a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4aa4      	ldr	r2, [pc, #656]	@ (8009cbc <UART_SetConfig+0x2f0>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d004      	beq.n	8009a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a34:	4313      	orrs	r3, r2
 8009a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009a42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a56:	f023 010f 	bic.w	r1, r3, #15
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a95      	ldr	r2, [pc, #596]	@ (8009cc0 <UART_SetConfig+0x2f4>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d125      	bne.n	8009abc <UART_SetConfig+0xf0>
 8009a70:	2003      	movs	r0, #3
 8009a72:	f7ff fb58 	bl	8009126 <LL_RCC_GetUSARTClockSource>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d81b      	bhi.n	8009ab4 <UART_SetConfig+0xe8>
 8009a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a84 <UART_SetConfig+0xb8>)
 8009a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a82:	bf00      	nop
 8009a84:	08009a95 	.word	0x08009a95
 8009a88:	08009aa5 	.word	0x08009aa5
 8009a8c:	08009a9d 	.word	0x08009a9d
 8009a90:	08009aad 	.word	0x08009aad
 8009a94:	2301      	movs	r3, #1
 8009a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009a9a:	e042      	b.n	8009b22 <UART_SetConfig+0x156>
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aa2:	e03e      	b.n	8009b22 <UART_SetConfig+0x156>
 8009aa4:	2304      	movs	r3, #4
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aaa:	e03a      	b.n	8009b22 <UART_SetConfig+0x156>
 8009aac:	2308      	movs	r3, #8
 8009aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ab2:	e036      	b.n	8009b22 <UART_SetConfig+0x156>
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aba:	e032      	b.n	8009b22 <UART_SetConfig+0x156>
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a7e      	ldr	r2, [pc, #504]	@ (8009cbc <UART_SetConfig+0x2f0>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d12a      	bne.n	8009b1c <UART_SetConfig+0x150>
 8009ac6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009aca:	f7ff fb3c 	bl	8009146 <LL_RCC_GetLPUARTClockSource>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ad4:	d01a      	beq.n	8009b0c <UART_SetConfig+0x140>
 8009ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ada:	d81b      	bhi.n	8009b14 <UART_SetConfig+0x148>
 8009adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae0:	d00c      	beq.n	8009afc <UART_SetConfig+0x130>
 8009ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae6:	d815      	bhi.n	8009b14 <UART_SetConfig+0x148>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <UART_SetConfig+0x128>
 8009aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009af0:	d008      	beq.n	8009b04 <UART_SetConfig+0x138>
 8009af2:	e00f      	b.n	8009b14 <UART_SetConfig+0x148>
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afa:	e012      	b.n	8009b22 <UART_SetConfig+0x156>
 8009afc:	2302      	movs	r3, #2
 8009afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b02:	e00e      	b.n	8009b22 <UART_SetConfig+0x156>
 8009b04:	2304      	movs	r3, #4
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0a:	e00a      	b.n	8009b22 <UART_SetConfig+0x156>
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b12:	e006      	b.n	8009b22 <UART_SetConfig+0x156>
 8009b14:	2310      	movs	r3, #16
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b1a:	e002      	b.n	8009b22 <UART_SetConfig+0x156>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a65      	ldr	r2, [pc, #404]	@ (8009cbc <UART_SetConfig+0x2f0>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	f040 8097 	bne.w	8009c5c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b32:	2b08      	cmp	r3, #8
 8009b34:	d823      	bhi.n	8009b7e <UART_SetConfig+0x1b2>
 8009b36:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <UART_SetConfig+0x170>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b7f 	.word	0x08009b7f
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b7f 	.word	0x08009b7f
 8009b4c:	08009b6f 	.word	0x08009b6f
 8009b50:	08009b7f 	.word	0x08009b7f
 8009b54:	08009b7f 	.word	0x08009b7f
 8009b58:	08009b7f 	.word	0x08009b7f
 8009b5c:	08009b77 	.word	0x08009b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b60:	f7fd f8a6 	bl	8006cb0 <HAL_RCC_GetPCLK1Freq>
 8009b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b66:	e010      	b.n	8009b8a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b68:	4b56      	ldr	r3, [pc, #344]	@ (8009cc4 <UART_SetConfig+0x2f8>)
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b6c:	e00d      	b.n	8009b8a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b6e:	f7fd f81f 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8009b72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b74:	e009      	b.n	8009b8a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b7c:	e005      	b.n	8009b8a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 812b 	beq.w	8009de8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b96:	4a4c      	ldr	r2, [pc, #304]	@ (8009cc8 <UART_SetConfig+0x2fc>)
 8009b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ba4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	685a      	ldr	r2, [r3, #4]
 8009baa:	4613      	mov	r3, r2
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	4413      	add	r3, r2
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d305      	bcc.n	8009bc2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d903      	bls.n	8009bca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bc8:	e10e      	b.n	8009de8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bcc:	2200      	movs	r2, #0
 8009bce:	60bb      	str	r3, [r7, #8]
 8009bd0:	60fa      	str	r2, [r7, #12]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8009cc8 <UART_SetConfig+0x2fc>)
 8009bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	2200      	movs	r2, #0
 8009be0:	603b      	str	r3, [r7, #0]
 8009be2:	607a      	str	r2, [r7, #4]
 8009be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bec:	f7f6 fe06 	bl	80007fc <__aeabi_uldivmod>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	f04f 0200 	mov.w	r2, #0
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	020b      	lsls	r3, r1, #8
 8009c02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c06:	0202      	lsls	r2, r0, #8
 8009c08:	6979      	ldr	r1, [r7, #20]
 8009c0a:	6849      	ldr	r1, [r1, #4]
 8009c0c:	0849      	lsrs	r1, r1, #1
 8009c0e:	2000      	movs	r0, #0
 8009c10:	460c      	mov	r4, r1
 8009c12:	4605      	mov	r5, r0
 8009c14:	eb12 0804 	adds.w	r8, r2, r4
 8009c18:	eb43 0905 	adc.w	r9, r3, r5
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	469a      	mov	sl, r3
 8009c24:	4693      	mov	fp, r2
 8009c26:	4652      	mov	r2, sl
 8009c28:	465b      	mov	r3, fp
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fde5 	bl	80007fc <__aeabi_uldivmod>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4613      	mov	r3, r2
 8009c38:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c40:	d308      	bcc.n	8009c54 <UART_SetConfig+0x288>
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c48:	d204      	bcs.n	8009c54 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6a3a      	ldr	r2, [r7, #32]
 8009c50:	60da      	str	r2, [r3, #12]
 8009c52:	e0c9      	b.n	8009de8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c5a:	e0c5      	b.n	8009de8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c64:	d16d      	bne.n	8009d42 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009c66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	2b07      	cmp	r3, #7
 8009c6e:	d82d      	bhi.n	8009ccc <UART_SetConfig+0x300>
 8009c70:	a201      	add	r2, pc, #4	@ (adr r2, 8009c78 <UART_SetConfig+0x2ac>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009c99 	.word	0x08009c99
 8009c7c:	08009ca1 	.word	0x08009ca1
 8009c80:	08009ccd 	.word	0x08009ccd
 8009c84:	08009ca7 	.word	0x08009ca7
 8009c88:	08009ccd 	.word	0x08009ccd
 8009c8c:	08009ccd 	.word	0x08009ccd
 8009c90:	08009ccd 	.word	0x08009ccd
 8009c94:	08009caf 	.word	0x08009caf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c98:	f7fd f820 	bl	8006cdc <HAL_RCC_GetPCLK2Freq>
 8009c9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009c9e:	e01b      	b.n	8009cd8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ca0:	4b08      	ldr	r3, [pc, #32]	@ (8009cc4 <UART_SetConfig+0x2f8>)
 8009ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ca4:	e018      	b.n	8009cd8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ca6:	f7fc ff83 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8009caa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cac:	e014      	b.n	8009cd8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009cb4:	e010      	b.n	8009cd8 <UART_SetConfig+0x30c>
 8009cb6:	bf00      	nop
 8009cb8:	cfff69f3 	.word	0xcfff69f3
 8009cbc:	40008000 	.word	0x40008000
 8009cc0:	40013800 	.word	0x40013800
 8009cc4:	00f42400 	.word	0x00f42400
 8009cc8:	08014238 	.word	0x08014238
      default:
        pclk = 0U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009cd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 8084 	beq.w	8009de8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce4:	4a4b      	ldr	r2, [pc, #300]	@ (8009e14 <UART_SetConfig+0x448>)
 8009ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cea:	461a      	mov	r2, r3
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cf2:	005a      	lsls	r2, r3, #1
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	085b      	lsrs	r3, r3, #1
 8009cfa:	441a      	add	r2, r3
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d04:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	2b0f      	cmp	r3, #15
 8009d0a:	d916      	bls.n	8009d3a <UART_SetConfig+0x36e>
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d12:	d212      	bcs.n	8009d3a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f023 030f 	bic.w	r3, r3, #15
 8009d1c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	f003 0307 	and.w	r3, r3, #7
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	8bfb      	ldrh	r3, [r7, #30]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	8bfa      	ldrh	r2, [r7, #30]
 8009d36:	60da      	str	r2, [r3, #12]
 8009d38:	e056      	b.n	8009de8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009d40:	e052      	b.n	8009de8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d46:	3b01      	subs	r3, #1
 8009d48:	2b07      	cmp	r3, #7
 8009d4a:	d822      	bhi.n	8009d92 <UART_SetConfig+0x3c6>
 8009d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d54 <UART_SetConfig+0x388>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d75 	.word	0x08009d75
 8009d58:	08009d7d 	.word	0x08009d7d
 8009d5c:	08009d93 	.word	0x08009d93
 8009d60:	08009d83 	.word	0x08009d83
 8009d64:	08009d93 	.word	0x08009d93
 8009d68:	08009d93 	.word	0x08009d93
 8009d6c:	08009d93 	.word	0x08009d93
 8009d70:	08009d8b 	.word	0x08009d8b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d74:	f7fc ffb2 	bl	8006cdc <HAL_RCC_GetPCLK2Freq>
 8009d78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d7a:	e010      	b.n	8009d9e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d7c:	4b26      	ldr	r3, [pc, #152]	@ (8009e18 <UART_SetConfig+0x44c>)
 8009d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d80:	e00d      	b.n	8009d9e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d82:	f7fc ff15 	bl	8006bb0 <HAL_RCC_GetSysClockFreq>
 8009d86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d88:	e009      	b.n	8009d9e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d90:	e005      	b.n	8009d9e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d021      	beq.n	8009de8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da8:	4a1a      	ldr	r2, [pc, #104]	@ (8009e14 <UART_SetConfig+0x448>)
 8009daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dae:	461a      	mov	r2, r3
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	441a      	add	r2, r3
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dc8:	6a3b      	ldr	r3, [r7, #32]
 8009dca:	2b0f      	cmp	r3, #15
 8009dcc:	d909      	bls.n	8009de2 <UART_SetConfig+0x416>
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dd4:	d205      	bcs.n	8009de2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60da      	str	r2, [r3, #12]
 8009de0:	e002      	b.n	8009de8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2200      	movs	r2, #0
 8009e02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3730      	adds	r7, #48	@ 0x30
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e12:	bf00      	nop
 8009e14:	08014238 	.word	0x08014238
 8009e18:	00f42400 	.word	0x00f42400

08009e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e28:	f003 0308 	and.w	r3, r3, #8
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00a      	beq.n	8009e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8e:	f003 0304 	and.w	r3, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed2:	f003 0320 	and.w	r3, r3, #32
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01a      	beq.n	8009f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f1a:	d10a      	bne.n	8009f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00a      	beq.n	8009f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	430a      	orrs	r2, r1
 8009f52:	605a      	str	r2, [r3, #4]
  }
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b098      	sub	sp, #96	@ 0x60
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f70:	f7f9 fce2 	bl	8003938 <HAL_GetTick>
 8009f74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0308 	and.w	r3, r3, #8
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d12f      	bne.n	8009fe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f88e 	bl	800a0b4 <UART_WaitOnFlagUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d022      	beq.n	8009fe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e6      	bne.n	8009f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	e063      	b.n	800a0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d149      	bne.n	800a086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ff2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f857 	bl	800a0b4 <UART_WaitOnFlagUntilTimeout>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d03c      	beq.n	800a086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	623b      	str	r3, [r7, #32]
   return(result);
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a02c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e6      	bne.n	800a00c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f023 0301 	bic.w	r3, r3, #1
 800a054:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a05e:	61fa      	str	r2, [r7, #28]
 800a060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	69b9      	ldr	r1, [r7, #24]
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	617b      	str	r3, [r7, #20]
   return(result);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e5      	bne.n	800a03e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e012      	b.n	800a0ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2220      	movs	r2, #32
 800a092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3758      	adds	r7, #88	@ 0x58
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0c4:	e04f      	b.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0cc:	d04b      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ce:	f7f9 fc33 	bl	8003938 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	69ba      	ldr	r2, [r7, #24]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d302      	bcc.n	800a0e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e04e      	b.n	800a186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d037      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b80      	cmp	r3, #128	@ 0x80
 800a0fa:	d034      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	2b40      	cmp	r3, #64	@ 0x40
 800a100:	d031      	beq.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	f003 0308 	and.w	r3, r3, #8
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d110      	bne.n	800a132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2208      	movs	r2, #8
 800a116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 f879 	bl	800a210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2208      	movs	r2, #8
 800a122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e029      	b.n	800a186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a13c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a140:	d111      	bne.n	800a166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a14a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 f85f 	bl	800a210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2220      	movs	r2, #32
 800a156:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e00f      	b.n	800a186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69da      	ldr	r2, [r3, #28]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4013      	ands	r3, r2
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	429a      	cmp	r2, r3
 800a174:	bf0c      	ite	eq
 800a176:	2301      	moveq	r3, #1
 800a178:	2300      	movne	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	461a      	mov	r2, r3
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	429a      	cmp	r2, r3
 800a182:	d0a0      	beq.n	800a0c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a18e:	b480      	push	{r7}
 800a190:	b08f      	sub	sp, #60	@ 0x3c
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	e853 3f00 	ldrex	r3, [r3]
 800a1a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1bc:	e841 2300 	strex	r3, r2, [r1]
 800a1c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1e6      	bne.n	800a196 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a1de:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e8:	61ba      	str	r2, [r7, #24]
 800a1ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	6979      	ldr	r1, [r7, #20]
 800a1ee:	69ba      	ldr	r2, [r7, #24]
 800a1f0:	e841 2300 	strex	r3, r2, [r1]
 800a1f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e5      	bne.n	800a1c8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a204:	bf00      	nop
 800a206:	373c      	adds	r7, #60	@ 0x3c
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a210:	b480      	push	{r7}
 800a212:	b095      	sub	sp, #84	@ 0x54
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	461a      	mov	r2, r3
 800a234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a236:	643b      	str	r3, [r7, #64]	@ 0x40
 800a238:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a23c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e6      	bne.n	800a218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3308      	adds	r3, #8
 800a250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	61fb      	str	r3, [r7, #28]
   return(result);
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a260:	f023 0301 	bic.w	r3, r3, #1
 800a264:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3308      	adds	r3, #8
 800a26c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a26e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e3      	bne.n	800a24a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a286:	2b01      	cmp	r3, #1
 800a288:	d118      	bne.n	800a2bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	60bb      	str	r3, [r7, #8]
   return(result);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f023 0310 	bic.w	r3, r3, #16
 800a29e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6979      	ldr	r1, [r7, #20]
 800a2ae:	69ba      	ldr	r2, [r7, #24]
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e6      	bne.n	800a28a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2220      	movs	r2, #32
 800a2c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a2d0:	bf00      	nop
 800a2d2:	3754      	adds	r7, #84	@ 0x54
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b090      	sub	sp, #64	@ 0x40
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0320 	and.w	r3, r3, #32
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d137      	bne.n	800a368 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3308      	adds	r3, #8
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	e853 3f00 	ldrex	r3, [r3]
 800a30e:	623b      	str	r3, [r7, #32]
   return(result);
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a316:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3308      	adds	r3, #8
 800a31e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a320:	633a      	str	r2, [r7, #48]	@ 0x30
 800a322:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a328:	e841 2300 	strex	r3, r2, [r1]
 800a32c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e5      	bne.n	800a300 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	60fb      	str	r3, [r7, #12]
   return(result);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a348:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a352:	61fb      	str	r3, [r7, #28]
 800a354:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	69b9      	ldr	r1, [r7, #24]
 800a358:	69fa      	ldr	r2, [r7, #28]
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	617b      	str	r3, [r7, #20]
   return(result);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e6      	bne.n	800a334 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a366:	e002      	b.n	800a36e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a368:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a36a:	f7f7 ff09 	bl	8002180 <HAL_UART_TxCpltCallback>
}
 800a36e:	bf00      	nop
 800a370:	3740      	adds	r7, #64	@ 0x40
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a382:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7ff fb01 	bl	800998c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a38a:	bf00      	nop
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b086      	sub	sp, #24
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ba:	2b80      	cmp	r3, #128	@ 0x80
 800a3bc:	d109      	bne.n	800a3d2 <UART_DMAError+0x40>
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	2b21      	cmp	r3, #33	@ 0x21
 800a3c2:	d106      	bne.n	800a3d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a3cc:	6978      	ldr	r0, [r7, #20]
 800a3ce:	f7ff fede 	bl	800a18e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3dc:	2b40      	cmp	r3, #64	@ 0x40
 800a3de:	d109      	bne.n	800a3f4 <UART_DMAError+0x62>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b22      	cmp	r3, #34	@ 0x22
 800a3e4:	d106      	bne.n	800a3f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a3ee:	6978      	ldr	r0, [r7, #20]
 800a3f0:	f7ff ff0e 	bl	800a210 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3fa:	f043 0210 	orr.w	r2, r3, #16
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a404:	6978      	ldr	r0, [r7, #20]
 800a406:	f7ff facb 	bl	80099a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a40a:	bf00      	nop
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7ff fab9 	bl	80099a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b088      	sub	sp, #32
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	e853 3f00 	ldrex	r3, [r3]
 800a44a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a452:	61fb      	str	r3, [r7, #28]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	461a      	mov	r2, r3
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	61bb      	str	r3, [r7, #24]
 800a45e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a460:	6979      	ldr	r1, [r7, #20]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	e841 2300 	strex	r3, r2, [r1]
 800a468:	613b      	str	r3, [r7, #16]
   return(result);
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e6      	bne.n	800a43e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2220      	movs	r2, #32
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7f7 fe7e 	bl	8002180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a484:	bf00      	nop
 800a486:	3720      	adds	r7, #32
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d101      	bne.n	800a4de <HAL_UARTEx_DisableFifoMode+0x16>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e027      	b.n	800a52e <HAL_UARTEx_DisableFifoMode+0x66>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2224      	movs	r2, #36	@ 0x24
 800a4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0201 	bic.w	r2, r2, #1
 800a504:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a50c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2220      	movs	r2, #32
 800a520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d101      	bne.n	800a552 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a54e:	2302      	movs	r3, #2
 800a550:	e02d      	b.n	800a5ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2224      	movs	r2, #36	@ 0x24
 800a55e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 0201 	bic.w	r2, r2, #1
 800a578:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f850 	bl	800a634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d101      	bne.n	800a5ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e02d      	b.n	800a62a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2224      	movs	r2, #36	@ 0x24
 800a5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0201 	bic.w	r2, r2, #1
 800a5f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f812 	bl	800a634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a640:	2b00      	cmp	r3, #0
 800a642:	d108      	bne.n	800a656 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a654:	e031      	b.n	800a6ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a656:	2308      	movs	r3, #8
 800a658:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a65a:	2308      	movs	r3, #8
 800a65c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	0e5b      	lsrs	r3, r3, #25
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	0f5b      	lsrs	r3, r3, #29
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	7b3a      	ldrb	r2, [r7, #12]
 800a682:	4911      	ldr	r1, [pc, #68]	@ (800a6c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a684:	5c8a      	ldrb	r2, [r1, r2]
 800a686:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a68a:	7b3a      	ldrb	r2, [r7, #12]
 800a68c:	490f      	ldr	r1, [pc, #60]	@ (800a6cc <UARTEx_SetNbDataToProcess+0x98>)
 800a68e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a690:	fb93 f3f2 	sdiv	r3, r3, r2
 800a694:	b29a      	uxth	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	7b7a      	ldrb	r2, [r7, #13]
 800a6a0:	4909      	ldr	r1, [pc, #36]	@ (800a6c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a6a2:	5c8a      	ldrb	r2, [r1, r2]
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6a8:	7b7a      	ldrb	r2, [r7, #13]
 800a6aa:	4908      	ldr	r1, [pc, #32]	@ (800a6cc <UARTEx_SetNbDataToProcess+0x98>)
 800a6ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a6ba:	bf00      	nop
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	08014250 	.word	0x08014250
 800a6cc:	08014258 	.word	0x08014258

0800a6d0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b088      	sub	sp, #32
 800a6d4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	2218      	movs	r2, #24
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fba8 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6e8:	233f      	movs	r3, #63	@ 0x3f
 800a6ea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a6ec:	2381      	movs	r3, #129	@ 0x81
 800a6ee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a6f0:	1dfb      	adds	r3, r7, #7
 800a6f2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6f8:	f107 0308 	add.w	r3, r7, #8
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	4618      	mov	r0, r3
 800a700:	f001 fa58 	bl	800bbb4 <hci_send_req>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	da01      	bge.n	800a70e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a70a:	23ff      	movs	r3, #255	@ 0xff
 800a70c:	e000      	b.n	800a710 <aci_gap_set_non_discoverable+0x40>
  return status;
 800a70e:	79fb      	ldrb	r3, [r7, #7]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3720      	adds	r7, #32
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800a718:	b5b0      	push	{r4, r5, r7, lr}
 800a71a:	b0ce      	sub	sp, #312	@ 0x138
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4605      	mov	r5, r0
 800a720:	460c      	mov	r4, r1
 800a722:	4610      	mov	r0, r2
 800a724:	4619      	mov	r1, r3
 800a726:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a72a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a72e:	462a      	mov	r2, r5
 800a730:	701a      	strb	r2, [r3, #0]
 800a732:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a736:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a73a:	4622      	mov	r2, r4
 800a73c:	801a      	strh	r2, [r3, #0]
 800a73e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a742:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800a746:	4602      	mov	r2, r0
 800a748:	801a      	strh	r2, [r3, #0]
 800a74a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a74e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a752:	460a      	mov	r2, r1
 800a754:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a756:	f107 0310 	add.w	r3, r7, #16
 800a75a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a75e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800a762:	3308      	adds	r3, #8
 800a764:	f107 0210 	add.w	r2, r7, #16
 800a768:	4413      	add	r3, r2
 800a76a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a76e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a772:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800a776:	4413      	add	r3, r2
 800a778:	3309      	adds	r3, #9
 800a77a:	f107 0210 	add.w	r2, r7, #16
 800a77e:	4413      	add	r3, r2
 800a780:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a784:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a788:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a78c:	2200      	movs	r2, #0
 800a78e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800a796:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a79a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a79e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800a7a2:	7812      	ldrb	r2, [r2, #0]
 800a7a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a7a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800a7b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a7b4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a7b8:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800a7bc:	8812      	ldrh	r2, [r2, #0]
 800a7be:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a7c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7c6:	3302      	adds	r3, #2
 800a7c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800a7cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a7d0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a7d4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800a7d8:	8812      	ldrh	r2, [r2, #0]
 800a7da:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a7de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7e2:	3302      	adds	r3, #2
 800a7e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800a7e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a7ec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a7f0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a7f4:	7812      	ldrb	r2, [r2, #0]
 800a7f6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a7f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800a802:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a806:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800a80a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a80c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a810:	3301      	adds	r3, #1
 800a812:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800a816:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a81a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a81e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a820:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a824:	3301      	adds	r3, #1
 800a826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800a82a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a82e:	3308      	adds	r3, #8
 800a830:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a834:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800a838:	4618      	mov	r0, r3
 800a83a:	f001 faed 	bl	800be18 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800a83e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800a842:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a846:	4413      	add	r3, r2
 800a848:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800a84c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a850:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a854:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a856:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a85a:	3301      	adds	r3, #1
 800a85c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800a860:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a864:	3301      	adds	r3, #1
 800a866:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a86a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 fad2 	bl	800be18 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a874:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800a878:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a87c:	4413      	add	r3, r2
 800a87e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800a882:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a886:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800a88a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a88c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a890:	3302      	adds	r3, #2
 800a892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800a896:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a89a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800a89e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a8a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8a4:	3302      	adds	r3, #2
 800a8a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a8aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8ae:	2218      	movs	r2, #24
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f001 fac0 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a8b8:	233f      	movs	r3, #63	@ 0x3f
 800a8ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800a8be:	2383      	movs	r3, #131	@ 0x83
 800a8c0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a8c4:	f107 0310 	add.w	r3, r7, #16
 800a8c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a8cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a8d4:	f107 030f 	add.w	r3, r7, #15
 800a8d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a8e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 f963 	bl	800bbb4 <hci_send_req>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da01      	bge.n	800a8f8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800a8f4:	23ff      	movs	r3, #255	@ 0xff
 800a8f6:	e004      	b.n	800a902 <aci_gap_set_discoverable+0x1ea>
  return status;
 800a8f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a8fc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a900:	781b      	ldrb	r3, [r3, #0]
}
 800a902:	4618      	mov	r0, r3
 800a904:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a908:	46bd      	mov	sp, r7
 800a90a:	bdb0      	pop	{r4, r5, r7, pc}

0800a90c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b0cc      	sub	sp, #304	@ 0x130
 800a910:	af00      	add	r7, sp, #0
 800a912:	4602      	mov	r2, r0
 800a914:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a918:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a91c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a91e:	f107 0310 	add.w	r3, r7, #16
 800a922:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a926:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a92a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800a938:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a93c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a940:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a944:	7812      	ldrb	r2, [r2, #0]
 800a946:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a948:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a94c:	3301      	adds	r3, #1
 800a94e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a952:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a956:	2218      	movs	r2, #24
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fa6c 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a960:	233f      	movs	r3, #63	@ 0x3f
 800a962:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800a966:	2385      	movs	r3, #133	@ 0x85
 800a968:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a96c:	f107 0310 	add.w	r3, r7, #16
 800a970:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a974:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a978:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a97c:	f107 030f 	add.w	r3, r7, #15
 800a980:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a984:	2301      	movs	r3, #1
 800a986:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a98a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f001 f90f 	bl	800bbb4 <hci_send_req>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da01      	bge.n	800a9a0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800a99c:	23ff      	movs	r3, #255	@ 0xff
 800a99e:	e004      	b.n	800a9aa <aci_gap_set_io_capability+0x9e>
  return status;
 800a9a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a9a8:	781b      	ldrb	r3, [r3, #0]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a9b4:	b5b0      	push	{r4, r5, r7, lr}
 800a9b6:	b0cc      	sub	sp, #304	@ 0x130
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	460c      	mov	r4, r1
 800a9be:	4610      	mov	r0, r2
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9c6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9d2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a9d6:	4622      	mov	r2, r4
 800a9d8:	701a      	strb	r2, [r3, #0]
 800a9da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9de:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a9ee:	460a      	mov	r2, r1
 800a9f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a9f2:	f107 0310 	add.w	r3, r7, #16
 800a9f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a9fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800aa0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa14:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800aa18:	7812      	ldrb	r2, [r2, #0]
 800aa1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa20:	3301      	adds	r3, #1
 800aa22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800aa26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa2e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aa36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800aa40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa48:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800aa4c:	7812      	ldrb	r2, [r2, #0]
 800aa4e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aa50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa54:	3301      	adds	r3, #1
 800aa56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800aa5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa62:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800aa6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa6e:	3301      	adds	r3, #1
 800aa70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800aa74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa78:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800aa7c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800aa7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa82:	3301      	adds	r3, #1
 800aa84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800aa88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa8c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800aa90:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800aa92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa96:	3301      	adds	r3, #1
 800aa98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800aa9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aaa0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800aaa4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800aaa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aaaa:	3301      	adds	r3, #1
 800aaac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800aab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aab4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800aab8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800aabc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aac0:	3304      	adds	r3, #4
 800aac2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800aac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aaca:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800aace:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800aad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aad4:	3301      	adds	r3, #1
 800aad6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aada:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aade:	2218      	movs	r2, #24
 800aae0:	2100      	movs	r1, #0
 800aae2:	4618      	mov	r0, r3
 800aae4:	f001 f9a8 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aae8:	233f      	movs	r3, #63	@ 0x3f
 800aaea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800aaee:	2386      	movs	r3, #134	@ 0x86
 800aaf0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800aaf4:	f107 0310 	add.w	r3, r7, #16
 800aaf8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800aafc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab00:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ab04:	f107 030f 	add.w	r3, r7, #15
 800ab08:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab16:	2100      	movs	r1, #0
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f001 f84b 	bl	800bbb4 <hci_send_req>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	da01      	bge.n	800ab28 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800ab24:	23ff      	movs	r3, #255	@ 0xff
 800ab26:	e004      	b.n	800ab32 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800ab28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab2c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ab30:	781b      	ldrb	r3, [r3, #0]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bdb0      	pop	{r4, r5, r7, pc}

0800ab3c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b0cc      	sub	sp, #304	@ 0x130
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4602      	mov	r2, r0
 800ab44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab48:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ab4c:	6019      	str	r1, [r3, #0]
 800ab4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab52:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ab56:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800ab58:	f107 0310 	add.w	r3, r7, #16
 800ab5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ab60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ab72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab7a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ab7e:	8812      	ldrh	r2, [r2, #0]
 800ab80:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ab82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab86:	3302      	adds	r3, #2
 800ab88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800ab8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab94:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ab98:	6812      	ldr	r2, [r2, #0]
 800ab9a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800ab9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aba2:	3304      	adds	r3, #4
 800aba4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aba8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abac:	2218      	movs	r2, #24
 800abae:	2100      	movs	r1, #0
 800abb0:	4618      	mov	r0, r3
 800abb2:	f001 f941 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800abb6:	233f      	movs	r3, #63	@ 0x3f
 800abb8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800abbc:	2388      	movs	r3, #136	@ 0x88
 800abbe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800abc2:	f107 0310 	add.w	r3, r7, #16
 800abc6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800abca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800abce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800abd2:	f107 030f 	add.w	r3, r7, #15
 800abd6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800abda:	2301      	movs	r3, #1
 800abdc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800abe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abe4:	2100      	movs	r1, #0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 ffe4 	bl	800bbb4 <hci_send_req>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da01      	bge.n	800abf6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800abf2:	23ff      	movs	r3, #255	@ 0xff
 800abf4:	e004      	b.n	800ac00 <aci_gap_pass_key_resp+0xc4>
  return status;
 800abf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abfa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800abfe:	781b      	ldrb	r3, [r3, #0]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800ac0a:	b590      	push	{r4, r7, lr}
 800ac0c:	b0cd      	sub	sp, #308	@ 0x134
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	4604      	mov	r4, r0
 800ac12:	4608      	mov	r0, r1
 800ac14:	4611      	mov	r1, r2
 800ac16:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ac1a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac24:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ac28:	4622      	mov	r2, r4
 800ac2a:	701a      	strb	r2, [r3, #0]
 800ac2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac30:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ac34:	4602      	mov	r2, r0
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac3c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ac40:	460a      	mov	r2, r1
 800ac42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ac44:	f107 0310 	add.w	r3, r7, #16
 800ac48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ac4c:	f107 0308 	add.w	r3, r7, #8
 800ac50:	2207      	movs	r2, #7
 800ac52:	2100      	movs	r1, #0
 800ac54:	4618      	mov	r0, r3
 800ac56:	f001 f8ef 	bl	800be38 <Osal_MemSet>
  int index_input = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800ac60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ac64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ac68:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ac6c:	7812      	ldrb	r2, [r2, #0]
 800ac6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ac70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ac74:	3301      	adds	r3, #1
 800ac76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ac7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ac7e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ac82:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ac86:	7812      	ldrb	r2, [r2, #0]
 800ac88:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ac8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ac8e:	3301      	adds	r3, #1
 800ac90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ac94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ac98:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ac9c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800aca0:	7812      	ldrb	r2, [r2, #0]
 800aca2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aca8:	3301      	adds	r3, #1
 800acaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800acae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800acb2:	2218      	movs	r2, #24
 800acb4:	2100      	movs	r1, #0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f001 f8be 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800acbc:	233f      	movs	r3, #63	@ 0x3f
 800acbe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800acc2:	238a      	movs	r3, #138	@ 0x8a
 800acc4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800acc8:	f107 0310 	add.w	r3, r7, #16
 800accc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800acd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800acd4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800acd8:	f107 0308 	add.w	r3, r7, #8
 800acdc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ace0:	2307      	movs	r3, #7
 800ace2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ace6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800acea:	2100      	movs	r1, #0
 800acec:	4618      	mov	r0, r3
 800acee:	f000 ff61 	bl	800bbb4 <hci_send_req>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	da01      	bge.n	800acfc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800acf8:	23ff      	movs	r3, #255	@ 0xff
 800acfa:	e02e      	b.n	800ad5a <aci_gap_init+0x150>
  if ( resp.Status )
 800acfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad00:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d005      	beq.n	800ad16 <aci_gap_init+0x10c>
    return resp.Status;
 800ad0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	e021      	b.n	800ad5a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800ad16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ad1e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800ad30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad34:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ad38:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ad42:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800ad44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad48:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ad4c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800ad56:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd90      	pop	{r4, r7, pc}

0800ad64 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b0cc      	sub	sp, #304	@ 0x130
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad70:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ad74:	6019      	str	r1, [r3, #0]
 800ad76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad7a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ad7e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800ad80:	f107 0310 	add.w	r3, r7, #16
 800ad84:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ad88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800ad9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ad9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ada2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ada6:	7812      	ldrb	r2, [r2, #0]
 800ada8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800adaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800adae:	3301      	adds	r3, #1
 800adb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800adb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800adb8:	1c58      	adds	r0, r3, #1
 800adba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800adbe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800adc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	f001 f823 	bl	800be18 <Osal_MemCpy>
  index_input += AdvDataLen;
 800add2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800add6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ade0:	4413      	add	r3, r2
 800ade2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ade6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800adea:	2218      	movs	r2, #24
 800adec:	2100      	movs	r1, #0
 800adee:	4618      	mov	r0, r3
 800adf0:	f001 f822 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800adf4:	233f      	movs	r3, #63	@ 0x3f
 800adf6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800adfa:	238e      	movs	r3, #142	@ 0x8e
 800adfc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ae00:	f107 0310 	add.w	r3, r7, #16
 800ae04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ae08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ae0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ae10:	f107 030f 	add.w	r3, r7, #15
 800ae14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ae1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ae22:	2100      	movs	r1, #0
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fec5 	bl	800bbb4 <hci_send_req>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	da01      	bge.n	800ae34 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800ae30:	23ff      	movs	r3, #255	@ 0xff
 800ae32:	e004      	b.n	800ae3e <aci_gap_update_adv_data+0xda>
  return status;
 800ae34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ae38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ae3c:	781b      	ldrb	r3, [r3, #0]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b088      	sub	sp, #32
 800ae4c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ae52:	f107 0308 	add.w	r3, r7, #8
 800ae56:	2218      	movs	r2, #24
 800ae58:	2100      	movs	r1, #0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 ffec 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae60:	233f      	movs	r3, #63	@ 0x3f
 800ae62:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ae64:	2392      	movs	r3, #146	@ 0x92
 800ae66:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ae68:	1dfb      	adds	r3, r7, #7
 800ae6a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ae70:	f107 0308 	add.w	r3, r7, #8
 800ae74:	2100      	movs	r1, #0
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 fe9c 	bl	800bbb4 <hci_send_req>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	da01      	bge.n	800ae86 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ae82:	23ff      	movs	r3, #255	@ 0xff
 800ae84:	e000      	b.n	800ae88 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800ae86:	79fb      	ldrb	r3, [r7, #7]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3720      	adds	r7, #32
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b0cc      	sub	sp, #304	@ 0x130
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4602      	mov	r2, r0
 800ae98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ae9c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aea0:	801a      	strh	r2, [r3, #0]
 800aea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aea6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800aeaa:	460a      	mov	r2, r1
 800aeac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800aeae:	f107 0310 	add.w	r3, r7, #16
 800aeb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800aeb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aeba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800aec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aecc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aed0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800aed4:	8812      	ldrh	r2, [r2, #0]
 800aed6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aedc:	3302      	adds	r3, #2
 800aede:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800aee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aee6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aeea:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800aeee:	7812      	ldrb	r2, [r2, #0]
 800aef0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aef6:	3301      	adds	r3, #1
 800aef8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aefc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af00:	2218      	movs	r2, #24
 800af02:	2100      	movs	r1, #0
 800af04:	4618      	mov	r0, r3
 800af06:	f000 ff97 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af0a:	233f      	movs	r3, #63	@ 0x3f
 800af0c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800af10:	23a5      	movs	r3, #165	@ 0xa5
 800af12:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800af16:	f107 0310 	add.w	r3, r7, #16
 800af1a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800af1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800af22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800af26:	f107 030f 	add.w	r3, r7, #15
 800af2a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800af2e:	2301      	movs	r3, #1
 800af30:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800af34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af38:	2100      	movs	r1, #0
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fe3a 	bl	800bbb4 <hci_send_req>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	da01      	bge.n	800af4a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800af46:	23ff      	movs	r3, #255	@ 0xff
 800af48:	e004      	b.n	800af54 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800af4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800af4e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800af52:	781b      	ldrb	r3, [r3, #0]
}
 800af54:	4618      	mov	r0, r3
 800af56:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b088      	sub	sp, #32
 800af62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800af68:	f107 0308 	add.w	r3, r7, #8
 800af6c:	2218      	movs	r2, #24
 800af6e:	2100      	movs	r1, #0
 800af70:	4618      	mov	r0, r3
 800af72:	f000 ff61 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af76:	233f      	movs	r3, #63	@ 0x3f
 800af78:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800af7a:	f240 1301 	movw	r3, #257	@ 0x101
 800af7e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800af80:	1dfb      	adds	r3, r7, #7
 800af82:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800af84:	2301      	movs	r3, #1
 800af86:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800af88:	f107 0308 	add.w	r3, r7, #8
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 fe10 	bl	800bbb4 <hci_send_req>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	da01      	bge.n	800af9e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800af9a:	23ff      	movs	r3, #255	@ 0xff
 800af9c:	e000      	b.n	800afa0 <aci_gatt_init+0x42>
  return status;
 800af9e:	79fb      	ldrb	r3, [r7, #7]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3720      	adds	r7, #32
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800afa8:	b590      	push	{r4, r7, lr}
 800afaa:	b0cf      	sub	sp, #316	@ 0x13c
 800afac:	af00      	add	r7, sp, #0
 800afae:	4604      	mov	r4, r0
 800afb0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800afb4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800afb8:	6001      	str	r1, [r0, #0]
 800afba:	4610      	mov	r0, r2
 800afbc:	4619      	mov	r1, r3
 800afbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800afc2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800afc6:	4622      	mov	r2, r4
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800afce:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800afd2:	4602      	mov	r2, r0
 800afd4:	701a      	strb	r2, [r3, #0]
 800afd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800afda:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800afde:	460a      	mov	r2, r1
 800afe0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800afe2:	f107 0310 	add.w	r3, r7, #16
 800afe6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800afea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800afee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d00a      	beq.n	800b00e <aci_gatt_add_service+0x66>
 800aff8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800affc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2b02      	cmp	r3, #2
 800b004:	d101      	bne.n	800b00a <aci_gatt_add_service+0x62>
 800b006:	2311      	movs	r3, #17
 800b008:	e002      	b.n	800b010 <aci_gatt_add_service+0x68>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e000      	b.n	800b010 <aci_gatt_add_service+0x68>
 800b00e:	2303      	movs	r3, #3
 800b010:	f107 0210 	add.w	r2, r7, #16
 800b014:	4413      	add	r3, r2
 800b016:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b01a:	f107 030c 	add.w	r3, r7, #12
 800b01e:	2203      	movs	r2, #3
 800b020:	2100      	movs	r1, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f000 ff08 	bl	800be38 <Osal_MemSet>
  int index_input = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800b02e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b032:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b036:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800b03a:	7812      	ldrb	r2, [r2, #0]
 800b03c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b03e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b042:	3301      	adds	r3, #1
 800b044:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800b048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b04c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d002      	beq.n	800b05c <aci_gatt_add_service+0xb4>
 800b056:	2b02      	cmp	r3, #2
 800b058:	d004      	beq.n	800b064 <aci_gatt_add_service+0xbc>
 800b05a:	e007      	b.n	800b06c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800b05c:	2302      	movs	r3, #2
 800b05e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800b062:	e005      	b.n	800b070 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800b064:	2310      	movs	r3, #16
 800b066:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800b06a:	e001      	b.n	800b070 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800b06c:	2397      	movs	r3, #151	@ 0x97
 800b06e:	e06c      	b.n	800b14a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800b070:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b074:	1c58      	adds	r0, r3, #1
 800b076:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800b07a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b07e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b082:	6819      	ldr	r1, [r3, #0]
 800b084:	f000 fec8 	bl	800be18 <Osal_MemCpy>
    index_input += size;
 800b088:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800b08c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b090:	4413      	add	r3, r2
 800b092:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800b096:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b09a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b09e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800b0a2:	7812      	ldrb	r2, [r2, #0]
 800b0a4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b0a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800b0b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b0b4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b0b8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800b0bc:	7812      	ldrb	r2, [r2, #0]
 800b0be:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b0c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b0ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b0ce:	2218      	movs	r2, #24
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 feb0 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b0d8:	233f      	movs	r3, #63	@ 0x3f
 800b0da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800b0de:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800b0e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b0e6:	f107 0310 	add.w	r3, r7, #16
 800b0ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b0ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800b0fe:	2303      	movs	r3, #3
 800b100:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b104:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b108:	2100      	movs	r1, #0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fd52 	bl	800bbb4 <hci_send_req>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	da01      	bge.n	800b11a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800b116:	23ff      	movs	r3, #255	@ 0xff
 800b118:	e017      	b.n	800b14a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800b11a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b11e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d005      	beq.n	800b134 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800b128:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b12c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	e00a      	b.n	800b14a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800b134:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b138:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b13c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b140:	b29a      	uxth	r2, r3
 800b142:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b146:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}

0800b154 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b0d1      	sub	sp, #324	@ 0x144
 800b158:	af00      	add	r7, sp, #0
 800b15a:	4604      	mov	r4, r0
 800b15c:	4608      	mov	r0, r1
 800b15e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800b162:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800b166:	600a      	str	r2, [r1, #0]
 800b168:	4619      	mov	r1, r3
 800b16a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b16e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800b172:	4622      	mov	r2, r4
 800b174:	801a      	strh	r2, [r3, #0]
 800b176:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b17a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800b17e:	4602      	mov	r2, r0
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b186:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800b18a:	460a      	mov	r2, r1
 800b18c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b18e:	f107 0318 	add.w	r3, r7, #24
 800b192:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b196:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b19a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d00a      	beq.n	800b1ba <aci_gatt_add_char+0x66>
 800b1a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b1a8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d101      	bne.n	800b1b6 <aci_gatt_add_char+0x62>
 800b1b2:	2313      	movs	r3, #19
 800b1b4:	e002      	b.n	800b1bc <aci_gatt_add_char+0x68>
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e000      	b.n	800b1bc <aci_gatt_add_char+0x68>
 800b1ba:	2305      	movs	r3, #5
 800b1bc:	f107 0218 	add.w	r2, r7, #24
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b1c6:	f107 0314 	add.w	r3, r7, #20
 800b1ca:	2203      	movs	r2, #3
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fe32 	bl	800be38 <Osal_MemSet>
  int index_input = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800b1da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800b1de:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800b1e2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800b1e6:	8812      	ldrh	r2, [r2, #0]
 800b1e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b1ee:	3302      	adds	r3, #2
 800b1f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800b1f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800b1f8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800b1fc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800b200:	7812      	ldrb	r2, [r2, #0]
 800b202:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b204:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b208:	3301      	adds	r3, #1
 800b20a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800b20e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b212:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d002      	beq.n	800b222 <aci_gatt_add_char+0xce>
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d004      	beq.n	800b22a <aci_gatt_add_char+0xd6>
 800b220:	e007      	b.n	800b232 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800b222:	2302      	movs	r3, #2
 800b224:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800b228:	e005      	b.n	800b236 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800b22a:	2310      	movs	r3, #16
 800b22c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800b230:	e001      	b.n	800b236 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800b232:	2397      	movs	r3, #151	@ 0x97
 800b234:	e091      	b.n	800b35a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800b236:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800b23a:	1cd8      	adds	r0, r3, #3
 800b23c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800b240:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b244:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b248:	6819      	ldr	r1, [r3, #0]
 800b24a:	f000 fde5 	bl	800be18 <Osal_MemCpy>
    index_input += size;
 800b24e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b252:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800b256:	4413      	add	r3, r2
 800b258:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800b25c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b260:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800b264:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800b268:	8812      	ldrh	r2, [r2, #0]
 800b26a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b26c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b270:	3302      	adds	r3, #2
 800b272:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800b276:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b27a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800b27e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b280:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b284:	3301      	adds	r3, #1
 800b286:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800b28a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b28e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800b292:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b294:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b298:	3301      	adds	r3, #1
 800b29a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800b29e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b2a2:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800b2a6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b2a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800b2b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b2b6:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800b2ba:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b2bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800b2c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b2ca:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800b2ce:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b2d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b2da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b2de:	2218      	movs	r2, #24
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 fda8 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2e8:	233f      	movs	r3, #63	@ 0x3f
 800b2ea:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800b2ee:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800b2f2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800b2f6:	f107 0318 	add.w	r3, r7, #24
 800b2fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800b2fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b302:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800b306:	f107 0314 	add.w	r3, r7, #20
 800b30a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800b30e:	2303      	movs	r3, #3
 800b310:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b314:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b318:	2100      	movs	r1, #0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fc4a 	bl	800bbb4 <hci_send_req>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	da01      	bge.n	800b32a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800b326:	23ff      	movs	r3, #255	@ 0xff
 800b328:	e017      	b.n	800b35a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800b32a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b32e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d005      	beq.n	800b344 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800b338:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b33c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	e00a      	b.n	800b35a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800b344:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b348:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b34c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b350:	b29a      	uxth	r2, r3
 800b352:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800b356:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b360:	46bd      	mov	sp, r7
 800b362:	bd90      	pop	{r4, r7, pc}

0800b364 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800b364:	b5b0      	push	{r4, r5, r7, lr}
 800b366:	b0cc      	sub	sp, #304	@ 0x130
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4605      	mov	r5, r0
 800b36c:	460c      	mov	r4, r1
 800b36e:	4610      	mov	r0, r2
 800b370:	4619      	mov	r1, r3
 800b372:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b376:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b37a:	462a      	mov	r2, r5
 800b37c:	801a      	strh	r2, [r3, #0]
 800b37e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b382:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b386:	4622      	mov	r2, r4
 800b388:	801a      	strh	r2, [r3, #0]
 800b38a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b38e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800b392:	4602      	mov	r2, r0
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b39a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b39e:	460a      	mov	r2, r1
 800b3a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b3a2:	f107 0310 	add.w	r3, r7, #16
 800b3a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b3aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b3ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800b3bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b3c4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b3c8:	8812      	ldrh	r2, [r2, #0]
 800b3ca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b3cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800b3d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b3de:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800b3e2:	8812      	ldrh	r2, [r2, #0]
 800b3e4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b3e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3ea:	3302      	adds	r3, #2
 800b3ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800b3f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b3f8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b400:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b404:	3301      	adds	r3, #1
 800b406:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800b40a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b40e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b412:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800b416:	7812      	ldrb	r2, [r2, #0]
 800b418:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b41a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b41e:	3301      	adds	r3, #1
 800b420:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800b424:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b428:	1d98      	adds	r0, r3, #6
 800b42a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b42e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	461a      	mov	r2, r3
 800b436:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800b43a:	f000 fced 	bl	800be18 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b43e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b442:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b44c:	4413      	add	r3, r2
 800b44e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b452:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b456:	2218      	movs	r2, #24
 800b458:	2100      	movs	r1, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 fcec 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b460:	233f      	movs	r3, #63	@ 0x3f
 800b462:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800b466:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800b46a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b46e:	f107 0310 	add.w	r3, r7, #16
 800b472:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b476:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b47a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b47e:	f107 030f 	add.w	r3, r7, #15
 800b482:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b486:	2301      	movs	r3, #1
 800b488:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b48c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b490:	2100      	movs	r1, #0
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fb8e 	bl	800bbb4 <hci_send_req>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	da01      	bge.n	800b4a2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800b49e:	23ff      	movs	r3, #255	@ 0xff
 800b4a0:	e004      	b.n	800b4ac <aci_gatt_update_char_value+0x148>
  return status;
 800b4a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b4aa:	781b      	ldrb	r3, [r3, #0]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bdb0      	pop	{r4, r5, r7, pc}

0800b4b6 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b0cc      	sub	sp, #304	@ 0x130
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	4602      	mov	r2, r0
 800b4be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4c2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b4c6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800b4c8:	f107 0310 	add.w	r3, r7, #16
 800b4cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b4d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b4d8:	2200      	movs	r2, #0
 800b4da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b4e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b4e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b4ea:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b4ee:	8812      	ldrh	r2, [r2, #0]
 800b4f0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b4f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b4f6:	3302      	adds	r3, #2
 800b4f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b4fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b500:	2218      	movs	r2, #24
 800b502:	2100      	movs	r1, #0
 800b504:	4618      	mov	r0, r3
 800b506:	f000 fc97 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b50a:	233f      	movs	r3, #63	@ 0x3f
 800b50c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800b510:	f240 1325 	movw	r3, #293	@ 0x125
 800b514:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b518:	f107 0310 	add.w	r3, r7, #16
 800b51c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b520:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b524:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b528:	f107 030f 	add.w	r3, r7, #15
 800b52c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b530:	2301      	movs	r3, #1
 800b532:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b536:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 fb39 	bl	800bbb4 <hci_send_req>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	da01      	bge.n	800b54c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800b548:	23ff      	movs	r3, #255	@ 0xff
 800b54a:	e004      	b.n	800b556 <aci_gatt_confirm_indication+0xa0>
  return status;
 800b54c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b550:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b554:	781b      	ldrb	r3, [r3, #0]
}
 800b556:	4618      	mov	r0, r3
 800b558:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b0cc      	sub	sp, #304	@ 0x130
 800b564:	af00      	add	r7, sp, #0
 800b566:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b56a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b574:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b578:	4602      	mov	r2, r0
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b580:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b584:	460a      	mov	r2, r1
 800b586:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b588:	f107 0310 	add.w	r3, r7, #16
 800b58c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b590:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b594:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b598:	2200      	movs	r2, #0
 800b59a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800b5a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b5a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b5aa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b5ae:	7812      	ldrb	r2, [r2, #0]
 800b5b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b5b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800b5bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b5c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b5c4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b5c8:	7812      	ldrb	r2, [r2, #0]
 800b5ca:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b5cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800b5d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b5da:	1c98      	adds	r0, r3, #2
 800b5dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b5e0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b5e4:	781a      	ldrb	r2, [r3, #0]
 800b5e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b5ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b5ee:	6819      	ldr	r1, [r3, #0]
 800b5f0:	f000 fc12 	bl	800be18 <Osal_MemCpy>
  index_input += Length;
 800b5f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b5f8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b602:	4413      	add	r3, r2
 800b604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b60c:	2218      	movs	r2, #24
 800b60e:	2100      	movs	r1, #0
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fc11 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b616:	233f      	movs	r3, #63	@ 0x3f
 800b618:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800b61c:	230c      	movs	r3, #12
 800b61e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b622:	f107 0310 	add.w	r3, r7, #16
 800b626:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b62a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b62e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b632:	f107 030f 	add.w	r3, r7, #15
 800b636:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b63a:	2301      	movs	r3, #1
 800b63c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b644:	2100      	movs	r1, #0
 800b646:	4618      	mov	r0, r3
 800b648:	f000 fab4 	bl	800bbb4 <hci_send_req>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	da01      	bge.n	800b656 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800b652:	23ff      	movs	r3, #255	@ 0xff
 800b654:	e004      	b.n	800b660 <aci_hal_write_config_data+0x100>
  return status;
 800b656:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b65a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b65e:	781b      	ldrb	r3, [r3, #0]
}
 800b660:	4618      	mov	r0, r3
 800b662:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b0cc      	sub	sp, #304	@ 0x130
 800b66e:	af00      	add	r7, sp, #0
 800b670:	4602      	mov	r2, r0
 800b672:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b676:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b67a:	701a      	strb	r2, [r3, #0]
 800b67c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b680:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b684:	460a      	mov	r2, r1
 800b686:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b688:	f107 0310 	add.w	r3, r7, #16
 800b68c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b690:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b694:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b698:	2200      	movs	r2, #0
 800b69a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800b6a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b6a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b6aa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b6ae:	7812      	ldrb	r2, [r2, #0]
 800b6b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b6b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800b6bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b6c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b6c4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b6c8:	7812      	ldrb	r2, [r2, #0]
 800b6ca:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b6cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b6d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b6da:	2218      	movs	r2, #24
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 fbaa 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6e4:	233f      	movs	r3, #63	@ 0x3f
 800b6e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800b6ea:	230f      	movs	r3, #15
 800b6ec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b6f0:	f107 0310 	add.w	r3, r7, #16
 800b6f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b6f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b6fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b700:	f107 030f 	add.w	r3, r7, #15
 800b704:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b708:	2301      	movs	r3, #1
 800b70a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b70e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b712:	2100      	movs	r1, #0
 800b714:	4618      	mov	r0, r3
 800b716:	f000 fa4d 	bl	800bbb4 <hci_send_req>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	da01      	bge.n	800b724 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800b720:	23ff      	movs	r3, #255	@ 0xff
 800b722:	e004      	b.n	800b72e <aci_hal_set_tx_power_level+0xc4>
  return status;
 800b724:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b728:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b72c:	781b      	ldrb	r3, [r3, #0]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b0cc      	sub	sp, #304	@ 0x130
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	4602      	mov	r2, r0
 800b740:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b744:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b748:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b74a:	f107 0310 	add.w	r3, r7, #16
 800b74e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b752:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b756:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b75a:	2200      	movs	r2, #0
 800b75c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800b764:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b768:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b76c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b770:	8812      	ldrh	r2, [r2, #0]
 800b772:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b778:	3302      	adds	r3, #2
 800b77a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b77e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b782:	2218      	movs	r2, #24
 800b784:	2100      	movs	r1, #0
 800b786:	4618      	mov	r0, r3
 800b788:	f000 fb56 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b78c:	233f      	movs	r3, #63	@ 0x3f
 800b78e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800b792:	2318      	movs	r3, #24
 800b794:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b798:	f107 0310 	add.w	r3, r7, #16
 800b79c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b7a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b7a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b7a8:	f107 030f 	add.w	r3, r7, #15
 800b7ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b7b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 f9f9 	bl	800bbb4 <hci_send_req>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	da01      	bge.n	800b7cc <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800b7c8:	23ff      	movs	r3, #255	@ 0xff
 800b7ca:	e004      	b.n	800b7d6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800b7cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b7d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b7d4:	781b      	ldrb	r3, [r3, #0]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b7ea:	f107 0308 	add.w	r3, r7, #8
 800b7ee:	2218      	movs	r2, #24
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 fb20 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x03;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b800:	1dfb      	adds	r3, r7, #7
 800b802:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b804:	2301      	movs	r3, #1
 800b806:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b808:	f107 0308 	add.w	r3, r7, #8
 800b80c:	2100      	movs	r1, #0
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 f9d0 	bl	800bbb4 <hci_send_req>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	da01      	bge.n	800b81e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b81a:	23ff      	movs	r3, #255	@ 0xff
 800b81c:	e000      	b.n	800b820 <hci_reset+0x40>
  return status;
 800b81e:	79fb      	ldrb	r3, [r7, #7]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3720      	adds	r7, #32
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800b828:	b590      	push	{r4, r7, lr}
 800b82a:	b0cd      	sub	sp, #308	@ 0x134
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	4611      	mov	r1, r2
 800b834:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b838:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b83c:	4622      	mov	r2, r4
 800b83e:	701a      	strb	r2, [r3, #0]
 800b840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b844:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b848:	4602      	mov	r2, r0
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b850:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800b854:	460a      	mov	r2, r1
 800b856:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b858:	f107 0310 	add.w	r3, r7, #16
 800b85c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b860:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b864:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800b872:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b876:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b87a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b87e:	7812      	ldrb	r2, [r2, #0]
 800b880:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b882:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b886:	3301      	adds	r3, #1
 800b888:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800b88c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b890:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b894:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b898:	7812      	ldrb	r2, [r2, #0]
 800b89a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b89c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800b8a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b8aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b8ae:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800b8b2:	7812      	ldrb	r2, [r2, #0]
 800b8b4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b8b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b8c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b8c4:	2218      	movs	r2, #24
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 fab5 	bl	800be38 <Osal_MemSet>
  rq.ogf = 0x08;
 800b8ce:	2308      	movs	r3, #8
 800b8d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800b8d4:	2331      	movs	r3, #49	@ 0x31
 800b8d6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b8da:	f107 0310 	add.w	r3, r7, #16
 800b8de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b8e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b8e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b8ea:	f107 030f 	add.w	r3, r7, #15
 800b8ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b8f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f958 	bl	800bbb4 <hci_send_req>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	da01      	bge.n	800b90e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800b90a:	23ff      	movs	r3, #255	@ 0xff
 800b90c:	e004      	b.n	800b918 <hci_le_set_default_phy+0xf0>
  return status;
 800b90e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b912:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b916:	781b      	ldrb	r3, [r3, #0]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd90      	pop	{r4, r7, pc}

0800b922 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800b92e:	215c      	movs	r1, #92	@ 0x5c
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f005 fd6f 	bl	8011414 <strrchr>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d007      	beq.n	800b94c <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800b93c:	215c      	movs	r1, #92	@ 0x5c
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f005 fd68 	bl	8011414 <strrchr>
 800b944:	4603      	mov	r3, r0
 800b946:	3301      	adds	r3, #1
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	e00d      	b.n	800b968 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800b94c:	212f      	movs	r1, #47	@ 0x2f
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f005 fd60 	bl	8011414 <strrchr>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d006      	beq.n	800b968 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800b95a:	212f      	movs	r1, #47	@ 0x2f
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f005 fd59 	bl	8011414 <strrchr>
 800b962:	4603      	mov	r3, r0
 800b964:	3301      	adds	r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b968:	68fb      	ldr	r3, [r7, #12]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
	...

0800b974 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b97a:	f3ef 8310 	mrs	r3, PRIMASK
 800b97e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b980:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b984:	b672      	cpsid	i
}
 800b986:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b988:	1cbb      	adds	r3, r7, #2
 800b98a:	4619      	mov	r1, r3
 800b98c:	4812      	ldr	r0, [pc, #72]	@ (800b9d8 <DbgTrace_TxCpltCallback+0x64>)
 800b98e:	f000 ffcb 	bl	800c928 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b992:	1cbb      	adds	r3, r7, #2
 800b994:	4619      	mov	r1, r3
 800b996:	4810      	ldr	r0, [pc, #64]	@ (800b9d8 <DbgTrace_TxCpltCallback+0x64>)
 800b998:	f001 f8b5 	bl	800cb06 <CircularQueue_Sense>
 800b99c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00c      	beq.n	800b9be <DbgTrace_TxCpltCallback+0x4a>
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f383 8810 	msr	PRIMASK, r3
}
 800b9ae:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b9b0:	887b      	ldrh	r3, [r7, #2]
 800b9b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b9dc <DbgTrace_TxCpltCallback+0x68>)
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6938      	ldr	r0, [r7, #16]
 800b9b8:	f7f5 f9de 	bl	8000d78 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b9bc:	e008      	b.n	800b9d0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b9be:	4b08      	ldr	r3, [pc, #32]	@ (800b9e0 <DbgTrace_TxCpltCallback+0x6c>)
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	701a      	strb	r2, [r3, #0]
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f383 8810 	msr	PRIMASK, r3
}
 800b9ce:	bf00      	nop
}
 800b9d0:	bf00      	nop
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	20000510 	.word	0x20000510
 800b9dc:	0800b975 	.word	0x0800b975
 800b9e0:	20000011 	.word	0x20000011

0800b9e4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b9ea:	f7f5 f9be 	bl	8000d6a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b9ee:	2302      	movs	r3, #2
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b9f8:	4903      	ldr	r1, [pc, #12]	@ (800ba08 <DbgTraceInit+0x24>)
 800b9fa:	4804      	ldr	r0, [pc, #16]	@ (800ba0c <DbgTraceInit+0x28>)
 800b9fc:	f000 fd3c 	bl	800c478 <CircularQueue_Init>
#endif 
#endif
  return;
 800ba00:	bf00      	nop
}
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000530 	.word	0x20000530
 800ba0c:	20000510 	.word	0x20000510

0800ba10 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f805 	bl	800ba30 <DbgTraceWrite>
 800ba26:	4603      	mov	r3, r0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08a      	sub	sp, #40	@ 0x28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba40:	f3ef 8310 	mrs	r3, PRIMASK
 800ba44:	61bb      	str	r3, [r7, #24]
  return(result);
 800ba46:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ba48:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba50:	d102      	bne.n	800ba58 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba56:	e037      	b.n	800bac8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d006      	beq.n	800ba6c <DbgTraceWrite+0x3c>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d003      	beq.n	800ba6c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ba64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba6a:	e02d      	b.n	800bac8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d02a      	beq.n	800bac8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ba76:	b672      	cpsid	i
}
 800ba78:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	2301      	movs	r3, #1
 800ba80:	68b9      	ldr	r1, [r7, #8]
 800ba82:	4814      	ldr	r0, [pc, #80]	@ (800bad4 <DbgTraceWrite+0xa4>)
 800ba84:	f000 fd2a 	bl	800c4dc <CircularQueue_Add>
 800ba88:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d015      	beq.n	800babc <DbgTraceWrite+0x8c>
 800ba90:	4b11      	ldr	r3, [pc, #68]	@ (800bad8 <DbgTraceWrite+0xa8>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d010      	beq.n	800babc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ba9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bad8 <DbgTraceWrite+0xa8>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	6a3b      	ldr	r3, [r7, #32]
 800baa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f383 8810 	msr	PRIMASK, r3
}
 800baaa:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	b29b      	uxth	r3, r3
 800bab0:	4a0a      	ldr	r2, [pc, #40]	@ (800badc <DbgTraceWrite+0xac>)
 800bab2:	4619      	mov	r1, r3
 800bab4:	69f8      	ldr	r0, [r7, #28]
 800bab6:	f7f5 f95f 	bl	8000d78 <DbgOutputTraces>
 800baba:	e005      	b.n	800bac8 <DbgTraceWrite+0x98>
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f383 8810 	msr	PRIMASK, r3
}
 800bac6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800bac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3728      	adds	r7, #40	@ 0x28
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000510 	.word	0x20000510
 800bad8:	20000011 	.word	0x20000011
 800badc:	0800b975 	.word	0x0800b975

0800bae0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	4a08      	ldr	r2, [pc, #32]	@ (800bb10 <hci_init+0x30>)
 800baf0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800baf2:	4a08      	ldr	r2, [pc, #32]	@ (800bb14 <hci_init+0x34>)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800baf8:	4806      	ldr	r0, [pc, #24]	@ (800bb14 <hci_init+0x34>)
 800bafa:	f000 f979 	bl	800bdf0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 f8da 	bl	800bcbc <TlInit>

  return;
 800bb08:	bf00      	nop
}
 800bb0a:	3708      	adds	r7, #8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20001558 	.word	0x20001558
 800bb14:	20001530 	.word	0x20001530

0800bb18 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bb1e:	4822      	ldr	r0, [pc, #136]	@ (800bba8 <hci_user_evt_proc+0x90>)
 800bb20:	f000 fbfc 	bl	800c31c <LST_is_empty>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d12b      	bne.n	800bb82 <hci_user_evt_proc+0x6a>
 800bb2a:	4b20      	ldr	r3, [pc, #128]	@ (800bbac <hci_user_evt_proc+0x94>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d027      	beq.n	800bb82 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bb32:	f107 030c 	add.w	r3, r7, #12
 800bb36:	4619      	mov	r1, r3
 800bb38:	481b      	ldr	r0, [pc, #108]	@ (800bba8 <hci_user_evt_proc+0x90>)
 800bb3a:	f000 fc7e 	bl	800c43a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800bb3e:	4b1c      	ldr	r3, [pc, #112]	@ (800bbb0 <hci_user_evt_proc+0x98>)
 800bb40:	69db      	ldr	r3, [r3, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00c      	beq.n	800bb60 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bb4e:	4b18      	ldr	r3, [pc, #96]	@ (800bbb0 <hci_user_evt_proc+0x98>)
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	1d3a      	adds	r2, r7, #4
 800bb54:	4610      	mov	r0, r2
 800bb56:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bb58:	793a      	ldrb	r2, [r7, #4]
 800bb5a:	4b14      	ldr	r3, [pc, #80]	@ (800bbac <hci_user_evt_proc+0x94>)
 800bb5c:	701a      	strb	r2, [r3, #0]
 800bb5e:	e002      	b.n	800bb66 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bb60:	4b12      	ldr	r3, [pc, #72]	@ (800bbac <hci_user_evt_proc+0x94>)
 800bb62:	2201      	movs	r2, #1
 800bb64:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800bb66:	4b11      	ldr	r3, [pc, #68]	@ (800bbac <hci_user_evt_proc+0x94>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d004      	beq.n	800bb78 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 fb1f 	bl	800d1b4 <TL_MM_EvtDone>
 800bb76:	e004      	b.n	800bb82 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	480a      	ldr	r0, [pc, #40]	@ (800bba8 <hci_user_evt_proc+0x90>)
 800bb7e:	f000 fbef 	bl	800c360 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bb82:	4809      	ldr	r0, [pc, #36]	@ (800bba8 <hci_user_evt_proc+0x90>)
 800bb84:	f000 fbca 	bl	800c31c <LST_is_empty>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d107      	bne.n	800bb9e <hci_user_evt_proc+0x86>
 800bb8e:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <hci_user_evt_proc+0x94>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d003      	beq.n	800bb9e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800bb96:	4804      	ldr	r0, [pc, #16]	@ (800bba8 <hci_user_evt_proc+0x90>)
 800bb98:	f002 fb6a 	bl	800e270 <hci_notify_asynch_evt>
  }


  return;
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
}
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20000094 	.word	0x20000094
 800bbac:	200000a0 	.word	0x200000a0
 800bbb0:	20001530 	.word	0x20001530

0800bbb4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	f000 f8d1 	bl	800bd68 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	885b      	ldrh	r3, [r3, #2]
 800bbce:	b21b      	sxth	r3, r3
 800bbd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbd4:	b21a      	sxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	881b      	ldrh	r3, [r3, #0]
 800bbda:	b21b      	sxth	r3, r3
 800bbdc:	029b      	lsls	r3, r3, #10
 800bbde:	b21b      	sxth	r3, r3
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	b21b      	sxth	r3, r3
 800bbe4:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800bbe6:	4b33      	ldr	r3, [pc, #204]	@ (800bcb4 <hci_send_req+0x100>)
 800bbe8:	2201      	movs	r2, #1
 800bbea:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	b2d9      	uxtb	r1, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	8bbb      	ldrh	r3, [r7, #28]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 f88f 	bl	800bd1c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800bbfe:	e04e      	b.n	800bc9e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800bc00:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800bc04:	f002 fb4b 	bl	800e29e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bc08:	e043      	b.n	800bc92 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800bc0a:	f107 030c 	add.w	r3, r7, #12
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4829      	ldr	r0, [pc, #164]	@ (800bcb8 <hci_send_req+0x104>)
 800bc12:	f000 fc12 	bl	800c43a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	7a5b      	ldrb	r3, [r3, #9]
 800bc1a:	2b0f      	cmp	r3, #15
 800bc1c:	d114      	bne.n	800bc48 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	330b      	adds	r3, #11
 800bc22:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	885b      	ldrh	r3, [r3, #2]
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	8bba      	ldrh	r2, [r7, #28]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d104      	bne.n	800bc3a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	7812      	ldrb	r2, [r2, #0]
 800bc38:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d027      	beq.n	800bc92 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bc42:	2301      	movs	r3, #1
 800bc44:	77fb      	strb	r3, [r7, #31]
 800bc46:	e024      	b.n	800bc92 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	330b      	adds	r3, #11
 800bc4c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	8bba      	ldrh	r2, [r7, #28]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d114      	bne.n	800bc86 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	7a9b      	ldrb	r3, [r3, #10]
 800bc60:	3b03      	subs	r3, #3
 800bc62:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	695a      	ldr	r2, [r3, #20]
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	bfa8      	it	ge
 800bc6e:	461a      	movge	r2, r3
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6918      	ldr	r0, [r3, #16]
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	1cd9      	adds	r1, r3, #3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	461a      	mov	r2, r3
 800bc82:	f005 fc0a 	bl	801149a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bc92:	4809      	ldr	r0, [pc, #36]	@ (800bcb8 <hci_send_req+0x104>)
 800bc94:	f000 fb42 	bl	800c31c <LST_is_empty>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0b5      	beq.n	800bc0a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800bc9e:	7ffb      	ldrb	r3, [r7, #31]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0ad      	beq.n	800bc00 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800bca4:	2001      	movs	r0, #1
 800bca6:	f000 f85f 	bl	800bd68 <NotifyCmdStatus>

  return 0;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	2000155c 	.word	0x2000155c
 800bcb8:	20001550 	.word	0x20001550

0800bcbc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800bcc4:	480f      	ldr	r0, [pc, #60]	@ (800bd04 <TlInit+0x48>)
 800bcc6:	f000 fb19 	bl	800c2fc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800bcca:	4a0f      	ldr	r2, [pc, #60]	@ (800bd08 <TlInit+0x4c>)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800bcd0:	480e      	ldr	r0, [pc, #56]	@ (800bd0c <TlInit+0x50>)
 800bcd2:	f000 fb13 	bl	800c2fc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bcd6:	4b0e      	ldr	r3, [pc, #56]	@ (800bd10 <TlInit+0x54>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800bcdc:	4b0d      	ldr	r3, [pc, #52]	@ (800bd14 <TlInit+0x58>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00a      	beq.n	800bcfa <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800bce8:	4b0b      	ldr	r3, [pc, #44]	@ (800bd18 <TlInit+0x5c>)
 800bcea:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800bcec:	4b09      	ldr	r3, [pc, #36]	@ (800bd14 <TlInit+0x58>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f107 0208 	add.w	r2, r7, #8
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	4798      	blx	r3
  }

  return;
 800bcf8:	bf00      	nop
 800bcfa:	bf00      	nop
}
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20001550 	.word	0x20001550
 800bd08:	2000009c 	.word	0x2000009c
 800bd0c:	20000094 	.word	0x20000094
 800bd10:	200000a0 	.word	0x200000a0
 800bd14:	20001530 	.word	0x20001530
 800bd18:	0800bda9 	.word	0x0800bda9

0800bd1c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	603a      	str	r2, [r7, #0]
 800bd26:	80fb      	strh	r3, [r7, #6]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800bd2c:	4b0c      	ldr	r3, [pc, #48]	@ (800bd60 <SendCmd+0x44>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	88fa      	ldrh	r2, [r7, #6]
 800bd32:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800bd36:	4b0a      	ldr	r3, [pc, #40]	@ (800bd60 <SendCmd+0x44>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	797a      	ldrb	r2, [r7, #5]
 800bd3c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800bd3e:	4b08      	ldr	r3, [pc, #32]	@ (800bd60 <SendCmd+0x44>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	330c      	adds	r3, #12
 800bd44:	797a      	ldrb	r2, [r7, #5]
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f005 fba6 	bl	801149a <memcpy>

  hciContext.io.Send(0,0);
 800bd4e:	4b05      	ldr	r3, [pc, #20]	@ (800bd64 <SendCmd+0x48>)
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	2100      	movs	r1, #0
 800bd54:	2000      	movs	r0, #0
 800bd56:	4798      	blx	r3

  return;
 800bd58:	bf00      	nop
}
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	2000009c 	.word	0x2000009c
 800bd64:	20001530 	.word	0x20001530

0800bd68 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800bd72:	79fb      	ldrb	r3, [r7, #7]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d108      	bne.n	800bd8a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800bd78:	4b0a      	ldr	r3, [pc, #40]	@ (800bda4 <NotifyCmdStatus+0x3c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00d      	beq.n	800bd9c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800bd80:	4b08      	ldr	r3, [pc, #32]	@ (800bda4 <NotifyCmdStatus+0x3c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2000      	movs	r0, #0
 800bd86:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800bd88:	e008      	b.n	800bd9c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800bd8a:	4b06      	ldr	r3, [pc, #24]	@ (800bda4 <NotifyCmdStatus+0x3c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d004      	beq.n	800bd9c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800bd92:	4b04      	ldr	r3, [pc, #16]	@ (800bda4 <NotifyCmdStatus+0x3c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2001      	movs	r0, #1
 800bd98:	4798      	blx	r3
  return;
 800bd9a:	bf00      	nop
 800bd9c:	bf00      	nop
}
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	20001558 	.word	0x20001558

0800bda8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	7a5b      	ldrb	r3, [r3, #9]
 800bdb4:	2b0f      	cmp	r3, #15
 800bdb6:	d003      	beq.n	800bdc0 <TlEvtReceived+0x18>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7a5b      	ldrb	r3, [r3, #9]
 800bdbc:	2b0e      	cmp	r3, #14
 800bdbe:	d107      	bne.n	800bdd0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	4809      	ldr	r0, [pc, #36]	@ (800bde8 <TlEvtReceived+0x40>)
 800bdc4:	f000 faf2 	bl	800c3ac <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800bdc8:	2000      	movs	r0, #0
 800bdca:	f002 fa5d 	bl	800e288 <hci_cmd_resp_release>
 800bdce:	e006      	b.n	800bdde <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	4806      	ldr	r0, [pc, #24]	@ (800bdec <TlEvtReceived+0x44>)
 800bdd4:	f000 faea 	bl	800c3ac <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bdd8:	4804      	ldr	r0, [pc, #16]	@ (800bdec <TlEvtReceived+0x44>)
 800bdda:	f002 fa49 	bl	800e270 <hci_notify_asynch_evt>
  }

  return;
 800bdde:	bf00      	nop
}
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	20001550 	.word	0x20001550
 800bdec:	20000094 	.word	0x20000094

0800bdf0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a05      	ldr	r2, [pc, #20]	@ (800be10 <hci_register_io_bus+0x20>)
 800bdfc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a04      	ldr	r2, [pc, #16]	@ (800be14 <hci_register_io_bus+0x24>)
 800be02:	611a      	str	r2, [r3, #16]

  return;
 800be04:	bf00      	nop
}
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	0800cf2d 	.word	0x0800cf2d
 800be14:	0800cf95 	.word	0x0800cf95

0800be18 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	68b9      	ldr	r1, [r7, #8]
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f005 fb36 	bl	801149a <memcpy>
 800be2e:	4603      	mov	r3, r0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f005 fadb 	bl	8011404 <memset>
 800be4e:	4603      	mov	r3, r0
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800be62:	4b0f      	ldr	r3, [pc, #60]	@ (800bea0 <OTP_Read+0x48>)
 800be64:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800be66:	e002      	b.n	800be6e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	3b08      	subs	r3, #8
 800be6c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	3307      	adds	r3, #7
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	79fa      	ldrb	r2, [r7, #7]
 800be76:	429a      	cmp	r2, r3
 800be78:	d003      	beq.n	800be82 <OTP_Read+0x2a>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	4a09      	ldr	r2, [pc, #36]	@ (800bea4 <OTP_Read+0x4c>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d1f2      	bne.n	800be68 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3307      	adds	r3, #7
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	79fa      	ldrb	r2, [r7, #7]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d001      	beq.n	800be92 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800be8e:	2300      	movs	r3, #0
 800be90:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800be92:	68fb      	ldr	r3, [r7, #12]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	1fff73f8 	.word	0x1fff73f8
 800bea4:	1fff7000 	.word	0x1fff7000

0800bea8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800beb0:	f107 030c 	add.w	r3, r7, #12
 800beb4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	212e      	movs	r1, #46	@ 0x2e
 800bec0:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800bec4:	f000 f94c 	bl	800c160 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	330b      	adds	r3, #11
 800becc:	78db      	ldrb	r3, [r3, #3]
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3720      	adds	r7, #32
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b088      	sub	sp, #32
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bede:	f107 030c 	add.w	r3, r7, #12
 800bee2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	210f      	movs	r1, #15
 800beee:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800bef2:	f000 f935 	bl	800c160 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	330b      	adds	r3, #11
 800befa:	78db      	ldrb	r3, [r3, #3]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800bf0c:	f107 030c 	add.w	r3, r7, #12
 800bf10:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	2110      	movs	r1, #16
 800bf18:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800bf1c:	f000 f920 	bl	800c160 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	330b      	adds	r3, #11
 800bf24:	78db      	ldrb	r3, [r3, #3]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3720      	adds	r7, #32
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b08b      	sub	sp, #44	@ 0x2c
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bf58:	4b4a      	ldr	r3, [pc, #296]	@ (800c084 <SHCI_GetWirelessFwInfo+0x154>)
 800bf5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bf60:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800bf6a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a44      	ldr	r2, [pc, #272]	@ (800c088 <SHCI_GetWirelessFwInfo+0x158>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d10f      	bne.n	800bf9c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	e01a      	b.n	800bfd2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800bfa4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800bfa8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	0e1b      	lsrs	r3, r3, #24
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfde:	0c1b      	lsrs	r3, r3, #16
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe8:	0a1b      	lsrs	r3, r3, #8
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff2:	091b      	lsrs	r3, r3, #4
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	f003 030f 	and.w	r3, r3, #15
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 030f 	and.w	r3, r3, #15
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c00e:	6a3b      	ldr	r3, [r7, #32]
 800c010:	0e1b      	lsrs	r3, r3, #24
 800c012:	b2da      	uxtb	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	0c1b      	lsrs	r3, r3, #16
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	0a1b      	lsrs	r3, r3, #8
 800c026:	b2da      	uxtb	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	b2da      	uxtb	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	0e1b      	lsrs	r3, r3, #24
 800c040:	b2da      	uxtb	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	0c1b      	lsrs	r3, r3, #16
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	b2da      	uxtb	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	0e1b      	lsrs	r3, r3, #24
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	0c1b      	lsrs	r3, r3, #16
 800c068:	b2da      	uxtb	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	b2da      	uxtb	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	372c      	adds	r7, #44	@ 0x2c
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	58004000 	.word	0x58004000
 800c088:	a94656b9 	.word	0xa94656b9

0800c08c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	4a08      	ldr	r2, [pc, #32]	@ (800c0bc <shci_init+0x30>)
 800c09c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c09e:	4a08      	ldr	r2, [pc, #32]	@ (800c0c0 <shci_init+0x34>)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c0a4:	4806      	ldr	r0, [pc, #24]	@ (800c0c0 <shci_init+0x34>)
 800c0a6:	f000 f915 	bl	800c2d4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f898 	bl	800c1e4 <TlInit>

  return;
 800c0b4:	bf00      	nop
}
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	20001580 	.word	0x20001580
 800c0c0:	20001560 	.word	0x20001560

0800c0c4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c0ca:	4822      	ldr	r0, [pc, #136]	@ (800c154 <shci_user_evt_proc+0x90>)
 800c0cc:	f000 f926 	bl	800c31c <LST_is_empty>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d12b      	bne.n	800c12e <shci_user_evt_proc+0x6a>
 800c0d6:	4b20      	ldr	r3, [pc, #128]	@ (800c158 <shci_user_evt_proc+0x94>)
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d027      	beq.n	800c12e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c0de:	f107 030c 	add.w	r3, r7, #12
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	481b      	ldr	r0, [pc, #108]	@ (800c154 <shci_user_evt_proc+0x90>)
 800c0e6:	f000 f9a8 	bl	800c43a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c0ea:	4b1c      	ldr	r3, [pc, #112]	@ (800c15c <shci_user_evt_proc+0x98>)
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00c      	beq.n	800c10c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c0fa:	4b18      	ldr	r3, [pc, #96]	@ (800c15c <shci_user_evt_proc+0x98>)
 800c0fc:	69db      	ldr	r3, [r3, #28]
 800c0fe:	1d3a      	adds	r2, r7, #4
 800c100:	4610      	mov	r0, r2
 800c102:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c104:	793a      	ldrb	r2, [r7, #4]
 800c106:	4b14      	ldr	r3, [pc, #80]	@ (800c158 <shci_user_evt_proc+0x94>)
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	e002      	b.n	800c112 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c10c:	4b12      	ldr	r3, [pc, #72]	@ (800c158 <shci_user_evt_proc+0x94>)
 800c10e:	2201      	movs	r2, #1
 800c110:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c112:	4b11      	ldr	r3, [pc, #68]	@ (800c158 <shci_user_evt_proc+0x94>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d004      	beq.n	800c124 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	4618      	mov	r0, r3
 800c11e:	f001 f849 	bl	800d1b4 <TL_MM_EvtDone>
 800c122:	e004      	b.n	800c12e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	4619      	mov	r1, r3
 800c128:	480a      	ldr	r0, [pc, #40]	@ (800c154 <shci_user_evt_proc+0x90>)
 800c12a:	f000 f919 	bl	800c360 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c12e:	4809      	ldr	r0, [pc, #36]	@ (800c154 <shci_user_evt_proc+0x90>)
 800c130:	f000 f8f4 	bl	800c31c <LST_is_empty>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d107      	bne.n	800c14a <shci_user_evt_proc+0x86>
 800c13a:	4b07      	ldr	r3, [pc, #28]	@ (800c158 <shci_user_evt_proc+0x94>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c142:	4804      	ldr	r0, [pc, #16]	@ (800c154 <shci_user_evt_proc+0x90>)
 800c144:	f7f5 f9ae 	bl	80014a4 <shci_notify_asynch_evt>
  }


  return;
 800c148:	bf00      	nop
 800c14a:	bf00      	nop
}
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	200000c8 	.word	0x200000c8
 800c158:	200000d8 	.word	0x200000d8
 800c15c:	20001560 	.word	0x20001560

0800c160 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	60ba      	str	r2, [r7, #8]
 800c168:	607b      	str	r3, [r7, #4]
 800c16a:	4603      	mov	r3, r0
 800c16c:	81fb      	strh	r3, [r7, #14]
 800c16e:	460b      	mov	r3, r1
 800c170:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c172:	2000      	movs	r0, #0
 800c174:	f000 f868 	bl	800c248 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c178:	4b17      	ldr	r3, [pc, #92]	@ (800c1d8 <shci_send+0x78>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	89fa      	ldrh	r2, [r7, #14]
 800c17e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c182:	4b15      	ldr	r3, [pc, #84]	@ (800c1d8 <shci_send+0x78>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	7b7a      	ldrb	r2, [r7, #13]
 800c188:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c18a:	4b13      	ldr	r3, [pc, #76]	@ (800c1d8 <shci_send+0x78>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	330c      	adds	r3, #12
 800c190:	7b7a      	ldrb	r2, [r7, #13]
 800c192:	68b9      	ldr	r1, [r7, #8]
 800c194:	4618      	mov	r0, r3
 800c196:	f005 f980 	bl	801149a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800c19a:	4b10      	ldr	r3, [pc, #64]	@ (800c1dc <shci_send+0x7c>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800c1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e0 <shci_send+0x80>)
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c1aa:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800c1ae:	f7f5 f990 	bl	80014d2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f103 0008 	add.w	r0, r3, #8
 800c1b8:	4b07      	ldr	r3, [pc, #28]	@ (800c1d8 <shci_send+0x78>)
 800c1ba:	6819      	ldr	r1, [r3, #0]
 800c1bc:	4b06      	ldr	r3, [pc, #24]	@ (800c1d8 <shci_send+0x78>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	789b      	ldrb	r3, [r3, #2]
 800c1c2:	3303      	adds	r3, #3
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f005 f968 	bl	801149a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c1ca:	2001      	movs	r0, #1
 800c1cc:	f000 f83c 	bl	800c248 <Cmd_SetStatus>

  return;
 800c1d0:	bf00      	nop
}
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	200000d4 	.word	0x200000d4
 800c1dc:	20001584 	.word	0x20001584
 800c1e0:	20001560 	.word	0x20001560

0800c1e4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c1ec:	4a10      	ldr	r2, [pc, #64]	@ (800c230 <TlInit+0x4c>)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c1f2:	4810      	ldr	r0, [pc, #64]	@ (800c234 <TlInit+0x50>)
 800c1f4:	f000 f882 	bl	800c2fc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c1f8:	2001      	movs	r0, #1
 800c1fa:	f000 f825 	bl	800c248 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c238 <TlInit+0x54>)
 800c200:	2201      	movs	r2, #1
 800c202:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c204:	4b0d      	ldr	r3, [pc, #52]	@ (800c23c <TlInit+0x58>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00c      	beq.n	800c226 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c210:	4b0b      	ldr	r3, [pc, #44]	@ (800c240 <TlInit+0x5c>)
 800c212:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c214:	4b0b      	ldr	r3, [pc, #44]	@ (800c244 <TlInit+0x60>)
 800c216:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c218:	4b08      	ldr	r3, [pc, #32]	@ (800c23c <TlInit+0x58>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f107 020c 	add.w	r2, r7, #12
 800c220:	4610      	mov	r0, r2
 800c222:	4798      	blx	r3
  }

  return;
 800c224:	bf00      	nop
 800c226:	bf00      	nop
}
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	200000d4 	.word	0x200000d4
 800c234:	200000c8 	.word	0x200000c8
 800c238:	200000d8 	.word	0x200000d8
 800c23c:	20001560 	.word	0x20001560
 800c240:	0800c299 	.word	0x0800c299
 800c244:	0800c2b1 	.word	0x0800c2b1

0800c248 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10b      	bne.n	800c270 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c258:	4b0d      	ldr	r3, [pc, #52]	@ (800c290 <Cmd_SetStatus+0x48>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d003      	beq.n	800c268 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c260:	4b0b      	ldr	r3, [pc, #44]	@ (800c290 <Cmd_SetStatus+0x48>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2000      	movs	r0, #0
 800c266:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c268:	4b0a      	ldr	r3, [pc, #40]	@ (800c294 <Cmd_SetStatus+0x4c>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c26e:	e00b      	b.n	800c288 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c270:	4b08      	ldr	r3, [pc, #32]	@ (800c294 <Cmd_SetStatus+0x4c>)
 800c272:	2201      	movs	r2, #1
 800c274:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c276:	4b06      	ldr	r3, [pc, #24]	@ (800c290 <Cmd_SetStatus+0x48>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d004      	beq.n	800c288 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c27e:	4b04      	ldr	r3, [pc, #16]	@ (800c290 <Cmd_SetStatus+0x48>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2001      	movs	r0, #1
 800c284:	4798      	blx	r3
  return;
 800c286:	bf00      	nop
 800c288:	bf00      	nop
}
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20001580 	.word	0x20001580
 800c294:	200000d0 	.word	0x200000d0

0800c298 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	f7f5 f90b 	bl	80014bc <shci_cmd_resp_release>

  return;
 800c2a6:	bf00      	nop
}
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	4805      	ldr	r0, [pc, #20]	@ (800c2d0 <TlUserEvtReceived+0x20>)
 800c2bc:	f000 f876 	bl	800c3ac <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c2c0:	4803      	ldr	r0, [pc, #12]	@ (800c2d0 <TlUserEvtReceived+0x20>)
 800c2c2:	f7f5 f8ef 	bl	80014a4 <shci_notify_asynch_evt>

  return;
 800c2c6:	bf00      	nop
}
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200000c8 	.word	0x200000c8

0800c2d4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a05      	ldr	r2, [pc, #20]	@ (800c2f4 <shci_register_io_bus+0x20>)
 800c2e0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a04      	ldr	r2, [pc, #16]	@ (800c2f8 <shci_register_io_bus+0x24>)
 800c2e6:	611a      	str	r2, [r3, #16]

  return;
 800c2e8:	bf00      	nop
}
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr
 800c2f4:	0800d041 	.word	0x0800d041
 800c2f8:	0800d095 	.word	0x0800d095

0800c2fc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	605a      	str	r2, [r3, #4]
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c324:	f3ef 8310 	mrs	r3, PRIMASK
 800c328:	60fb      	str	r3, [r7, #12]
  return(result);
 800c32a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c32c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c32e:	b672      	cpsid	i
}
 800c330:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d102      	bne.n	800c342 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c33c:	2301      	movs	r3, #1
 800c33e:	75fb      	strb	r3, [r7, #23]
 800c340:	e001      	b.n	800c346 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c342:	2300      	movs	r3, #0
 800c344:	75fb      	strb	r3, [r7, #23]
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	f383 8810 	msr	PRIMASK, r3
}
 800c350:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c352:	7dfb      	ldrb	r3, [r7, #23]
}
 800c354:	4618      	mov	r0, r3
 800c356:	371c      	adds	r7, #28
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c36a:	f3ef 8310 	mrs	r3, PRIMASK
 800c36e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c370:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c372:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c374:	b672      	cpsid	i
}
 800c376:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	683a      	ldr	r2, [r7, #0]
 800c38a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	605a      	str	r2, [r3, #4]
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f383 8810 	msr	PRIMASK, r3
}
 800c39e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c3a0:	bf00      	nop
 800c3a2:	371c      	adds	r7, #28
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3b6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c3be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3c0:	b672      	cpsid	i
}
 800c3c2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	601a      	str	r2, [r3, #0]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	f383 8810 	msr	PRIMASK, r3
}
 800c3ea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c3ec:	bf00      	nop
 800c3ee:	371c      	adds	r7, #28
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c400:	f3ef 8310 	mrs	r3, PRIMASK
 800c404:	60fb      	str	r3, [r7, #12]
  return(result);
 800c406:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c408:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c40a:	b672      	cpsid	i
}
 800c40c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	6812      	ldr	r2, [r2, #0]
 800c416:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	6852      	ldr	r2, [r2, #4]
 800c420:	605a      	str	r2, [r3, #4]
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	f383 8810 	msr	PRIMASK, r3
}
 800c42c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c42e:	bf00      	nop
 800c430:	371c      	adds	r7, #28
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b086      	sub	sp, #24
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c444:	f3ef 8310 	mrs	r3, PRIMASK
 800c448:	60fb      	str	r3, [r7, #12]
  return(result);
 800c44a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c44c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c44e:	b672      	cpsid	i
}
 800c450:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff ffca 	bl	800c3f8 <LST_remove_node>
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f383 8810 	msr	PRIMASK, r3
}
 800c46e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c470:	bf00      	nop
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2200      	movs	r2, #0
 800c490:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	887a      	ldrh	r2, [r7, #2]
 800c4ae:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	7e3a      	ldrb	r2, [r7, #24]
 800c4b4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800c4b6:	7e3b      	ldrb	r3, [r7, #24]
 800c4b8:	f003 0302 	and.w	r3, r3, #2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d006      	beq.n	800c4ce <CircularQueue_Init+0x56>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	891b      	ldrh	r3, [r3, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800c4c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4cc:	e000      	b.n	800c4d0 <CircularQueue_Init+0x58>
  }
  return 0;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08e      	sub	sp, #56	@ 0x38
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800c500:	2300      	movs	r3, #0
 800c502:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800c504:	2300      	movs	r3, #0
 800c506:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	891b      	ldrh	r3, [r3, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <CircularQueue_Add+0x38>
 800c510:	2302      	movs	r3, #2
 800c512:	e000      	b.n	800c516 <CircularQueue_Add+0x3a>
 800c514:	2300      	movs	r3, #0
 800c516:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d029      	beq.n	800c574 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	891b      	ldrh	r3, [r3, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d122      	bne.n	800c56e <CircularQueue_Add+0x92>
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	4413      	add	r3, r2
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	1c59      	adds	r1, r3, #1
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	4299      	cmp	r1, r3
 800c546:	d306      	bcc.n	800c556 <CircularQueue_Add+0x7a>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6919      	ldr	r1, [r3, #16]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	1acb      	subs	r3, r1, r3
 800c552:	3301      	adds	r3, #1
 800c554:	e002      	b.n	800c55c <CircularQueue_Add+0x80>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	3301      	adds	r3, #1
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	021b      	lsls	r3, r3, #8
 800c562:	b29b      	uxth	r3, r3
 800c564:	4403      	add	r3, r0
 800c566:	b29b      	uxth	r3, r3
 800c568:	3302      	adds	r3, #2
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	e001      	b.n	800c572 <CircularQueue_Add+0x96>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	891b      	ldrh	r3, [r3, #8]
 800c572:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	891b      	ldrh	r3, [r3, #8]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	891b      	ldrh	r3, [r3, #8]
 800c580:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	691a      	ldr	r2, [r3, #16]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d307      	bcc.n	800c59e <CircularQueue_Add+0xc2>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	685a      	ldr	r2, [r3, #4]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6919      	ldr	r1, [r3, #16]
 800c596:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c598:	440b      	add	r3, r1
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	e000      	b.n	800c5a0 <CircularQueue_Add+0xc4>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c5a2:	88fa      	ldrh	r2, [r7, #6]
 800c5a4:	7ffb      	ldrb	r3, [r7, #31]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	fb02 f303 	mul.w	r3, r2, r3
 800c5b0:	69ba      	ldr	r2, [r7, #24]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d80b      	bhi.n	800c5ce <CircularQueue_Add+0xf2>
 800c5b6:	88fa      	ldrh	r2, [r7, #6]
 800c5b8:	7ffb      	ldrb	r3, [r7, #31]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	461a      	mov	r2, r3
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5c4:	fb01 f202 	mul.w	r2, r1, r2
 800c5c8:	1a9b      	subs	r3, r3, r2
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	e000      	b.n	800c5d0 <CircularQueue_Add+0xf4>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c5d2:	7dfa      	ldrb	r2, [r7, #23]
 800c5d4:	7ffb      	ldrb	r3, [r7, #31]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	bf8c      	ite	hi
 800c5da:	2301      	movhi	r3, #1
 800c5dc:	2300      	movls	r3, #0
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c5e2:	7fbb      	ldrb	r3, [r7, #30]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d008      	beq.n	800c5fa <CircularQueue_Add+0x11e>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	7f1b      	ldrb	r3, [r3, #28]
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d002      	beq.n	800c5fa <CircularQueue_Add+0x11e>
 800c5f4:	7dfb      	ldrb	r3, [r7, #23]
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	e000      	b.n	800c5fc <CircularQueue_Add+0x120>
 800c5fa:	8bbb      	ldrh	r3, [r7, #28]
 800c5fc:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c5fe:	7fbb      	ldrb	r3, [r7, #30]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d008      	beq.n	800c616 <CircularQueue_Add+0x13a>
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	7f1b      	ldrb	r3, [r3, #28]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <CircularQueue_Add+0x13a>
 800c610:	7ffb      	ldrb	r3, [r7, #31]
 800c612:	b29b      	uxth	r3, r3
 800c614:	e000      	b.n	800c618 <CircularQueue_Add+0x13c>
 800c616:	8bbb      	ldrh	r3, [r7, #28]
 800c618:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c61a:	88fb      	ldrh	r3, [r7, #6]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 817e 	beq.w	800c91e <CircularQueue_Add+0x442>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	695a      	ldr	r2, [r3, #20]
 800c626:	88f9      	ldrh	r1, [r7, #6]
 800c628:	7ffb      	ldrb	r3, [r7, #31]
 800c62a:	440b      	add	r3, r1
 800c62c:	4619      	mov	r1, r3
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	fb01 f303 	mul.w	r3, r1, r3
 800c634:	441a      	add	r2, r3
 800c636:	8bbb      	ldrh	r3, [r7, #28]
 800c638:	441a      	add	r2, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	429a      	cmp	r2, r3
 800c640:	f200 816d 	bhi.w	800c91e <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800c644:	2300      	movs	r3, #0
 800c646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c648:	e14a      	b.n	800c8e0 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	691a      	ldr	r2, [r3, #16]
 800c64e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c650:	441a      	add	r2, r3
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	429a      	cmp	r2, r3
 800c658:	d307      	bcc.n	800c66a <CircularQueue_Add+0x18e>
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	691a      	ldr	r2, [r3, #16]
 800c65e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	e003      	b.n	800c672 <CircularQueue_Add+0x196>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	691a      	ldr	r2, [r3, #16]
 800c66e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c670:	4413      	add	r3, r2
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	891b      	ldrh	r3, [r3, #8]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d130      	bne.n	800c6e6 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68a:	1c59      	adds	r1, r3, #1
 800c68c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c68e:	4413      	add	r3, r2
 800c690:	88fa      	ldrh	r2, [r7, #6]
 800c692:	b2d2      	uxtb	r2, r2
 800c694:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d304      	bcc.n	800c6aa <CircularQueue_Add+0x1ce>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6a6:	1ad3      	subs	r3, r2, r3
 800c6a8:	e000      	b.n	800c6ac <CircularQueue_Add+0x1d0>
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800c6ae:	88fb      	ldrh	r3, [r7, #6]
 800c6b0:	0a1b      	lsrs	r3, r3, #8
 800c6b2:	b298      	uxth	r0, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ba:	1c59      	adds	r1, r3, #1
 800c6bc:	6339      	str	r1, [r7, #48]	@ 0x30
 800c6be:	4413      	add	r3, r2
 800c6c0:	b2c2      	uxtb	r2, r0
 800c6c2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d304      	bcc.n	800c6d8 <CircularQueue_Add+0x1fc>
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	e000      	b.n	800c6da <CircularQueue_Add+0x1fe>
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6da:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	1c9a      	adds	r2, r3, #2
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800c6e6:	88fa      	ldrh	r2, [r7, #6]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6859      	ldr	r1, [r3, #4]
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ee:	1acb      	subs	r3, r1, r3
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	bf28      	it	cs
 800c6f4:	4613      	movcs	r3, r2
 800c6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800c6f8:	88fb      	ldrh	r3, [r7, #6]
 800c6fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d007      	beq.n	800c710 <CircularQueue_Add+0x234>
 800c700:	88fb      	ldrh	r3, [r7, #6]
 800c702:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c704:	429a      	cmp	r2, r3
 800c706:	d225      	bcs.n	800c754 <CircularQueue_Add+0x278>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	7f1b      	ldrb	r3, [r3, #28]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d121      	bne.n	800c754 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c716:	18d0      	adds	r0, r2, r3
 800c718:	88fb      	ldrh	r3, [r7, #6]
 800c71a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c71c:	fb02 f303 	mul.w	r3, r2, r3
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	4413      	add	r3, r2
 800c724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c726:	4619      	mov	r1, r3
 800c728:	f004 feb7 	bl	801149a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	695a      	ldr	r2, [r3, #20]
 800c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c732:	441a      	add	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c738:	2300      	movs	r3, #0
 800c73a:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c740:	88fa      	ldrh	r2, [r7, #6]
 800c742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c748:	7ffb      	ldrb	r3, [r7, #31]
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	88fb      	ldrh	r3, [r7, #6]
 800c74e:	4413      	add	r3, r2
 800c750:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c752:	e0a4      	b.n	800c89e <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 80a1 	beq.w	800c89e <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	7f1b      	ldrb	r3, [r3, #28]
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	2b00      	cmp	r3, #0
 800c766:	d03a      	beq.n	800c7de <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	891b      	ldrh	r3, [r3, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10d      	bne.n	800c78c <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c776:	3b02      	subs	r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	22ff      	movs	r2, #255	@ 0xff
 800c77c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c784:	3b01      	subs	r3, #1
 800c786:	4413      	add	r3, r2
 800c788:	22ff      	movs	r2, #255	@ 0xff
 800c78a:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	695a      	ldr	r2, [r3, #20]
 800c790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c792:	441a      	add	r2, r3
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c79c:	88fb      	ldrh	r3, [r7, #6]
 800c79e:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	891b      	ldrh	r3, [r3, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d16f      	bne.n	800c88c <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b2:	1c59      	adds	r1, r3, #1
 800c7b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c7b6:	4413      	add	r3, r2
 800c7b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c0:	0a18      	lsrs	r0, r3, #8
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c8:	1c59      	adds	r1, r3, #1
 800c7ca:	6339      	str	r1, [r7, #48]	@ 0x30
 800c7cc:	4413      	add	r3, r2
 800c7ce:	b2c2      	uxtb	r2, r0
 800c7d0:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	1c9a      	adds	r2, r3, #2
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	615a      	str	r2, [r3, #20]
 800c7dc:	e056      	b.n	800c88c <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	7f1b      	ldrb	r3, [r3, #28]
 800c7e2:	f003 0302 	and.w	r3, r3, #2
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d050      	beq.n	800c88c <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	891b      	ldrh	r3, [r3, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d14a      	bne.n	800c888 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	3b02      	subs	r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7fe:	b2d2      	uxtb	r2, r2
 800c800:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c804:	0a19      	lsrs	r1, r3, #8
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c80c:	3b01      	subs	r3, #1
 800c80e:	4413      	add	r3, r2
 800c810:	b2ca      	uxtb	r2, r1
 800c812:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	18d0      	adds	r0, r2, r3
 800c81c:	88fb      	ldrh	r3, [r7, #6]
 800c81e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c820:	fb02 f303 	mul.w	r3, r2, r3
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	4413      	add	r3, r2
 800c828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c82a:	4619      	mov	r1, r3
 800c82c:	f004 fe35 	bl	801149a <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	695a      	ldr	r2, [r3, #20]
 800c834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c836:	441a      	add	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c83e:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c840:	88fa      	ldrh	r2, [r7, #6]
 800c842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	1c5a      	adds	r2, r3, #1
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c852:	2300      	movs	r3, #0
 800c854:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85c:	1c59      	adds	r1, r3, #1
 800c85e:	6339      	str	r1, [r7, #48]	@ 0x30
 800c860:	4413      	add	r3, r2
 800c862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86a:	0a18      	lsrs	r0, r3, #8
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	1c59      	adds	r1, r3, #1
 800c874:	6339      	str	r1, [r7, #48]	@ 0x30
 800c876:	4413      	add	r3, r2
 800c878:	b2c2      	uxtb	r2, r0
 800c87a:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	1c9a      	adds	r2, r3, #2
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	615a      	str	r2, [r3, #20]
 800c886:	e001      	b.n	800c88c <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	e049      	b.n	800c920 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c88c:	7ffb      	ldrb	r3, [r7, #31]
 800c88e:	b29a      	uxth	r2, r3
 800c890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c892:	b29b      	uxth	r3, r3
 800c894:	4413      	add	r3, r2
 800c896:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d015      	beq.n	800c8d0 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8aa:	18d0      	adds	r0, r2, r3
 800c8ac:	88fb      	ldrh	r3, [r7, #6]
 800c8ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8b0:	fb03 f202 	mul.w	r2, r3, r2
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	4413      	add	r3, r2
 800c8b8:	68ba      	ldr	r2, [r7, #8]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8be:	4619      	mov	r1, r3
 800c8c0:	f004 fdeb 	bl	801149a <memcpy>
        q->byteCount += NbBytesToCopy;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	695a      	ldr	r2, [r3, #20]
 800c8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ca:	441a      	add	r2, r3
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	699b      	ldr	r3, [r3, #24]
 800c8d4:	1c5a      	adds	r2, r3, #1
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8dc:	3301      	adds	r3, #1
 800c8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	f4ff aeb0 	bcc.w	800c64a <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6919      	ldr	r1, [r3, #16]
 800c8f2:	7ffb      	ldrb	r3, [r7, #31]
 800c8f4:	4419      	add	r1, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	4299      	cmp	r1, r3
 800c8fc:	d307      	bcc.n	800c90e <CircularQueue_Add+0x432>
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6919      	ldr	r1, [r3, #16]
 800c902:	7ffb      	ldrb	r3, [r7, #31]
 800c904:	4419      	add	r1, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	1acb      	subs	r3, r1, r3
 800c90c:	e003      	b.n	800c916 <CircularQueue_Add+0x43a>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6919      	ldr	r1, [r3, #16]
 800c912:	7ffb      	ldrb	r3, [r7, #31]
 800c914:	440b      	add	r3, r1
 800c916:	4413      	add	r3, r2
 800c918:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	e000      	b.n	800c920 <CircularQueue_Add+0x444>
    return NULL;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3738      	adds	r7, #56	@ 0x38
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	891b      	ldrh	r3, [r3, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <CircularQueue_Remove+0x1e>
 800c942:	2302      	movs	r3, #2
 800c944:	e000      	b.n	800c948 <CircularQueue_Remove+0x20>
 800c946:	2300      	movs	r3, #0
 800c948:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	695b      	ldr	r3, [r3, #20]
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 80ca 	beq.w	800caec <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	891b      	ldrh	r3, [r3, #8]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d120      	bne.n	800c9a2 <CircularQueue_Remove+0x7a>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	4413      	add	r3, r2
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	4618      	mov	r0, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	1c59      	adds	r1, r3, #1
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	4299      	cmp	r1, r3
 800c97e:	d306      	bcc.n	800c98e <CircularQueue_Remove+0x66>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68d9      	ldr	r1, [r3, #12]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	1acb      	subs	r3, r1, r3
 800c98a:	3301      	adds	r3, #1
 800c98c:	e002      	b.n	800c994 <CircularQueue_Remove+0x6c>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	3301      	adds	r3, #1
 800c994:	4413      	add	r3, r2
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	4403      	add	r3, r0
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	e001      	b.n	800c9a6 <CircularQueue_Remove+0x7e>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	891b      	ldrh	r3, [r3, #8]
 800c9a6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7f1b      	ldrb	r3, [r3, #28]
 800c9ac:	f003 0301 	and.w	r3, r3, #1
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d056      	beq.n	800ca62 <CircularQueue_Remove+0x13a>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	7f1b      	ldrb	r3, [r3, #28]
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d150      	bne.n	800ca62 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c9c0:	897b      	ldrh	r3, [r7, #10]
 800c9c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d103      	bne.n	800c9d2 <CircularQueue_Remove+0xaa>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	891b      	ldrh	r3, [r3, #8]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d012      	beq.n	800c9f8 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68da      	ldr	r2, [r3, #12]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d941      	bls.n	800ca62 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	891b      	ldrh	r3, [r3, #8]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d03d      	beq.n	800ca62 <CircularQueue_Remove+0x13a>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685a      	ldr	r2, [r3, #4]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	8912      	ldrh	r2, [r2, #8]
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d234      	bcs.n	800ca62 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	695a      	ldr	r2, [r3, #20]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	68d9      	ldr	r1, [r3, #12]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	1acb      	subs	r3, r1, r3
 800ca06:	441a      	add	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	891b      	ldrh	r3, [r3, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d120      	bne.n	800ca5c <CircularQueue_Remove+0x134>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	4413      	add	r3, r2
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	4618      	mov	r0, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	1c59      	adds	r1, r3, #1
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	4299      	cmp	r1, r3
 800ca38:	d306      	bcc.n	800ca48 <CircularQueue_Remove+0x120>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	68d9      	ldr	r1, [r3, #12]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	1acb      	subs	r3, r1, r3
 800ca44:	3301      	adds	r3, #1
 800ca46:	e002      	b.n	800ca4e <CircularQueue_Remove+0x126>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	4413      	add	r3, r2
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	4403      	add	r3, r0
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	e001      	b.n	800ca60 <CircularQueue_Remove+0x138>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	891b      	ldrh	r3, [r3, #8]
 800ca60:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68d9      	ldr	r1, [r3, #12]
 800ca6a:	7a7b      	ldrb	r3, [r7, #9]
 800ca6c:	4419      	add	r1, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	4299      	cmp	r1, r3
 800ca74:	d307      	bcc.n	800ca86 <CircularQueue_Remove+0x15e>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68d9      	ldr	r1, [r3, #12]
 800ca7a:	7a7b      	ldrb	r3, [r7, #9]
 800ca7c:	4419      	add	r1, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	1acb      	subs	r3, r1, r3
 800ca84:	e003      	b.n	800ca8e <CircularQueue_Remove+0x166>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68d9      	ldr	r1, [r3, #12]
 800ca8a:	7a7b      	ldrb	r3, [r7, #9]
 800ca8c:	440b      	add	r3, r1
 800ca8e:	4413      	add	r3, r2
 800ca90:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	8979      	ldrh	r1, [r7, #10]
 800ca98:	7a7a      	ldrb	r2, [r7, #9]
 800ca9a:	440a      	add	r2, r1
 800ca9c:	1a9a      	subs	r2, r3, r2
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d01b      	beq.n	800cae2 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	897b      	ldrh	r3, [r7, #10]
 800cab0:	441a      	add	r2, r3
 800cab2:	7a7b      	ldrb	r3, [r7, #9]
 800cab4:	441a      	add	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d309      	bcc.n	800cad2 <CircularQueue_Remove+0x1aa>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	897b      	ldrh	r3, [r7, #10]
 800cac4:	441a      	add	r2, r3
 800cac6:	7a7b      	ldrb	r3, [r7, #9]
 800cac8:	441a      	add	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	e005      	b.n	800cade <CircularQueue_Remove+0x1b6>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68da      	ldr	r2, [r3, #12]
 800cad6:	897b      	ldrh	r3, [r7, #10]
 800cad8:	441a      	add	r2, r3
 800cada:	7a7b      	ldrb	r3, [r7, #9]
 800cadc:	4413      	add	r3, r2
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	1e5a      	subs	r2, r3, #1
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	897a      	ldrh	r2, [r7, #10]
 800caf6:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800caf8:	68fb      	ldr	r3, [r7, #12]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr

0800cb06 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800cb06:	b480      	push	{r7}
 800cb08:	b087      	sub	sp, #28
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
 800cb0e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	891b      	ldrh	r3, [r3, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <CircularQueue_Sense+0x1e>
 800cb20:	2302      	movs	r3, #2
 800cb22:	e000      	b.n	800cb26 <CircularQueue_Sense+0x20>
 800cb24:	2300      	movs	r3, #0
 800cb26:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	695b      	ldr	r3, [r3, #20]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	f000 808e 	beq.w	800cc56 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	891b      	ldrh	r3, [r3, #8]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d120      	bne.n	800cb8a <CircularQueue_Sense+0x84>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	4413      	add	r3, r2
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	4618      	mov	r0, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	1c59      	adds	r1, r3, #1
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	4299      	cmp	r1, r3
 800cb66:	d306      	bcc.n	800cb76 <CircularQueue_Sense+0x70>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	68d9      	ldr	r1, [r3, #12]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	1acb      	subs	r3, r1, r3
 800cb72:	3301      	adds	r3, #1
 800cb74:	e002      	b.n	800cb7c <CircularQueue_Sense+0x76>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	021b      	lsls	r3, r3, #8
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	4403      	add	r3, r0
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	e001      	b.n	800cb8e <CircularQueue_Sense+0x88>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	891b      	ldrh	r3, [r3, #8]
 800cb8e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7f1b      	ldrb	r3, [r3, #28]
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d047      	beq.n	800cc2c <CircularQueue_Sense+0x126>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	7f1b      	ldrb	r3, [r3, #28]
 800cba0:	f003 0302 	and.w	r3, r3, #2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d141      	bne.n	800cc2c <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cba8:	8a7b      	ldrh	r3, [r7, #18]
 800cbaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d103      	bne.n	800cbba <CircularQueue_Sense+0xb4>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	891b      	ldrh	r3, [r3, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d012      	beq.n	800cbe0 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68da      	ldr	r2, [r3, #12]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d932      	bls.n	800cc2c <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	891b      	ldrh	r3, [r3, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d02e      	beq.n	800cc2c <CircularQueue_Sense+0x126>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	8912      	ldrh	r2, [r2, #8]
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d225      	bcs.n	800cc2c <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	891b      	ldrh	r3, [r3, #8]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d11c      	bne.n	800cc26 <CircularQueue_Sense+0x120>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	1c59      	adds	r1, r3, #1
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	4299      	cmp	r1, r3
 800cc06:	d305      	bcc.n	800cc14 <CircularQueue_Sense+0x10e>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	68f9      	ldr	r1, [r7, #12]
 800cc0e:	1acb      	subs	r3, r1, r3
 800cc10:	3301      	adds	r3, #1
 800cc12:	e001      	b.n	800cc18 <CircularQueue_Sense+0x112>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3301      	adds	r3, #1
 800cc18:	4413      	add	r3, r2
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	021b      	lsls	r3, r3, #8
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	4403      	add	r3, r0
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	e001      	b.n	800cc2a <CircularQueue_Sense+0x124>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	891b      	ldrh	r3, [r3, #8]
 800cc2a:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	7af9      	ldrb	r1, [r7, #11]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	4419      	add	r1, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	4299      	cmp	r1, r3
 800cc3c:	d306      	bcc.n	800cc4c <CircularQueue_Sense+0x146>
 800cc3e:	7af9      	ldrb	r1, [r7, #11]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4419      	add	r1, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	1acb      	subs	r3, r1, r3
 800cc4a:	e002      	b.n	800cc52 <CircularQueue_Sense+0x14c>
 800cc4c:	7af9      	ldrb	r1, [r7, #11]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	440b      	add	r3, r1
 800cc52:	4413      	add	r3, r2
 800cc54:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	8a7a      	ldrh	r2, [r7, #18]
 800cc60:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800cc62:	697b      	ldr	r3, [r7, #20]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	371c      	adds	r7, #28
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800cc70:	b480      	push	{r7}
 800cc72:	af00      	add	r7, sp, #0
  return;
 800cc74:	bf00      	nop
}
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800cc7e:	b480      	push	{r7}
 800cc80:	af00      	add	r7, sp, #0
  return;
 800cc82:	bf00      	nop
}
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	af00      	add	r7, sp, #0
  return;
 800cc90:	bf00      	nop
}
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	af00      	add	r7, sp, #0
  return;
 800cc9e:	bf00      	nop
}
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	af00      	add	r7, sp, #0
  return;
 800ccac:	bf00      	nop
}
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ccb6:	b480      	push	{r7}
 800ccb8:	af00      	add	r7, sp, #0
  return;
 800ccba:	bf00      	nop
}
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	af00      	add	r7, sp, #0
  return;
 800ccc8:	bf00      	nop
}
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ccd2:	b480      	push	{r7}
 800ccd4:	af00      	add	r7, sp, #0
  return;
 800ccd6:	bf00      	nop
}
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800cce0:	b480      	push	{r7}
 800cce2:	af00      	add	r7, sp, #0
  return;
 800cce4:	bf00      	nop
}
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ccee:	b480      	push	{r7}
 800ccf0:	af00      	add	r7, sp, #0
  return;
 800ccf2:	bf00      	nop
}
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	af00      	add	r7, sp, #0
  return;
 800cd00:	bf00      	nop
}
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	af00      	add	r7, sp, #0
  return;
 800cd0e:	bf00      	nop
}
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	af00      	add	r7, sp, #0
  return;
 800cd1c:	bf00      	nop
}
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800cd26:	b480      	push	{r7}
 800cd28:	af00      	add	r7, sp, #0
  return;
 800cd2a:	bf00      	nop
}
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800cd34:	b480      	push	{r7}
 800cd36:	af00      	add	r7, sp, #0
  return;
 800cd38:	bf00      	nop
}
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800cd42:	b480      	push	{r7}
 800cd44:	af00      	add	r7, sp, #0
  return;
 800cd46:	bf00      	nop
}
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800cd50:	b480      	push	{r7}
 800cd52:	af00      	add	r7, sp, #0
  return;
 800cd54:	bf00      	nop
}
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
	...

0800cd60 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800cd64:	4b04      	ldr	r3, [pc, #16]	@ (800cd78 <SVCCTL_Init+0x18>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800cd6a:	4b04      	ldr	r3, [pc, #16]	@ (800cd7c <SVCCTL_Init+0x1c>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800cd70:	f000 f806 	bl	800cd80 <SVCCTL_SvcInit>

  return;
 800cd74:	bf00      	nop
}
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	200000a4 	.word	0x200000a4
 800cd7c:	200000c4 	.word	0x200000c4

0800cd80 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	af00      	add	r7, sp, #0
  BAS_Init();
 800cd84:	f7ff ff74 	bl	800cc70 <BAS_Init>

  BLS_Init();
 800cd88:	f7ff ff79 	bl	800cc7e <BLS_Init>

  CRS_STM_Init();
 800cd8c:	f7ff ff7e 	bl	800cc8c <CRS_STM_Init>

  DIS_Init();
 800cd90:	f7ff ff83 	bl	800cc9a <DIS_Init>

  EDS_STM_Init();
 800cd94:	f7ff ff88 	bl	800cca8 <EDS_STM_Init>

  HIDS_Init();
 800cd98:	f7ff ff8d 	bl	800ccb6 <HIDS_Init>

  HRS_Init();
 800cd9c:	f7ff ff92 	bl	800ccc4 <HRS_Init>

  HTS_Init();
 800cda0:	f7ff ff97 	bl	800ccd2 <HTS_Init>

  IAS_Init();
 800cda4:	f7ff ff9c 	bl	800cce0 <IAS_Init>

  LLS_Init();
 800cda8:	f7ff ffa1 	bl	800ccee <LLS_Init>

  TPS_Init();
 800cdac:	f7ff ffa6 	bl	800ccfc <TPS_Init>

  MOTENV_STM_Init();
 800cdb0:	f7ff ffab 	bl	800cd0a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800cdb4:	f7ff ffb0 	bl	800cd18 <P2PS_STM_Init>

  ZDD_STM_Init();
 800cdb8:	f7ff ffb5 	bl	800cd26 <ZDD_STM_Init>

  OTAS_STM_Init();
 800cdbc:	f7ff ffba 	bl	800cd34 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800cdc0:	f7ff ffc6 	bl	800cd50 <BVOPUS_STM_Init>

  MESH_Init();
 800cdc4:	f7ff ffbd 	bl	800cd42 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800cdc8:	f001 fc26 	bl	800e618 <SVCCTL_InitCustomSvc>
  
  return;
 800cdcc:	bf00      	nop
}
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800cdd8:	4b09      	ldr	r3, [pc, #36]	@ (800ce00 <SVCCTL_RegisterSvcHandler+0x30>)
 800cdda:	7f1b      	ldrb	r3, [r3, #28]
 800cddc:	4619      	mov	r1, r3
 800cdde:	4a08      	ldr	r2, [pc, #32]	@ (800ce00 <SVCCTL_RegisterSvcHandler+0x30>)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800cde6:	4b06      	ldr	r3, [pc, #24]	@ (800ce00 <SVCCTL_RegisterSvcHandler+0x30>)
 800cde8:	7f1b      	ldrb	r3, [r3, #28]
 800cdea:	3301      	adds	r3, #1
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	4b04      	ldr	r3, [pc, #16]	@ (800ce00 <SVCCTL_RegisterSvcHandler+0x30>)
 800cdf0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800cdf2:	bf00      	nop
}
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	200000a4 	.word	0x200000a4

0800ce04 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2bff      	cmp	r3, #255	@ 0xff
 800ce1c:	d125      	bne.n	800ce6a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	3302      	adds	r3, #2
 800ce22:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce32:	d118      	bne.n	800ce66 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ce34:	2300      	movs	r3, #0
 800ce36:	757b      	strb	r3, [r7, #21]
 800ce38:	e00d      	b.n	800ce56 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ce3a:	7d7b      	ldrb	r3, [r7, #21]
 800ce3c:	4a1a      	ldr	r2, [pc, #104]	@ (800cea8 <SVCCTL_UserEvtRx+0xa4>)
 800ce3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
 800ce46:	4603      	mov	r3, r0
 800ce48:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d108      	bne.n	800ce62 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ce50:	7d7b      	ldrb	r3, [r7, #21]
 800ce52:	3301      	adds	r3, #1
 800ce54:	757b      	strb	r3, [r7, #21]
 800ce56:	4b14      	ldr	r3, [pc, #80]	@ (800cea8 <SVCCTL_UserEvtRx+0xa4>)
 800ce58:	7f1b      	ldrb	r3, [r3, #28]
 800ce5a:	7d7a      	ldrb	r2, [r7, #21]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d3ec      	bcc.n	800ce3a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ce60:	e002      	b.n	800ce68 <SVCCTL_UserEvtRx+0x64>
              break;
 800ce62:	bf00      	nop
          break;
 800ce64:	e000      	b.n	800ce68 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ce66:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ce68:	e000      	b.n	800ce6c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ce6a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d00f      	beq.n	800ce92 <SVCCTL_UserEvtRx+0x8e>
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	dc10      	bgt.n	800ce98 <SVCCTL_UserEvtRx+0x94>
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d002      	beq.n	800ce80 <SVCCTL_UserEvtRx+0x7c>
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d006      	beq.n	800ce8c <SVCCTL_UserEvtRx+0x88>
 800ce7e:	e00b      	b.n	800ce98 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 fb27 	bl	800d4d4 <SVCCTL_App_Notification>
 800ce86:	4603      	mov	r3, r0
 800ce88:	75bb      	strb	r3, [r7, #22]
      break;
 800ce8a:	e008      	b.n	800ce9e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	75bb      	strb	r3, [r7, #22]
      break;
 800ce90:	e005      	b.n	800ce9e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ce92:	2300      	movs	r3, #0
 800ce94:	75bb      	strb	r3, [r7, #22]
      break;
 800ce96:	e002      	b.n	800ce9e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	75bb      	strb	r3, [r7, #22]
      break;
 800ce9c:	bf00      	nop
  }

  return (return_status);
 800ce9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	200000a4 	.word	0x200000a4

0800ceac <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ceb0:	f001 fed2 	bl	800ec58 <HW_IPCC_Enable>

  return;
 800ceb4:	bf00      	nop
}
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <TL_Init>:


void TL_Init( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800cebc:	4b10      	ldr	r3, [pc, #64]	@ (800cf00 <TL_Init+0x48>)
 800cebe:	4a11      	ldr	r2, [pc, #68]	@ (800cf04 <TL_Init+0x4c>)
 800cec0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800cec2:	4b0f      	ldr	r3, [pc, #60]	@ (800cf00 <TL_Init+0x48>)
 800cec4:	4a10      	ldr	r2, [pc, #64]	@ (800cf08 <TL_Init+0x50>)
 800cec6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800cec8:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <TL_Init+0x48>)
 800ceca:	4a10      	ldr	r2, [pc, #64]	@ (800cf0c <TL_Init+0x54>)
 800cecc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800cece:	4b0c      	ldr	r3, [pc, #48]	@ (800cf00 <TL_Init+0x48>)
 800ced0:	4a0f      	ldr	r2, [pc, #60]	@ (800cf10 <TL_Init+0x58>)
 800ced2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ced4:	4b0a      	ldr	r3, [pc, #40]	@ (800cf00 <TL_Init+0x48>)
 800ced6:	4a0f      	ldr	r2, [pc, #60]	@ (800cf14 <TL_Init+0x5c>)
 800ced8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ceda:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <TL_Init+0x48>)
 800cedc:	4a0e      	ldr	r2, [pc, #56]	@ (800cf18 <TL_Init+0x60>)
 800cede:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800cee0:	4b07      	ldr	r3, [pc, #28]	@ (800cf00 <TL_Init+0x48>)
 800cee2:	4a0e      	ldr	r2, [pc, #56]	@ (800cf1c <TL_Init+0x64>)
 800cee4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800cee6:	4b06      	ldr	r3, [pc, #24]	@ (800cf00 <TL_Init+0x48>)
 800cee8:	4a0d      	ldr	r2, [pc, #52]	@ (800cf20 <TL_Init+0x68>)
 800ceea:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ceec:	4b04      	ldr	r3, [pc, #16]	@ (800cf00 <TL_Init+0x48>)
 800ceee:	4a0d      	ldr	r2, [pc, #52]	@ (800cf24 <TL_Init+0x6c>)
 800cef0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800cef2:	4b03      	ldr	r3, [pc, #12]	@ (800cf00 <TL_Init+0x48>)
 800cef4:	4a0c      	ldr	r2, [pc, #48]	@ (800cf28 <TL_Init+0x70>)
 800cef6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800cef8:	f001 fec2 	bl	800ec80 <HW_IPCC_Init>

  return;
 800cefc:	bf00      	nop
}
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20030000 	.word	0x20030000
 800cf04:	20030028 	.word	0x20030028
 800cf08:	20030048 	.word	0x20030048
 800cf0c:	20030058 	.word	0x20030058
 800cf10:	20030068 	.word	0x20030068
 800cf14:	20030070 	.word	0x20030070
 800cf18:	20030078 	.word	0x20030078
 800cf1c:	20030080 	.word	0x20030080
 800cf20:	2003009c 	.word	0x2003009c
 800cf24:	200300a0 	.word	0x200300a0
 800cf28:	200300ac 	.word	0x200300ac

0800cf2c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800cf38:	4811      	ldr	r0, [pc, #68]	@ (800cf80 <TL_BLE_Init+0x54>)
 800cf3a:	f7ff f9df 	bl	800c2fc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800cf3e:	4b11      	ldr	r3, [pc, #68]	@ (800cf84 <TL_BLE_Init+0x58>)
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	68da      	ldr	r2, [r3, #12]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	4a0c      	ldr	r2, [pc, #48]	@ (800cf88 <TL_BLE_Init+0x5c>)
 800cf58:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	4a08      	ldr	r2, [pc, #32]	@ (800cf80 <TL_BLE_Init+0x54>)
 800cf5e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800cf60:	f001 fea4 	bl	800ecac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a08      	ldr	r2, [pc, #32]	@ (800cf8c <TL_BLE_Init+0x60>)
 800cf6a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	4a07      	ldr	r2, [pc, #28]	@ (800cf90 <TL_BLE_Init+0x64>)
 800cf72:	6013      	str	r3, [r2, #0]

  return 0;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	200300c8 	.word	0x200300c8
 800cf84:	20030000 	.word	0x20030000
 800cf88:	20030a58 	.word	0x20030a58
 800cf8c:	20001590 	.word	0x20001590
 800cf90:	20001594 	.word	0x20001594

0800cf94 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800cfa0:	4b09      	ldr	r3, [pc, #36]	@ (800cfc8 <TL_BLE_SendCmd+0x34>)
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800cfaa:	4b07      	ldr	r3, [pc, #28]	@ (800cfc8 <TL_BLE_SendCmd+0x34>)
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	2001      	movs	r0, #1
 800cfb4:	f000 f96c 	bl	800d290 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800cfb8:	f001 fe92 	bl	800ece0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20030000 	.word	0x20030000

0800cfcc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800cfd2:	e01c      	b.n	800d00e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800cfd4:	1d3b      	adds	r3, r7, #4
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4812      	ldr	r0, [pc, #72]	@ (800d024 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cfda:	f7ff fa2e 	bl	800c43a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	7a5b      	ldrb	r3, [r3, #9]
 800cfe2:	2b0f      	cmp	r3, #15
 800cfe4:	d003      	beq.n	800cfee <HW_IPCC_BLE_RxEvtNot+0x22>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	7a5b      	ldrb	r3, [r3, #9]
 800cfea:	2b0e      	cmp	r3, #14
 800cfec:	d105      	bne.n	800cffa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4619      	mov	r1, r3
 800cff2:	2002      	movs	r0, #2
 800cff4:	f000 f94c 	bl	800d290 <OutputDbgTrace>
 800cff8:	e004      	b.n	800d004 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4619      	mov	r1, r3
 800cffe:	2003      	movs	r0, #3
 800d000:	f000 f946 	bl	800d290 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800d004:	4b08      	ldr	r3, [pc, #32]	@ (800d028 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	4610      	mov	r0, r2
 800d00c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800d00e:	4805      	ldr	r0, [pc, #20]	@ (800d024 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800d010:	f7ff f984 	bl	800c31c <LST_is_empty>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d0dc      	beq.n	800cfd4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800d01a:	bf00      	nop
}
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	200300c8 	.word	0x200300c8
 800d028:	20001590 	.word	0x20001590

0800d02c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800d030:	4b02      	ldr	r3, [pc, #8]	@ (800d03c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4798      	blx	r3

  return;
 800d036:	bf00      	nop
}
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	20001594 	.word	0x20001594

0800d040 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800d04c:	480d      	ldr	r0, [pc, #52]	@ (800d084 <TL_SYS_Init+0x44>)
 800d04e:	f7ff f955 	bl	800c2fc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800d052:	4b0d      	ldr	r3, [pc, #52]	@ (800d088 <TL_SYS_Init+0x48>)
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	689a      	ldr	r2, [r3, #8]
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	4a08      	ldr	r2, [pc, #32]	@ (800d084 <TL_SYS_Init+0x44>)
 800d064:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800d066:	f001 fe6d 	bl	800ed44 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a07      	ldr	r2, [pc, #28]	@ (800d08c <TL_SYS_Init+0x4c>)
 800d070:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	4a06      	ldr	r2, [pc, #24]	@ (800d090 <TL_SYS_Init+0x50>)
 800d078:	6013      	str	r3, [r2, #0]

  return 0;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	200300d0 	.word	0x200300d0
 800d088:	20030000 	.word	0x20030000
 800d08c:	20001598 	.word	0x20001598
 800d090:	2000159c 	.word	0x2000159c

0800d094 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800d0a0:	4b09      	ldr	r3, [pc, #36]	@ (800d0c8 <TL_SYS_SendCmd+0x34>)
 800d0a2:	68db      	ldr	r3, [r3, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2210      	movs	r2, #16
 800d0a8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800d0aa:	4b07      	ldr	r3, [pc, #28]	@ (800d0c8 <TL_SYS_SendCmd+0x34>)
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	2004      	movs	r0, #4
 800d0b4:	f000 f8ec 	bl	800d290 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800d0b8:	f001 fe5e 	bl	800ed78 <HW_IPCC_SYS_SendCmd>

  return 0;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20030000 	.word	0x20030000

0800d0cc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d0d0:	4b07      	ldr	r3, [pc, #28]	@ (800d0f0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	2005      	movs	r0, #5
 800d0da:	f000 f8d9 	bl	800d290 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800d0de:	4b05      	ldr	r3, [pc, #20]	@ (800d0f4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a03      	ldr	r2, [pc, #12]	@ (800d0f0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800d0e4:	68d2      	ldr	r2, [r2, #12]
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4798      	blx	r3

  return;
 800d0ec:	bf00      	nop
}
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20030000 	.word	0x20030000
 800d0f4:	20001598 	.word	0x20001598

0800d0f8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d0fe:	e00e      	b.n	800d11e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800d100:	1d3b      	adds	r3, r7, #4
 800d102:	4619      	mov	r1, r3
 800d104:	480b      	ldr	r0, [pc, #44]	@ (800d134 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d106:	f7ff f998 	bl	800c43a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4619      	mov	r1, r3
 800d10e:	2006      	movs	r0, #6
 800d110:	f000 f8be 	bl	800d290 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800d114:	4b08      	ldr	r3, [pc, #32]	@ (800d138 <HW_IPCC_SYS_EvtNot+0x40>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	4610      	mov	r0, r2
 800d11c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800d11e:	4805      	ldr	r0, [pc, #20]	@ (800d134 <HW_IPCC_SYS_EvtNot+0x3c>)
 800d120:	f7ff f8fc 	bl	800c31c <LST_is_empty>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0ea      	beq.n	800d100 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800d12a:	bf00      	nop
}
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	200300d0 	.word	0x200300d0
 800d138:	2000159c 	.word	0x2000159c

0800d13c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800d144:	4817      	ldr	r0, [pc, #92]	@ (800d1a4 <TL_MM_Init+0x68>)
 800d146:	f7ff f8d9 	bl	800c2fc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800d14a:	4817      	ldr	r0, [pc, #92]	@ (800d1a8 <TL_MM_Init+0x6c>)
 800d14c:	f7ff f8d6 	bl	800c2fc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800d150:	4b16      	ldr	r3, [pc, #88]	@ (800d1ac <TL_MM_Init+0x70>)
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	4a16      	ldr	r2, [pc, #88]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d156:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800d158:	4b15      	ldr	r3, [pc, #84]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	6892      	ldr	r2, [r2, #8]
 800d160:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800d162:	4b13      	ldr	r3, [pc, #76]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	68d2      	ldr	r2, [r2, #12]
 800d16a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800d16c:	4b10      	ldr	r3, [pc, #64]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a0c      	ldr	r2, [pc, #48]	@ (800d1a4 <TL_MM_Init+0x68>)
 800d172:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800d174:	4b0e      	ldr	r3, [pc, #56]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	6812      	ldr	r2, [r2, #0]
 800d17c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800d17e:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	6852      	ldr	r2, [r2, #4]
 800d186:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800d188:	4b09      	ldr	r3, [pc, #36]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	6912      	ldr	r2, [r2, #16]
 800d190:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800d192:	4b07      	ldr	r3, [pc, #28]	@ (800d1b0 <TL_MM_Init+0x74>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6952      	ldr	r2, [r2, #20]
 800d19a:	619a      	str	r2, [r3, #24]

  return;
 800d19c:	bf00      	nop
}
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	200300b8 	.word	0x200300b8
 800d1a8:	20001588 	.word	0x20001588
 800d1ac:	20030000 	.word	0x20030000
 800d1b0:	200015a0 	.word	0x200015a0

0800d1b4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800d1bc:	6879      	ldr	r1, [r7, #4]
 800d1be:	4807      	ldr	r0, [pc, #28]	@ (800d1dc <TL_MM_EvtDone+0x28>)
 800d1c0:	f7ff f8f4 	bl	800c3ac <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800d1c4:	6879      	ldr	r1, [r7, #4]
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	f000 f862 	bl	800d290 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800d1cc:	4804      	ldr	r0, [pc, #16]	@ (800d1e0 <TL_MM_EvtDone+0x2c>)
 800d1ce:	f001 fe19 	bl	800ee04 <HW_IPCC_MM_SendFreeBuf>

  return;
 800d1d2:	bf00      	nop
}
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	20001588 	.word	0x20001588
 800d1e0:	0800d1e5 	.word	0x0800d1e5

0800d1e4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d1ea:	e00c      	b.n	800d206 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800d1ec:	1d3b      	adds	r3, r7, #4
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	480a      	ldr	r0, [pc, #40]	@ (800d21c <SendFreeBuf+0x38>)
 800d1f2:	f7ff f922 	bl	800c43a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800d1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d220 <SendFreeBuf+0x3c>)
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	4611      	mov	r1, r2
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff f8d3 	bl	800c3ac <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800d206:	4805      	ldr	r0, [pc, #20]	@ (800d21c <SendFreeBuf+0x38>)
 800d208:	f7ff f888 	bl	800c31c <LST_is_empty>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d0ec      	beq.n	800d1ec <SendFreeBuf+0x8>
  }

  return;
 800d212:	bf00      	nop
}
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20001588 	.word	0x20001588
 800d220:	20030000 	.word	0x20030000

0800d224 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800d228:	4805      	ldr	r0, [pc, #20]	@ (800d240 <TL_TRACES_Init+0x1c>)
 800d22a:	f7ff f867 	bl	800c2fc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800d22e:	4b05      	ldr	r3, [pc, #20]	@ (800d244 <TL_TRACES_Init+0x20>)
 800d230:	695b      	ldr	r3, [r3, #20]
 800d232:	4a03      	ldr	r2, [pc, #12]	@ (800d240 <TL_TRACES_Init+0x1c>)
 800d234:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800d236:	f001 fe37 	bl	800eea8 <HW_IPCC_TRACES_Init>

  return;
 800d23a:	bf00      	nop
}
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	200300c0 	.word	0x200300c0
 800d244:	20030000 	.word	0x20030000

0800d248 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d24e:	e008      	b.n	800d262 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800d250:	1d3b      	adds	r3, r7, #4
 800d252:	4619      	mov	r1, r3
 800d254:	4808      	ldr	r0, [pc, #32]	@ (800d278 <HW_IPCC_TRACES_EvtNot+0x30>)
 800d256:	f7ff f8f0 	bl	800c43a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 f80d 	bl	800d27c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800d262:	4805      	ldr	r0, [pc, #20]	@ (800d278 <HW_IPCC_TRACES_EvtNot+0x30>)
 800d264:	f7ff f85a 	bl	800c31c <LST_is_empty>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d0f0      	beq.n	800d250 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800d26e:	bf00      	nop
}
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	200300c0 	.word	0x200300c0

0800d27c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800d284:	bf00      	nop
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800d290:	b480      	push	{r7}
 800d292:	b087      	sub	sp, #28
 800d294:	af00      	add	r7, sp, #0
 800d296:	4603      	mov	r3, r0
 800d298:	6039      	str	r1, [r7, #0]
 800d29a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	2b06      	cmp	r3, #6
 800d2a0:	d845      	bhi.n	800d32e <OutputDbgTrace+0x9e>
 800d2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a8 <OutputDbgTrace+0x18>)
 800d2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a8:	0800d2c5 	.word	0x0800d2c5
 800d2ac:	0800d2e9 	.word	0x0800d2e9
 800d2b0:	0800d2ef 	.word	0x0800d2ef
 800d2b4:	0800d303 	.word	0x0800d303
 800d2b8:	0800d30f 	.word	0x0800d30f
 800d2bc:	0800d315 	.word	0x0800d315
 800d2c0:	0800d323 	.word	0x0800d323
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	7a5b      	ldrb	r3, [r3, #9]
 800d2cc:	2bff      	cmp	r3, #255	@ 0xff
 800d2ce:	d005      	beq.n	800d2dc <OutputDbgTrace+0x4c>
 800d2d0:	2bff      	cmp	r3, #255	@ 0xff
 800d2d2:	dc05      	bgt.n	800d2e0 <OutputDbgTrace+0x50>
 800d2d4:	2b0e      	cmp	r3, #14
 800d2d6:	d005      	beq.n	800d2e4 <OutputDbgTrace+0x54>
 800d2d8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800d2da:	e001      	b.n	800d2e0 <OutputDbgTrace+0x50>
          break;
 800d2dc:	bf00      	nop
 800d2de:	e027      	b.n	800d330 <OutputDbgTrace+0xa0>
          break;
 800d2e0:	bf00      	nop
 800d2e2:	e025      	b.n	800d330 <OutputDbgTrace+0xa0>
          break;
 800d2e4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800d2e6:	e023      	b.n	800d330 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d2ec:	e020      	b.n	800d330 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	7a5b      	ldrb	r3, [r3, #9]
 800d2f6:	2b0e      	cmp	r3, #14
 800d2f8:	d001      	beq.n	800d2fe <OutputDbgTrace+0x6e>
 800d2fa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800d2fc:	e000      	b.n	800d300 <OutputDbgTrace+0x70>
          break;
 800d2fe:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d300:	e016      	b.n	800d330 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	7a5b      	ldrb	r3, [r3, #9]
 800d30a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d30c:	e010      	b.n	800d330 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800d312:	e00d      	b.n	800d330 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	785b      	ldrb	r3, [r3, #1]
 800d31c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800d31e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d320:	e006      	b.n	800d330 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	7a5b      	ldrb	r3, [r3, #9]
 800d32a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800d32c:	e000      	b.n	800d330 <OutputDbgTrace+0xa0>

    default:
      break;
 800d32e:	bf00      	nop
  }

  return;
 800d330:	bf00      	nop
}
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800d33c:	b480      	push	{r7}
 800d33e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800d340:	4b03      	ldr	r3, [pc, #12]	@ (800d350 <LL_FLASH_GetUDN+0x14>)
 800d342:	681b      	ldr	r3, [r3, #0]
}
 800d344:	4618      	mov	r0, r3
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	1fff7580 	.word	0x1fff7580

0800d354 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800d354:	b480      	push	{r7}
 800d356:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800d358:	4b03      	ldr	r3, [pc, #12]	@ (800d368 <LL_FLASH_GetDeviceID+0x14>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	b2db      	uxtb	r3, r3
}
 800d35e:	4618      	mov	r0, r3
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	1fff7584 	.word	0x1fff7584

0800d36c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800d36c:	b480      	push	{r7}
 800d36e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800d370:	4b03      	ldr	r3, [pc, #12]	@ (800d380 <LL_FLASH_GetSTCompanyID+0x14>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	0a1b      	lsrs	r3, r3, #8
}
 800d376:	4618      	mov	r0, r3
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr
 800d380:	1fff7584 	.word	0x1fff7584

0800d384 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800d384:	b5b0      	push	{r4, r5, r7, lr}
 800d386:	b090      	sub	sp, #64	@ 0x40
 800d388:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d38a:	2392      	movs	r3, #146	@ 0x92
 800d38c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800d390:	4b45      	ldr	r3, [pc, #276]	@ (800d4a8 <APP_BLE_Init+0x124>)
 800d392:	1d3c      	adds	r4, r7, #4
 800d394:	461d      	mov	r5, r3
 800d396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d39a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d39c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d39e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d3a6:	c403      	stmia	r4!, {r0, r1}
 800d3a8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800d3aa:	f000 fba5 	bl	800daf8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800d3ae:	2101      	movs	r1, #1
 800d3b0:	2002      	movs	r0, #2
 800d3b2:	f001 fdb1 	bl	800ef18 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800d3b6:	4a3d      	ldr	r2, [pc, #244]	@ (800d4ac <APP_BLE_Init+0x128>)
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	2002      	movs	r0, #2
 800d3bc:	f001 fed8 	bl	800f170 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800d3c0:	1d3b      	adds	r3, r7, #4
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fe fd70 	bl	800bea8 <SHCI_C2_BLE_Init>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800d3ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d012      	beq.n	800d3fc <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800d3d6:	4836      	ldr	r0, [pc, #216]	@ (800d4b0 <APP_BLE_Init+0x12c>)
 800d3d8:	f7fe faa3 	bl	800b922 <DbgTraceGetFileName>
 800d3dc:	4601      	mov	r1, r0
 800d3de:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800d3e2:	4a34      	ldr	r2, [pc, #208]	@ (800d4b4 <APP_BLE_Init+0x130>)
 800d3e4:	4834      	ldr	r0, [pc, #208]	@ (800d4b8 <APP_BLE_Init+0x134>)
 800d3e6:	f003 ff95 	bl	8011314 <iprintf>
 800d3ea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	4832      	ldr	r0, [pc, #200]	@ (800d4bc <APP_BLE_Init+0x138>)
 800d3f2:	f003 ff8f 	bl	8011314 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800d3f6:	f7f5 fcde 	bl	8002db6 <Error_Handler>
 800d3fa:	e00c      	b.n	800d416 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800d3fc:	482c      	ldr	r0, [pc, #176]	@ (800d4b0 <APP_BLE_Init+0x12c>)
 800d3fe:	f7fe fa90 	bl	800b922 <DbgTraceGetFileName>
 800d402:	4601      	mov	r1, r0
 800d404:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800d408:	4a2a      	ldr	r2, [pc, #168]	@ (800d4b4 <APP_BLE_Init+0x130>)
 800d40a:	482b      	ldr	r0, [pc, #172]	@ (800d4b8 <APP_BLE_Init+0x134>)
 800d40c:	f003 ff82 	bl	8011314 <iprintf>
 800d410:	482b      	ldr	r0, [pc, #172]	@ (800d4c0 <APP_BLE_Init+0x13c>)
 800d412:	f003 ff7f 	bl	8011314 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800d416:	f000 fb85 	bl	800db24 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800d41a:	f7ff fca1 	bl	800cd60 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d41e:	4b29      	ldr	r3, [pc, #164]	@ (800d4c4 <APP_BLE_Init+0x140>)
 800d420:	2200      	movs	r2, #0
 800d422:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800d426:	4b27      	ldr	r3, [pc, #156]	@ (800d4c4 <APP_BLE_Init+0x140>)
 800d428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d42c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800d42e:	4a26      	ldr	r2, [pc, #152]	@ (800d4c8 <APP_BLE_Init+0x144>)
 800d430:	2100      	movs	r1, #0
 800d432:	2001      	movs	r0, #1
 800d434:	f001 fe9c 	bl	800f170 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800d438:	2006      	movs	r0, #6
 800d43a:	f7fe f97d 	bl	800b738 <aci_hal_set_radio_activity_mask>
 800d43e:	4603      	mov	r3, r0
 800d440:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800d444:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d010      	beq.n	800d46e <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800d44c:	4818      	ldr	r0, [pc, #96]	@ (800d4b0 <APP_BLE_Init+0x12c>)
 800d44e:	f7fe fa68 	bl	800b922 <DbgTraceGetFileName>
 800d452:	4601      	mov	r1, r0
 800d454:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800d458:	4a16      	ldr	r2, [pc, #88]	@ (800d4b4 <APP_BLE_Init+0x130>)
 800d45a:	4817      	ldr	r0, [pc, #92]	@ (800d4b8 <APP_BLE_Init+0x134>)
 800d45c:	f003 ff5a 	bl	8011314 <iprintf>
 800d460:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d464:	4619      	mov	r1, r3
 800d466:	4819      	ldr	r0, [pc, #100]	@ (800d4cc <APP_BLE_Init+0x148>)
 800d468:	f003 ff54 	bl	8011314 <iprintf>
 800d46c:	e00c      	b.n	800d488 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800d46e:	4810      	ldr	r0, [pc, #64]	@ (800d4b0 <APP_BLE_Init+0x12c>)
 800d470:	f7fe fa57 	bl	800b922 <DbgTraceGetFileName>
 800d474:	4601      	mov	r1, r0
 800d476:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800d47a:	4a0e      	ldr	r2, [pc, #56]	@ (800d4b4 <APP_BLE_Init+0x130>)
 800d47c:	480e      	ldr	r0, [pc, #56]	@ (800d4b8 <APP_BLE_Init+0x134>)
 800d47e:	f003 ff49 	bl	8011314 <iprintf>
 800d482:	4813      	ldr	r0, [pc, #76]	@ (800d4d0 <APP_BLE_Init+0x14c>)
 800d484:	f003 ff46 	bl	8011314 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800d488:	f000 ffc4 	bl	800e414 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800d48c:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c4 <APP_BLE_Init+0x140>)
 800d48e:	2200      	movs	r2, #0
 800d490:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800d492:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c4 <APP_BLE_Init+0x140>)
 800d494:	2200      	movs	r2, #0
 800d496:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800d498:	2001      	movs	r0, #1
 800d49a:	f000 fdd7 	bl	800e04c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800d49e:	bf00      	nop
}
 800d4a0:	3740      	adds	r7, #64	@ 0x40
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	08012e6c 	.word	0x08012e6c
 800d4ac:	0800bb19 	.word	0x0800bb19
 800d4b0:	08012d60 	.word	0x08012d60
 800d4b4:	08014288 	.word	0x08014288
 800d4b8:	08012d7c 	.word	0x08012d7c
 800d4bc:	08012d90 	.word	0x08012d90
 800d4c0:	08012dc8 	.word	0x08012dc8
 800d4c4:	200015ac 	.word	0x200015ac
 800d4c8:	0800e1d1 	.word	0x0800e1d1
 800d4cc:	08012df0 	.word	0x08012df0
 800d4d0:	08012e34 	.word	0x08012e34

0800d4d4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800d4d4:	b5b0      	push	{r4, r5, r7, lr}
 800d4d6:	b090      	sub	sp, #64	@ 0x40
 800d4d8:	af04      	add	r7, sp, #16
 800d4da:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800d4dc:	2392      	movs	r3, #146	@ 0x92
 800d4de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800d4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2bff      	cmp	r3, #255	@ 0xff
 800d4ee:	f000 8143 	beq.w	800d778 <SVCCTL_App_Notification+0x2a4>
 800d4f2:	2bff      	cmp	r3, #255	@ 0xff
 800d4f4:	f300 82cd 	bgt.w	800da92 <SVCCTL_App_Notification+0x5be>
 800d4f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4fa:	d06a      	beq.n	800d5d2 <SVCCTL_App_Notification+0xfe>
 800d4fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4fe:	f300 82c8 	bgt.w	800da92 <SVCCTL_App_Notification+0x5be>
 800d502:	2b05      	cmp	r3, #5
 800d504:	d002      	beq.n	800d50c <SVCCTL_App_Notification+0x38>
 800d506:	2b10      	cmp	r3, #16
 800d508:	d042      	beq.n	800d590 <SVCCTL_App_Notification+0xbc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800d50a:	e2c2      	b.n	800da92 <SVCCTL_App_Notification+0x5be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800d50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50e:	3302      	adds	r3, #2
 800d510:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d518:	b29a      	uxth	r2, r3
 800d51a:	4bab      	ldr	r3, [pc, #684]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d51c:	8adb      	ldrh	r3, [r3, #22]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d128      	bne.n	800d574 <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800d522:	4ba9      	ldr	r3, [pc, #676]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d524:	2200      	movs	r2, #0
 800d526:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d528:	4ba7      	ldr	r3, [pc, #668]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800d530:	48a6      	ldr	r0, [pc, #664]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d532:	f7fe f9f6 	bl	800b922 <DbgTraceGetFileName>
 800d536:	4601      	mov	r1, r0
 800d538:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800d53c:	4aa4      	ldr	r2, [pc, #656]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d53e:	48a5      	ldr	r0, [pc, #660]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d540:	f003 fee8 	bl	8011314 <iprintf>
 800d544:	48a4      	ldr	r0, [pc, #656]	@ (800d7d8 <SVCCTL_App_Notification+0x304>)
 800d546:	f003 ff55 	bl	80113f4 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800d54a:	48a0      	ldr	r0, [pc, #640]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d54c:	f7fe f9e9 	bl	800b922 <DbgTraceGetFileName>
 800d550:	4601      	mov	r1, r0
 800d552:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800d556:	4a9e      	ldr	r2, [pc, #632]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d558:	489e      	ldr	r0, [pc, #632]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d55a:	f003 fedb 	bl	8011314 <iprintf>
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d564:	b29b      	uxth	r3, r3
 800d566:	4619      	mov	r1, r3
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	78db      	ldrb	r3, [r3, #3]
 800d56c:	461a      	mov	r2, r3
 800d56e:	489b      	ldr	r0, [pc, #620]	@ (800d7dc <SVCCTL_App_Notification+0x308>)
 800d570:	f003 fed0 	bl	8011314 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800d574:	2001      	movs	r0, #1
 800d576:	f000 fd69 	bl	800e04c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800d57a:	4b99      	ldr	r3, [pc, #612]	@ (800d7e0 <SVCCTL_App_Notification+0x30c>)
 800d57c:	2201      	movs	r2, #1
 800d57e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d580:	4b91      	ldr	r3, [pc, #580]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d582:	8ada      	ldrh	r2, [r3, #22]
 800d584:	4b96      	ldr	r3, [pc, #600]	@ (800d7e0 <SVCCTL_App_Notification+0x30c>)
 800d586:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800d588:	4895      	ldr	r0, [pc, #596]	@ (800d7e0 <SVCCTL_App_Notification+0x30c>)
 800d58a:	f000 ff2f 	bl	800e3ec <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800d58e:	e283      	b.n	800da98 <SVCCTL_App_Notification+0x5c4>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800d590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d592:	3302      	adds	r3, #2
 800d594:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800d596:	488d      	ldr	r0, [pc, #564]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d598:	f7fe f9c3 	bl	800b922 <DbgTraceGetFileName>
 800d59c:	4601      	mov	r1, r0
 800d59e:	f240 13dd 	movw	r3, #477	@ 0x1dd
 800d5a2:	4a8b      	ldr	r2, [pc, #556]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d5a4:	488b      	ldr	r0, [pc, #556]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d5a6:	f003 feb5 	bl	8011314 <iprintf>
 800d5aa:	488e      	ldr	r0, [pc, #568]	@ (800d7e4 <SVCCTL_App_Notification+0x310>)
 800d5ac:	f003 ff22 	bl	80113f4 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800d5b0:	4886      	ldr	r0, [pc, #536]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d5b2:	f7fe f9b6 	bl	800b922 <DbgTraceGetFileName>
 800d5b6:	4601      	mov	r1, r0
 800d5b8:	f44f 73ef 	mov.w	r3, #478	@ 0x1de
 800d5bc:	4a84      	ldr	r2, [pc, #528]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d5be:	4885      	ldr	r0, [pc, #532]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d5c0:	f003 fea8 	bl	8011314 <iprintf>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4887      	ldr	r0, [pc, #540]	@ (800d7e8 <SVCCTL_App_Notification+0x314>)
 800d5cc:	f003 fea2 	bl	8011314 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800d5d0:	e262      	b.n	800da98 <SVCCTL_App_Notification+0x5c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800d5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d4:	3302      	adds	r3, #2
 800d5d6:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d042      	beq.n	800d666 <SVCCTL_App_Notification+0x192>
 800d5e0:	2b03      	cmp	r3, #3
 800d5e2:	f040 80c7 	bne.w	800d774 <SVCCTL_App_Notification+0x2a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800d5ec:	4877      	ldr	r0, [pc, #476]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d5ee:	f7fe f998 	bl	800b922 <DbgTraceGetFileName>
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800d5f8:	4a75      	ldr	r2, [pc, #468]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d5fa:	4876      	ldr	r0, [pc, #472]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d5fc:	f003 fe8a 	bl	8011314 <iprintf>
 800d600:	487a      	ldr	r0, [pc, #488]	@ (800d7ec <SVCCTL_App_Notification+0x318>)
 800d602:	f003 fef7 	bl	80113f4 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d606:	4871      	ldr	r0, [pc, #452]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d608:	f7fe f98b 	bl	800b922 <DbgTraceGetFileName>
 800d60c:	4601      	mov	r1, r0
 800d60e:	f240 13f1 	movw	r3, #497	@ 0x1f1
 800d612:	4a6f      	ldr	r2, [pc, #444]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d614:	486f      	ldr	r0, [pc, #444]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d616:	f003 fe7d 	bl	8011314 <iprintf>
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d620:	b29b      	uxth	r3, r3
 800d622:	4618      	mov	r0, r3
 800d624:	f7f3 f880 	bl	8000728 <__aeabi_i2d>
 800d628:	f04f 0200 	mov.w	r2, #0
 800d62c:	4b70      	ldr	r3, [pc, #448]	@ (800d7f0 <SVCCTL_App_Notification+0x31c>)
 800d62e:	f7f2 fdff 	bl	8000230 <__aeabi_dmul>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	4610      	mov	r0, r2
 800d638:	4619      	mov	r1, r3
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d640:	b29b      	uxth	r3, r3
 800d642:	461c      	mov	r4, r3
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	461a      	mov	r2, r3
 800d64e:	4613      	mov	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4413      	add	r3, r2
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	9301      	str	r3, [sp, #4]
 800d658:	9400      	str	r4, [sp, #0]
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4865      	ldr	r0, [pc, #404]	@ (800d7f4 <SVCCTL_App_Notification+0x320>)
 800d660:	f003 fe58 	bl	8011314 <iprintf>
          break;
 800d664:	e087      	b.n	800d776 <SVCCTL_App_Notification+0x2a2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	3301      	adds	r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800d66c:	4857      	ldr	r0, [pc, #348]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d66e:	f7fe f958 	bl	800b922 <DbgTraceGetFileName>
 800d672:	4601      	mov	r1, r0
 800d674:	f240 2303 	movw	r3, #515	@ 0x203
 800d678:	4a55      	ldr	r2, [pc, #340]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d67a:	4856      	ldr	r0, [pc, #344]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d67c:	f003 fe4a 	bl	8011314 <iprintf>
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d686:	b29b      	uxth	r3, r3
 800d688:	4619      	mov	r1, r3
 800d68a:	485b      	ldr	r0, [pc, #364]	@ (800d7f8 <SVCCTL_App_Notification+0x324>)
 800d68c:	f003 fe42 	bl	8011314 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d690:	484e      	ldr	r0, [pc, #312]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d692:	f7fe f946 	bl	800b922 <DbgTraceGetFileName>
 800d696:	4601      	mov	r1, r0
 800d698:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800d69c:	4a4c      	ldr	r2, [pc, #304]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d69e:	484d      	ldr	r0, [pc, #308]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d6a0:	f003 fe38 	bl	8011314 <iprintf>
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	7a9b      	ldrb	r3, [r3, #10]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	7a5b      	ldrb	r3, [r3, #9]
 800d6ae:	461c      	mov	r4, r3
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	7a1b      	ldrb	r3, [r3, #8]
 800d6b4:	461d      	mov	r5, r3
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	79db      	ldrb	r3, [r3, #7]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	799b      	ldrb	r3, [r3, #6]
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	795b      	ldrb	r3, [r3, #5]
 800d6c6:	9302      	str	r3, [sp, #8]
 800d6c8:	9101      	str	r1, [sp, #4]
 800d6ca:	9200      	str	r2, [sp, #0]
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4601      	mov	r1, r0
 800d6d2:	484a      	ldr	r0, [pc, #296]	@ (800d7fc <SVCCTL_App_Notification+0x328>)
 800d6d4:	f003 fe1e 	bl	8011314 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d6d8:	483c      	ldr	r0, [pc, #240]	@ (800d7cc <SVCCTL_App_Notification+0x2f8>)
 800d6da:	f7fe f922 	bl	800b922 <DbgTraceGetFileName>
 800d6de:	4601      	mov	r1, r0
 800d6e0:	f240 230b 	movw	r3, #523	@ 0x20b
 800d6e4:	4a3a      	ldr	r2, [pc, #232]	@ (800d7d0 <SVCCTL_App_Notification+0x2fc>)
 800d6e6:	483b      	ldr	r0, [pc, #236]	@ (800d7d4 <SVCCTL_App_Notification+0x300>)
 800d6e8:	f003 fe14 	bl	8011314 <iprintf>
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7f3 f817 	bl	8000728 <__aeabi_i2d>
 800d6fa:	f04f 0200 	mov.w	r2, #0
 800d6fe:	4b3c      	ldr	r3, [pc, #240]	@ (800d7f0 <SVCCTL_App_Notification+0x31c>)
 800d700:	f7f2 fd96 	bl	8000230 <__aeabi_dmul>
 800d704:	4602      	mov	r2, r0
 800d706:	460b      	mov	r3, r1
 800d708:	4610      	mov	r0, r2
 800d70a:	4619      	mov	r1, r3
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800d712:	b29b      	uxth	r3, r3
 800d714:	461c      	mov	r4, r3
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	461a      	mov	r2, r3
 800d720:	4613      	mov	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	005b      	lsls	r3, r3, #1
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	9400      	str	r4, [sp, #0]
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4830      	ldr	r0, [pc, #192]	@ (800d7f4 <SVCCTL_App_Notification+0x320>)
 800d732:	f003 fdef 	bl	8011314 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800d736:	4b24      	ldr	r3, [pc, #144]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d738:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d104      	bne.n	800d74a <SVCCTL_App_Notification+0x276>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800d740:	4b21      	ldr	r3, [pc, #132]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d742:	2206      	movs	r2, #6
 800d744:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800d748:	e003      	b.n	800d752 <SVCCTL_App_Notification+0x27e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800d74a:	4b1f      	ldr	r3, [pc, #124]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d74c:	2205      	movs	r2, #5
 800d74e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d758:	b29a      	uxth	r2, r3
 800d75a:	4b1b      	ldr	r3, [pc, #108]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d75c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800d75e:	4b20      	ldr	r3, [pc, #128]	@ (800d7e0 <SVCCTL_App_Notification+0x30c>)
 800d760:	2200      	movs	r2, #0
 800d762:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d764:	4b18      	ldr	r3, [pc, #96]	@ (800d7c8 <SVCCTL_App_Notification+0x2f4>)
 800d766:	8ada      	ldrh	r2, [r3, #22]
 800d768:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e0 <SVCCTL_App_Notification+0x30c>)
 800d76a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800d76c:	481c      	ldr	r0, [pc, #112]	@ (800d7e0 <SVCCTL_App_Notification+0x30c>)
 800d76e:	f000 fe3d 	bl	800e3ec <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800d772:	e000      	b.n	800d776 <SVCCTL_App_Notification+0x2a2>
          break;
 800d774:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800d776:	e18f      	b.n	800da98 <SVCCTL_App_Notification+0x5c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800d778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77a:	3302      	adds	r3, #2
 800d77c:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	b29b      	uxth	r3, r3
 800d784:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800d788:	4293      	cmp	r3, r2
 800d78a:	f000 814a 	beq.w	800da22 <SVCCTL_App_Notification+0x54e>
 800d78e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800d792:	4293      	cmp	r3, r2
 800d794:	f300 817f 	bgt.w	800da96 <SVCCTL_App_Notification+0x5c2>
 800d798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d79c:	f000 8175 	beq.w	800da8a <SVCCTL_App_Notification+0x5b6>
 800d7a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7a4:	f300 8177 	bgt.w	800da96 <SVCCTL_App_Notification+0x5c2>
 800d7a8:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	f300 8172 	bgt.w	800da96 <SVCCTL_App_Notification+0x5c2>
 800d7b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7b6:	dc23      	bgt.n	800d800 <SVCCTL_App_Notification+0x32c>
 800d7b8:	2b04      	cmp	r3, #4
 800d7ba:	f000 8168 	beq.w	800da8e <SVCCTL_App_Notification+0x5ba>
 800d7be:	2b06      	cmp	r3, #6
 800d7c0:	f000 8142 	beq.w	800da48 <SVCCTL_App_Notification+0x574>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d7c4:	e167      	b.n	800da96 <SVCCTL_App_Notification+0x5c2>
 800d7c6:	bf00      	nop
 800d7c8:	200015ac 	.word	0x200015ac
 800d7cc:	08012d60 	.word	0x08012d60
 800d7d0:	08014298 	.word	0x08014298
 800d7d4:	08012d7c 	.word	0x08012d7c
 800d7d8:	08012ea8 	.word	0x08012ea8
 800d7dc:	08012ed4 	.word	0x08012ed4
 800d7e0:	20001630 	.word	0x20001630
 800d7e4:	08012f10 	.word	0x08012f10
 800d7e8:	08012f34 	.word	0x08012f34
 800d7ec:	08012f4c 	.word	0x08012f4c
 800d7f0:	3ff40000 	.word	0x3ff40000
 800d7f4:	08012f80 	.word	0x08012f80
 800d7f8:	08012fec 	.word	0x08012fec
 800d7fc:	08013034 	.word	0x08013034
      switch (p_blecore_evt->ecode)
 800d800:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800d804:	2b09      	cmp	r3, #9
 800d806:	f200 8146 	bhi.w	800da96 <SVCCTL_App_Notification+0x5c2>
 800d80a:	a201      	add	r2, pc, #4	@ (adr r2, 800d810 <SVCCTL_App_Notification+0x33c>)
 800d80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d810:	0800d99d 	.word	0x0800d99d
 800d814:	0800d871 	.word	0x0800d871
 800d818:	0800da97 	.word	0x0800da97
 800d81c:	0800da97 	.word	0x0800da97
 800d820:	0800da97 	.word	0x0800da97
 800d824:	0800da97 	.word	0x0800da97
 800d828:	0800d839 	.word	0x0800d839
 800d82c:	0800da97 	.word	0x0800da97
 800d830:	0800d8e3 	.word	0x0800d8e3
 800d834:	0800d855 	.word	0x0800d855
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800d838:	489a      	ldr	r0, [pc, #616]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d83a:	f7fe f872 	bl	800b922 <DbgTraceGetFileName>
 800d83e:	4601      	mov	r1, r0
 800d840:	f240 234d 	movw	r3, #589	@ 0x24d
 800d844:	4a98      	ldr	r2, [pc, #608]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d846:	4899      	ldr	r0, [pc, #612]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d848:	f003 fd64 	bl	8011314 <iprintf>
 800d84c:	4898      	ldr	r0, [pc, #608]	@ (800dab0 <SVCCTL_App_Notification+0x5dc>)
 800d84e:	f003 fd61 	bl	8011314 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800d852:	e11d      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800d854:	4893      	ldr	r0, [pc, #588]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d856:	f7fe f864 	bl	800b922 <DbgTraceGetFileName>
 800d85a:	4601      	mov	r1, r0
 800d85c:	f240 235d 	movw	r3, #605	@ 0x25d
 800d860:	4a91      	ldr	r2, [pc, #580]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d862:	4892      	ldr	r0, [pc, #584]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d864:	f003 fd56 	bl	8011314 <iprintf>
 800d868:	4892      	ldr	r0, [pc, #584]	@ (800dab4 <SVCCTL_App_Notification+0x5e0>)
 800d86a:	f003 fdc3 	bl	80113f4 <puts>
          break;
 800d86e:	e10f      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800d870:	488c      	ldr	r0, [pc, #560]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d872:	f7fe f856 	bl	800b922 <DbgTraceGetFileName>
 800d876:	4601      	mov	r1, r0
 800d878:	f44f 7319 	mov.w	r3, #612	@ 0x264
 800d87c:	4a8a      	ldr	r2, [pc, #552]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d87e:	488b      	ldr	r0, [pc, #556]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d880:	f003 fd48 	bl	8011314 <iprintf>
 800d884:	488c      	ldr	r0, [pc, #560]	@ (800dab8 <SVCCTL_App_Notification+0x5e4>)
 800d886:	f003 fdb5 	bl	80113f4 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800d88a:	4b8c      	ldr	r3, [pc, #560]	@ (800dabc <SVCCTL_App_Notification+0x5e8>)
 800d88c:	8adb      	ldrh	r3, [r3, #22]
 800d88e:	498c      	ldr	r1, [pc, #560]	@ (800dac0 <SVCCTL_App_Notification+0x5ec>)
 800d890:	4618      	mov	r0, r3
 800d892:	f7fd f953 	bl	800ab3c <aci_gap_pass_key_resp>
 800d896:	4603      	mov	r3, r0
 800d898:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d89c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d010      	beq.n	800d8c6 <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800d8a4:	487f      	ldr	r0, [pc, #508]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d8a6:	f7fe f83c 	bl	800b922 <DbgTraceGetFileName>
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	f240 2369 	movw	r3, #617	@ 0x269
 800d8b0:	4a7d      	ldr	r2, [pc, #500]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d8b2:	487e      	ldr	r0, [pc, #504]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d8b4:	f003 fd2e 	bl	8011314 <iprintf>
 800d8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4881      	ldr	r0, [pc, #516]	@ (800dac4 <SVCCTL_App_Notification+0x5f0>)
 800d8c0:	f003 fd28 	bl	8011314 <iprintf>
          break;
 800d8c4:	e0e4      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800d8c6:	4877      	ldr	r0, [pc, #476]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d8c8:	f7fe f82b 	bl	800b922 <DbgTraceGetFileName>
 800d8cc:	4601      	mov	r1, r0
 800d8ce:	f240 236d 	movw	r3, #621	@ 0x26d
 800d8d2:	4a75      	ldr	r2, [pc, #468]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d8d4:	4875      	ldr	r0, [pc, #468]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d8d6:	f003 fd1d 	bl	8011314 <iprintf>
 800d8da:	487b      	ldr	r0, [pc, #492]	@ (800dac8 <SVCCTL_App_Notification+0x5f4>)
 800d8dc:	f003 fd8a 	bl	80113f4 <puts>
          break;
 800d8e0:	e0d6      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800d8e2:	4870      	ldr	r0, [pc, #448]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d8e4:	f7fe f81d 	bl	800b922 <DbgTraceGetFileName>
 800d8e8:	4601      	mov	r1, r0
 800d8ea:	f240 2375 	movw	r3, #629	@ 0x275
 800d8ee:	4a6e      	ldr	r2, [pc, #440]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d8f0:	486e      	ldr	r0, [pc, #440]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d8f2:	f003 fd0f 	bl	8011314 <iprintf>
 800d8f6:	4875      	ldr	r0, [pc, #468]	@ (800dacc <SVCCTL_App_Notification+0x5f8>)
 800d8f8:	f003 fd7c 	bl	80113f4 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800d8fc:	4869      	ldr	r0, [pc, #420]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d8fe:	f7fe f810 	bl	800b922 <DbgTraceGetFileName>
 800d902:	4601      	mov	r1, r0
 800d904:	f240 2376 	movw	r3, #630	@ 0x276
 800d908:	4a67      	ldr	r2, [pc, #412]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d90a:	4868      	ldr	r0, [pc, #416]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d90c:	f003 fd02 	bl	8011314 <iprintf>
 800d910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d912:	3302      	adds	r3, #2
 800d914:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d918:	4619      	mov	r1, r3
 800d91a:	486d      	ldr	r0, [pc, #436]	@ (800dad0 <SVCCTL_App_Notification+0x5fc>)
 800d91c:	f003 fcfa 	bl	8011314 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800d920:	4860      	ldr	r0, [pc, #384]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d922:	f7fd fffe 	bl	800b922 <DbgTraceGetFileName>
 800d926:	4601      	mov	r1, r0
 800d928:	f44f 731e 	mov.w	r3, #632	@ 0x278
 800d92c:	4a5e      	ldr	r2, [pc, #376]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d92e:	485f      	ldr	r0, [pc, #380]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d930:	f003 fcf0 	bl	8011314 <iprintf>
 800d934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d936:	3302      	adds	r3, #2
 800d938:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d93c:	4619      	mov	r1, r3
 800d93e:	4865      	ldr	r0, [pc, #404]	@ (800dad4 <SVCCTL_App_Notification+0x600>)
 800d940:	f003 fce8 	bl	8011314 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800d944:	4b5d      	ldr	r3, [pc, #372]	@ (800dabc <SVCCTL_App_Notification+0x5e8>)
 800d946:	8adb      	ldrh	r3, [r3, #22]
 800d948:	2101      	movs	r1, #1
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fd faa0 	bl	800ae90 <aci_gap_numeric_comparison_value_confirm_yesno>
 800d950:	4603      	mov	r3, r0
 800d952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d956:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d010      	beq.n	800d980 <SVCCTL_App_Notification+0x4ac>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800d95e:	4851      	ldr	r0, [pc, #324]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d960:	f7fd ffdf 	bl	800b922 <DbgTraceGetFileName>
 800d964:	4601      	mov	r1, r0
 800d966:	f240 237d 	movw	r3, #637	@ 0x27d
 800d96a:	4a4f      	ldr	r2, [pc, #316]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d96c:	484f      	ldr	r0, [pc, #316]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d96e:	f003 fcd1 	bl	8011314 <iprintf>
 800d972:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d976:	4619      	mov	r1, r3
 800d978:	4857      	ldr	r0, [pc, #348]	@ (800dad8 <SVCCTL_App_Notification+0x604>)
 800d97a:	f003 fccb 	bl	8011314 <iprintf>
          break;
 800d97e:	e087      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800d980:	4848      	ldr	r0, [pc, #288]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d982:	f7fd ffce 	bl	800b922 <DbgTraceGetFileName>
 800d986:	4601      	mov	r1, r0
 800d988:	f240 2381 	movw	r3, #641	@ 0x281
 800d98c:	4a46      	ldr	r2, [pc, #280]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d98e:	4847      	ldr	r0, [pc, #284]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d990:	f003 fcc0 	bl	8011314 <iprintf>
 800d994:	4851      	ldr	r0, [pc, #324]	@ (800dadc <SVCCTL_App_Notification+0x608>)
 800d996:	f003 fd2d 	bl	80113f4 <puts>
          break;
 800d99a:	e079      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	3302      	adds	r3, #2
 800d9a0:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800d9a2:	4840      	ldr	r0, [pc, #256]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d9a4:	f7fd ffbd 	bl	800b922 <DbgTraceGetFileName>
 800d9a8:	4601      	mov	r1, r0
 800d9aa:	f240 238b 	movw	r3, #651	@ 0x28b
 800d9ae:	4a3e      	ldr	r2, [pc, #248]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d9b0:	483e      	ldr	r0, [pc, #248]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d9b2:	f003 fcaf 	bl	8011314 <iprintf>
 800d9b6:	484a      	ldr	r0, [pc, #296]	@ (800dae0 <SVCCTL_App_Notification+0x60c>)
 800d9b8:	f003 fd1c 	bl	80113f4 <puts>
          if (p_pairing_complete->Status != 0)
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	789b      	ldrb	r3, [r3, #2]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d013      	beq.n	800d9ec <SVCCTL_App_Notification+0x518>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800d9c4:	4837      	ldr	r0, [pc, #220]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d9c6:	f7fd ffac 	bl	800b922 <DbgTraceGetFileName>
 800d9ca:	4601      	mov	r1, r0
 800d9cc:	f240 238e 	movw	r3, #654	@ 0x28e
 800d9d0:	4a35      	ldr	r2, [pc, #212]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d9d2:	4836      	ldr	r0, [pc, #216]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d9d4:	f003 fc9e 	bl	8011314 <iprintf>
 800d9d8:	6a3b      	ldr	r3, [r7, #32]
 800d9da:	789b      	ldrb	r3, [r3, #2]
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	78db      	ldrb	r3, [r3, #3]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	483f      	ldr	r0, [pc, #252]	@ (800dae4 <SVCCTL_App_Notification+0x610>)
 800d9e6:	f003 fc95 	bl	8011314 <iprintf>
 800d9ea:	e00c      	b.n	800da06 <SVCCTL_App_Notification+0x532>
            APP_DBG_MSG("     - Pairing Success\n");
 800d9ec:	482d      	ldr	r0, [pc, #180]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800d9ee:	f7fd ff98 	bl	800b922 <DbgTraceGetFileName>
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	f240 2392 	movw	r3, #658	@ 0x292
 800d9f8:	4a2b      	ldr	r2, [pc, #172]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800d9fa:	482c      	ldr	r0, [pc, #176]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800d9fc:	f003 fc8a 	bl	8011314 <iprintf>
 800da00:	4839      	ldr	r0, [pc, #228]	@ (800dae8 <SVCCTL_App_Notification+0x614>)
 800da02:	f003 fcf7 	bl	80113f4 <puts>
          APP_DBG_MSG("\n");
 800da06:	4827      	ldr	r0, [pc, #156]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800da08:	f7fd ff8b 	bl	800b922 <DbgTraceGetFileName>
 800da0c:	4601      	mov	r1, r0
 800da0e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800da12:	4a25      	ldr	r2, [pc, #148]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800da14:	4825      	ldr	r0, [pc, #148]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800da16:	f003 fc7d 	bl	8011314 <iprintf>
 800da1a:	200a      	movs	r0, #10
 800da1c:	f003 fc8c 	bl	8011338 <putchar>
          break;
 800da20:	e036      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800da22:	4820      	ldr	r0, [pc, #128]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800da24:	f7fd ff7d 	bl	800b922 <DbgTraceGetFileName>
 800da28:	4601      	mov	r1, r0
 800da2a:	f240 239d 	movw	r3, #669	@ 0x29d
 800da2e:	4a1e      	ldr	r2, [pc, #120]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800da30:	481e      	ldr	r0, [pc, #120]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800da32:	f003 fc6f 	bl	8011314 <iprintf>
 800da36:	482d      	ldr	r0, [pc, #180]	@ (800daec <SVCCTL_App_Notification+0x618>)
 800da38:	f003 fc6c 	bl	8011314 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800da3c:	4b1f      	ldr	r3, [pc, #124]	@ (800dabc <SVCCTL_App_Notification+0x5e8>)
 800da3e:	8adb      	ldrh	r3, [r3, #22]
 800da40:	4618      	mov	r0, r3
 800da42:	f7fd fd38 	bl	800b4b6 <aci_gatt_confirm_indication>
        break;
 800da46:	e023      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 800da48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4a:	3302      	adds	r3, #2
 800da4c:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_WARNING_VSEVT_CODE\n");
 800da4e:	4815      	ldr	r0, [pc, #84]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800da50:	f7fd ff67 	bl	800b922 <DbgTraceGetFileName>
 800da54:	4601      	mov	r1, r0
 800da56:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800da5a:	4a13      	ldr	r2, [pc, #76]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800da5c:	4813      	ldr	r0, [pc, #76]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800da5e:	f003 fc59 	bl	8011314 <iprintf>
 800da62:	4823      	ldr	r0, [pc, #140]	@ (800daf0 <SVCCTL_App_Notification+0x61c>)
 800da64:	f003 fcc6 	bl	80113f4 <puts>
          APP_DBG_MSG("Warning Type = 0x%02X\n", p_warning_event->Warning_Type);
 800da68:	480e      	ldr	r0, [pc, #56]	@ (800daa4 <SVCCTL_App_Notification+0x5d0>)
 800da6a:	f7fd ff5a 	bl	800b922 <DbgTraceGetFileName>
 800da6e:	4601      	mov	r1, r0
 800da70:	f240 23a9 	movw	r3, #681	@ 0x2a9
 800da74:	4a0c      	ldr	r2, [pc, #48]	@ (800daa8 <SVCCTL_App_Notification+0x5d4>)
 800da76:	480d      	ldr	r0, [pc, #52]	@ (800daac <SVCCTL_App_Notification+0x5d8>)
 800da78:	f003 fc4c 	bl	8011314 <iprintf>
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	4619      	mov	r1, r3
 800da82:	481c      	ldr	r0, [pc, #112]	@ (800daf4 <SVCCTL_App_Notification+0x620>)
 800da84:	f003 fc46 	bl	8011314 <iprintf>
          break;
 800da88:	e002      	b.n	800da90 <SVCCTL_App_Notification+0x5bc>
          break;
 800da8a:	bf00      	nop
 800da8c:	e003      	b.n	800da96 <SVCCTL_App_Notification+0x5c2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800da8e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800da90:	e001      	b.n	800da96 <SVCCTL_App_Notification+0x5c2>
      break;
 800da92:	bf00      	nop
 800da94:	e000      	b.n	800da98 <SVCCTL_App_Notification+0x5c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800da96:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800da98:	2301      	movs	r3, #1
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3730      	adds	r7, #48	@ 0x30
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bdb0      	pop	{r4, r5, r7, pc}
 800daa2:	bf00      	nop
 800daa4:	08012d60 	.word	0x08012d60
 800daa8:	08014298 	.word	0x08014298
 800daac:	08012d7c 	.word	0x08012d7c
 800dab0:	08013084 	.word	0x08013084
 800dab4:	080130ac 	.word	0x080130ac
 800dab8:	080130dc 	.word	0x080130dc
 800dabc:	200015ac 	.word	0x200015ac
 800dac0:	0001b207 	.word	0x0001b207
 800dac4:	08013104 	.word	0x08013104
 800dac8:	08013138 	.word	0x08013138
 800dacc:	08013160 	.word	0x08013160
 800dad0:	08013194 	.word	0x08013194
 800dad4:	080131b0 	.word	0x080131b0
 800dad8:	080131c8 	.word	0x080131c8
 800dadc:	08013218 	.word	0x08013218
 800dae0:	08013260 	.word	0x08013260
 800dae4:	0801328c 	.word	0x0801328c
 800dae8:	080132c8 	.word	0x080132c8
 800daec:	080132e0 	.word	0x080132e0
 800daf0:	08013308 	.word	0x08013308
 800daf4:	08013328 	.word	0x08013328

0800daf8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800dafe:	4b06      	ldr	r3, [pc, #24]	@ (800db18 <Ble_Tl_Init+0x20>)
 800db00:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800db02:	4b06      	ldr	r3, [pc, #24]	@ (800db1c <Ble_Tl_Init+0x24>)
 800db04:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800db06:	463b      	mov	r3, r7
 800db08:	4619      	mov	r1, r3
 800db0a:	4805      	ldr	r0, [pc, #20]	@ (800db20 <Ble_Tl_Init+0x28>)
 800db0c:	f7fd ffe8 	bl	800bae0 <hci_init>

  return;
 800db10:	bf00      	nop
}
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	200300d8 	.word	0x200300d8
 800db1c:	0800e2ed 	.word	0x0800e2ed
 800db20:	0800e2b5 	.word	0x0800e2b5

0800db24 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800db24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db26:	b08d      	sub	sp, #52	@ 0x34
 800db28:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800db2a:	2300      	movs	r3, #0
 800db2c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800db2e:	2392      	movs	r3, #146	@ 0x92
 800db30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800db32:	48a3      	ldr	r0, [pc, #652]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800db34:	f7fd fef5 	bl	800b922 <DbgTraceGetFileName>
 800db38:	4601      	mov	r1, r0
 800db3a:	f240 23e7 	movw	r3, #743	@ 0x2e7
 800db3e:	4aa1      	ldr	r2, [pc, #644]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800db40:	48a1      	ldr	r0, [pc, #644]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800db42:	f003 fbe7 	bl	8011314 <iprintf>
 800db46:	48a1      	ldr	r0, [pc, #644]	@ (800ddcc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800db48:	f003 fc54 	bl	80113f4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800db4c:	f7fd fe48 	bl	800b7e0 <hci_reset>
 800db50:	4603      	mov	r3, r0
 800db52:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800db54:	7dfb      	ldrb	r3, [r7, #23]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00f      	beq.n	800db7a <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800db5a:	4899      	ldr	r0, [pc, #612]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800db5c:	f7fd fee1 	bl	800b922 <DbgTraceGetFileName>
 800db60:	4601      	mov	r1, r0
 800db62:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 800db66:	4a97      	ldr	r2, [pc, #604]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800db68:	4897      	ldr	r0, [pc, #604]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800db6a:	f003 fbd3 	bl	8011314 <iprintf>
 800db6e:	7dfb      	ldrb	r3, [r7, #23]
 800db70:	4619      	mov	r1, r3
 800db72:	4897      	ldr	r0, [pc, #604]	@ (800ddd0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800db74:	f003 fbce 	bl	8011314 <iprintf>
 800db78:	e00c      	b.n	800db94 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800db7a:	4891      	ldr	r0, [pc, #580]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800db7c:	f7fd fed1 	bl	800b922 <DbgTraceGetFileName>
 800db80:	4601      	mov	r1, r0
 800db82:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 800db86:	4a8f      	ldr	r2, [pc, #572]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800db88:	488f      	ldr	r0, [pc, #572]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800db8a:	f003 fbc3 	bl	8011314 <iprintf>
 800db8e:	4891      	ldr	r0, [pc, #580]	@ (800ddd4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800db90:	f003 fc30 	bl	80113f4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800db94:	f000 fad8 	bl	800e148 <BleGetBdAddress>
 800db98:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	2106      	movs	r1, #6
 800db9e:	2000      	movs	r0, #0
 800dba0:	f7fd fcde 	bl	800b560 <aci_hal_write_config_data>
 800dba4:	4603      	mov	r3, r0
 800dba6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00f      	beq.n	800dbce <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, result: 0x%x \n", ret);
 800dbae:	4884      	ldr	r0, [pc, #528]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dbb0:	f7fd feb7 	bl	800b922 <DbgTraceGetFileName>
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	f240 23fe 	movw	r3, #766	@ 0x2fe
 800dbba:	4a82      	ldr	r2, [pc, #520]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dbbc:	4882      	ldr	r0, [pc, #520]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dbbe:	f003 fba9 	bl	8011314 <iprintf>
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4884      	ldr	r0, [pc, #528]	@ (800ddd8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800dbc8:	f003 fba4 	bl	8011314 <iprintf>
 800dbcc:	e035      	b.n	800dc3a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET\n");
 800dbce:	487c      	ldr	r0, [pc, #496]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dbd0:	f7fd fea7 	bl	800b922 <DbgTraceGetFileName>
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	f240 3302 	movw	r3, #770	@ 0x302
 800dbda:	4a7a      	ldr	r2, [pc, #488]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dbdc:	487a      	ldr	r0, [pc, #488]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dbde:	f003 fb99 	bl	8011314 <iprintf>
 800dbe2:	487e      	ldr	r0, [pc, #504]	@ (800dddc <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800dbe4:	f003 fc06 	bl	80113f4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800dbe8:	4875      	ldr	r0, [pc, #468]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dbea:	f7fd fe9a 	bl	800b922 <DbgTraceGetFileName>
 800dbee:	4601      	mov	r1, r0
 800dbf0:	f240 3303 	movw	r3, #771	@ 0x303
 800dbf4:	4a73      	ldr	r2, [pc, #460]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dbf6:	4874      	ldr	r0, [pc, #464]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dbf8:	f003 fb8c 	bl	8011314 <iprintf>
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	3305      	adds	r3, #5
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	4618      	mov	r0, r3
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	3304      	adds	r3, #4
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	461c      	mov	r4, r3
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	3303      	adds	r3, #3
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	461d      	mov	r5, r3
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	3302      	adds	r3, #2
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	4619      	mov	r1, r3
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	9302      	str	r3, [sp, #8]
 800dc2a:	9101      	str	r1, [sp, #4]
 800dc2c:	9200      	str	r2, [sp, #0]
 800dc2e:	462b      	mov	r3, r5
 800dc30:	4622      	mov	r2, r4
 800dc32:	4601      	mov	r1, r0
 800dc34:	486a      	ldr	r0, [pc, #424]	@ (800dde0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800dc36:	f003 fb6d 	bl	8011314 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800dc3a:	4a6a      	ldr	r2, [pc, #424]	@ (800dde4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800dc3c:	2110      	movs	r1, #16
 800dc3e:	2018      	movs	r0, #24
 800dc40:	f7fd fc8e 	bl	800b560 <aci_hal_write_config_data>
 800dc44:	4603      	mov	r3, r0
 800dc46:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dc48:	7dfb      	ldrb	r3, [r7, #23]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00f      	beq.n	800dc6e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800dc4e:	485c      	ldr	r0, [pc, #368]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dc50:	f7fd fe67 	bl	800b922 <DbgTraceGetFileName>
 800dc54:	4601      	mov	r1, r0
 800dc56:	f240 3325 	movw	r3, #805	@ 0x325
 800dc5a:	4a5a      	ldr	r2, [pc, #360]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dc5c:	485a      	ldr	r0, [pc, #360]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dc5e:	f003 fb59 	bl	8011314 <iprintf>
 800dc62:	7dfb      	ldrb	r3, [r7, #23]
 800dc64:	4619      	mov	r1, r3
 800dc66:	4860      	ldr	r0, [pc, #384]	@ (800dde8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800dc68:	f003 fb54 	bl	8011314 <iprintf>
 800dc6c:	e00c      	b.n	800dc88 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800dc6e:	4854      	ldr	r0, [pc, #336]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dc70:	f7fd fe57 	bl	800b922 <DbgTraceGetFileName>
 800dc74:	4601      	mov	r1, r0
 800dc76:	f240 3329 	movw	r3, #809	@ 0x329
 800dc7a:	4a52      	ldr	r2, [pc, #328]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dc7c:	4852      	ldr	r0, [pc, #328]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dc7e:	f003 fb49 	bl	8011314 <iprintf>
 800dc82:	485a      	ldr	r0, [pc, #360]	@ (800ddec <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800dc84:	f003 fbb6 	bl	80113f4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800dc88:	4a59      	ldr	r2, [pc, #356]	@ (800ddf0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800dc8a:	2110      	movs	r1, #16
 800dc8c:	2008      	movs	r0, #8
 800dc8e:	f7fd fc67 	bl	800b560 <aci_hal_write_config_data>
 800dc92:	4603      	mov	r3, r0
 800dc94:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dc96:	7dfb      	ldrb	r3, [r7, #23]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00f      	beq.n	800dcbc <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800dc9c:	4848      	ldr	r0, [pc, #288]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dc9e:	f7fd fe40 	bl	800b922 <DbgTraceGetFileName>
 800dca2:	4601      	mov	r1, r0
 800dca4:	f240 3332 	movw	r3, #818	@ 0x332
 800dca8:	4a46      	ldr	r2, [pc, #280]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dcaa:	4847      	ldr	r0, [pc, #284]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dcac:	f003 fb32 	bl	8011314 <iprintf>
 800dcb0:	7dfb      	ldrb	r3, [r7, #23]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	484f      	ldr	r0, [pc, #316]	@ (800ddf4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800dcb6:	f003 fb2d 	bl	8011314 <iprintf>
 800dcba:	e00c      	b.n	800dcd6 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800dcbc:	4840      	ldr	r0, [pc, #256]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dcbe:	f7fd fe30 	bl	800b922 <DbgTraceGetFileName>
 800dcc2:	4601      	mov	r1, r0
 800dcc4:	f240 3336 	movw	r3, #822	@ 0x336
 800dcc8:	4a3e      	ldr	r2, [pc, #248]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dcca:	483f      	ldr	r0, [pc, #252]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dccc:	f003 fb22 	bl	8011314 <iprintf>
 800dcd0:	4849      	ldr	r0, [pc, #292]	@ (800ddf8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800dcd2:	f003 fb8f 	bl	80113f4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800dcd6:	2118      	movs	r1, #24
 800dcd8:	2001      	movs	r0, #1
 800dcda:	f7fd fcc6 	bl	800b66a <aci_hal_set_tx_power_level>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dce2:	7dfb      	ldrb	r3, [r7, #23]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00f      	beq.n	800dd08 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800dce8:	4835      	ldr	r0, [pc, #212]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dcea:	f7fd fe1a 	bl	800b922 <DbgTraceGetFileName>
 800dcee:	4601      	mov	r1, r0
 800dcf0:	f240 333f 	movw	r3, #831	@ 0x33f
 800dcf4:	4a33      	ldr	r2, [pc, #204]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dcf6:	4834      	ldr	r0, [pc, #208]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dcf8:	f003 fb0c 	bl	8011314 <iprintf>
 800dcfc:	7dfb      	ldrb	r3, [r7, #23]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	483e      	ldr	r0, [pc, #248]	@ (800ddfc <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800dd02:	f003 fb07 	bl	8011314 <iprintf>
 800dd06:	e00c      	b.n	800dd22 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800dd08:	482d      	ldr	r0, [pc, #180]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dd0a:	f7fd fe0a 	bl	800b922 <DbgTraceGetFileName>
 800dd0e:	4601      	mov	r1, r0
 800dd10:	f240 3343 	movw	r3, #835	@ 0x343
 800dd14:	4a2b      	ldr	r2, [pc, #172]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dd16:	482c      	ldr	r0, [pc, #176]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dd18:	f003 fafc 	bl	8011314 <iprintf>
 800dd1c:	4838      	ldr	r0, [pc, #224]	@ (800de00 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dd1e:	f003 fb69 	bl	80113f4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800dd22:	f7fd f91c 	bl	800af5e <aci_gatt_init>
 800dd26:	4603      	mov	r3, r0
 800dd28:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dd2a:	7dfb      	ldrb	r3, [r7, #23]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00f      	beq.n	800dd50 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800dd30:	4823      	ldr	r0, [pc, #140]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dd32:	f7fd fdf6 	bl	800b922 <DbgTraceGetFileName>
 800dd36:	4601      	mov	r1, r0
 800dd38:	f44f 7353 	mov.w	r3, #844	@ 0x34c
 800dd3c:	4a21      	ldr	r2, [pc, #132]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dd3e:	4822      	ldr	r0, [pc, #136]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dd40:	f003 fae8 	bl	8011314 <iprintf>
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
 800dd46:	4619      	mov	r1, r3
 800dd48:	482e      	ldr	r0, [pc, #184]	@ (800de04 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dd4a:	f003 fae3 	bl	8011314 <iprintf>
 800dd4e:	e00c      	b.n	800dd6a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800dd50:	481b      	ldr	r0, [pc, #108]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dd52:	f7fd fde6 	bl	800b922 <DbgTraceGetFileName>
 800dd56:	4601      	mov	r1, r0
 800dd58:	f44f 7354 	mov.w	r3, #848	@ 0x350
 800dd5c:	4a19      	ldr	r2, [pc, #100]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800dd5e:	481a      	ldr	r0, [pc, #104]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800dd60:	f003 fad8 	bl	8011314 <iprintf>
 800dd64:	4828      	ldr	r0, [pc, #160]	@ (800de08 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dd66:	f003 fb45 	bl	80113f4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
 800dd70:	f043 0301 	orr.w	r3, r3, #1
 800dd74:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d069      	beq.n	800de50 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800dd7c:	4b23      	ldr	r3, [pc, #140]	@ (800de0c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800dd7e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800dd80:	1dba      	adds	r2, r7, #6
 800dd82:	7bf8      	ldrb	r0, [r7, #15]
 800dd84:	1cbb      	adds	r3, r7, #2
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	1d3b      	adds	r3, r7, #4
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	2206      	movs	r2, #6
 800dd90:	2100      	movs	r1, #0
 800dd92:	f7fc ff3a 	bl	800ac0a <aci_gap_init>
 800dd96:	4603      	mov	r3, r0
 800dd98:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800dd9a:	7dfb      	ldrb	r3, [r7, #23]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d039      	beq.n	800de14 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800dda0:	4807      	ldr	r0, [pc, #28]	@ (800ddc0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800dda2:	f7fd fdbe 	bl	800b922 <DbgTraceGetFileName>
 800dda6:	4601      	mov	r1, r0
 800dda8:	f44f 735c 	mov.w	r3, #880	@ 0x370
 800ddac:	4a05      	ldr	r2, [pc, #20]	@ (800ddc4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ddae:	4806      	ldr	r0, [pc, #24]	@ (800ddc8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ddb0:	f003 fab0 	bl	8011314 <iprintf>
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4815      	ldr	r0, [pc, #84]	@ (800de10 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800ddba:	f003 faab 	bl	8011314 <iprintf>
 800ddbe:	e036      	b.n	800de2e <Ble_Hci_Gap_Gatt_Init+0x30a>
 800ddc0:	08012d60 	.word	0x08012d60
 800ddc4:	080142b0 	.word	0x080142b0
 800ddc8:	08012d7c 	.word	0x08012d7c
 800ddcc:	08013340 	.word	0x08013340
 800ddd0:	0801336c 	.word	0x0801336c
 800ddd4:	0801339c 	.word	0x0801339c
 800ddd8:	080133bc 	.word	0x080133bc
 800dddc:	08013420 	.word	0x08013420
 800dde0:	08013474 	.word	0x08013474
 800dde4:	08014268 	.word	0x08014268
 800dde8:	080134b0 	.word	0x080134b0
 800ddec:	08013508 	.word	0x08013508
 800ddf0:	08014278 	.word	0x08014278
 800ddf4:	08013550 	.word	0x08013550
 800ddf8:	080135a8 	.word	0x080135a8
 800ddfc:	080135f0 	.word	0x080135f0
 800de00:	08013630 	.word	0x08013630
 800de04:	08013660 	.word	0x08013660
 800de08:	08013694 	.word	0x08013694
 800de0c:	080136b8 	.word	0x080136b8
 800de10:	080136c0 	.word	0x080136c0
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800de14:	487e      	ldr	r0, [pc, #504]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800de16:	f7fd fd84 	bl	800b922 <DbgTraceGetFileName>
 800de1a:	4601      	mov	r1, r0
 800de1c:	f44f 735d 	mov.w	r3, #884	@ 0x374
 800de20:	4a7c      	ldr	r2, [pc, #496]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800de22:	487d      	ldr	r0, [pc, #500]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800de24:	f003 fa76 	bl	8011314 <iprintf>
 800de28:	487c      	ldr	r0, [pc, #496]	@ (800e01c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800de2a:	f003 fae3 	bl	80113f4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800de2e:	88fc      	ldrh	r4, [r7, #6]
 800de30:	88bd      	ldrh	r5, [r7, #4]
 800de32:	68b8      	ldr	r0, [r7, #8]
 800de34:	f7f2 f9a4 	bl	8000180 <strlen>
 800de38:	4603      	mov	r3, r0
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	4613      	mov	r3, r2
 800de42:	2200      	movs	r2, #0
 800de44:	4629      	mov	r1, r5
 800de46:	4620      	mov	r0, r4
 800de48:	f7fd fa8c 	bl	800b364 <aci_gatt_update_char_value>
 800de4c:	4603      	mov	r3, r0
 800de4e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800de50:	88f8      	ldrh	r0, [r7, #6]
 800de52:	8879      	ldrh	r1, [r7, #2]
 800de54:	463b      	mov	r3, r7
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	2302      	movs	r3, #2
 800de5a:	2200      	movs	r2, #0
 800de5c:	f7fd fa82 	bl	800b364 <aci_gatt_update_char_value>
 800de60:	4603      	mov	r3, r0
 800de62:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800de64:	2202      	movs	r2, #2
 800de66:	2102      	movs	r1, #2
 800de68:	2000      	movs	r0, #0
 800de6a:	f7fd fcdd 	bl	800b828 <hci_le_set_default_phy>
 800de6e:	4603      	mov	r3, r0
 800de70:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800de72:	7dfb      	ldrb	r3, [r7, #23]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00f      	beq.n	800de98 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800de78:	4865      	ldr	r0, [pc, #404]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800de7a:	f7fd fd52 	bl	800b922 <DbgTraceGetFileName>
 800de7e:	4601      	mov	r1, r0
 800de80:	f240 3396 	movw	r3, #918	@ 0x396
 800de84:	4a63      	ldr	r2, [pc, #396]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800de86:	4864      	ldr	r0, [pc, #400]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800de88:	f003 fa44 	bl	8011314 <iprintf>
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	4619      	mov	r1, r3
 800de90:	4863      	ldr	r0, [pc, #396]	@ (800e020 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800de92:	f003 fa3f 	bl	8011314 <iprintf>
 800de96:	e00c      	b.n	800deb2 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800de98:	485d      	ldr	r0, [pc, #372]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800de9a:	f7fd fd42 	bl	800b922 <DbgTraceGetFileName>
 800de9e:	4601      	mov	r1, r0
 800dea0:	f240 339a 	movw	r3, #922	@ 0x39a
 800dea4:	4a5b      	ldr	r2, [pc, #364]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dea6:	485c      	ldr	r0, [pc, #368]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dea8:	f003 fa34 	bl	8011314 <iprintf>
 800deac:	485d      	ldr	r0, [pc, #372]	@ (800e024 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800deae:	f003 faa1 	bl	80113f4 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800deb2:	4b5d      	ldr	r3, [pc, #372]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800deb4:	2201      	movs	r2, #1
 800deb6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800deb8:	4b5b      	ldr	r3, [pc, #364]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	4618      	mov	r0, r3
 800debe:	f7fc fd25 	bl	800a90c <aci_gap_set_io_capability>
 800dec2:	4603      	mov	r3, r0
 800dec4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dec6:	7dfb      	ldrb	r3, [r7, #23]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00f      	beq.n	800deec <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800decc:	4850      	ldr	r0, [pc, #320]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dece:	f7fd fd28 	bl	800b922 <DbgTraceGetFileName>
 800ded2:	4601      	mov	r1, r0
 800ded4:	f44f 7369 	mov.w	r3, #932	@ 0x3a4
 800ded8:	4a4e      	ldr	r2, [pc, #312]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800deda:	484f      	ldr	r0, [pc, #316]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dedc:	f003 fa1a 	bl	8011314 <iprintf>
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
 800dee2:	4619      	mov	r1, r3
 800dee4:	4851      	ldr	r0, [pc, #324]	@ (800e02c <Ble_Hci_Gap_Gatt_Init+0x508>)
 800dee6:	f003 fa15 	bl	8011314 <iprintf>
 800deea:	e00c      	b.n	800df06 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800deec:	4848      	ldr	r0, [pc, #288]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800deee:	f7fd fd18 	bl	800b922 <DbgTraceGetFileName>
 800def2:	4601      	mov	r1, r0
 800def4:	f44f 736a 	mov.w	r3, #936	@ 0x3a8
 800def8:	4a46      	ldr	r2, [pc, #280]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800defa:	4847      	ldr	r0, [pc, #284]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800defc:	f003 fa0a 	bl	8011314 <iprintf>
 800df00:	484b      	ldr	r0, [pc, #300]	@ (800e030 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800df02:	f003 fa77 	bl	80113f4 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800df06:	4b48      	ldr	r3, [pc, #288]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df08:	2201      	movs	r2, #1
 800df0a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800df0c:	4b46      	ldr	r3, [pc, #280]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df0e:	2208      	movs	r2, #8
 800df10:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800df12:	4b45      	ldr	r3, [pc, #276]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df14:	2210      	movs	r2, #16
 800df16:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800df18:	4b43      	ldr	r3, [pc, #268]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800df1e:	4b42      	ldr	r3, [pc, #264]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df20:	4a44      	ldr	r2, [pc, #272]	@ (800e034 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800df22:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800df24:	4b40      	ldr	r3, [pc, #256]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df26:	2200      	movs	r2, #0
 800df28:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800df2a:	4b3f      	ldr	r3, [pc, #252]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df2c:	789c      	ldrb	r4, [r3, #2]
 800df2e:	4b3e      	ldr	r3, [pc, #248]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df30:	785d      	ldrb	r5, [r3, #1]
 800df32:	4b3d      	ldr	r3, [pc, #244]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df34:	791b      	ldrb	r3, [r3, #4]
 800df36:	4a3c      	ldr	r2, [pc, #240]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df38:	7952      	ldrb	r2, [r2, #5]
 800df3a:	493b      	ldr	r1, [pc, #236]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df3c:	78c9      	ldrb	r1, [r1, #3]
 800df3e:	483a      	ldr	r0, [pc, #232]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800df40:	6880      	ldr	r0, [r0, #8]
 800df42:	2600      	movs	r6, #0
 800df44:	9604      	str	r6, [sp, #16]
 800df46:	9003      	str	r0, [sp, #12]
 800df48:	9102      	str	r1, [sp, #8]
 800df4a:	9201      	str	r2, [sp, #4]
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	2300      	movs	r3, #0
 800df50:	2201      	movs	r2, #1
 800df52:	4629      	mov	r1, r5
 800df54:	4620      	mov	r0, r4
 800df56:	f7fc fd2d 	bl	800a9b4 <aci_gap_set_authentication_requirement>
 800df5a:	4603      	mov	r3, r0
 800df5c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800df5e:	7dfb      	ldrb	r3, [r7, #23]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00f      	beq.n	800df84 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800df64:	482a      	ldr	r0, [pc, #168]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800df66:	f7fd fcdc 	bl	800b922 <DbgTraceGetFileName>
 800df6a:	4601      	mov	r1, r0
 800df6c:	f240 33c3 	movw	r3, #963	@ 0x3c3
 800df70:	4a28      	ldr	r2, [pc, #160]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800df72:	4829      	ldr	r0, [pc, #164]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800df74:	f003 f9ce 	bl	8011314 <iprintf>
 800df78:	7dfb      	ldrb	r3, [r7, #23]
 800df7a:	4619      	mov	r1, r3
 800df7c:	482e      	ldr	r0, [pc, #184]	@ (800e038 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800df7e:	f003 f9c9 	bl	8011314 <iprintf>
 800df82:	e00c      	b.n	800df9e <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800df84:	4822      	ldr	r0, [pc, #136]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800df86:	f7fd fccc 	bl	800b922 <DbgTraceGetFileName>
 800df8a:	4601      	mov	r1, r0
 800df8c:	f240 33c7 	movw	r3, #967	@ 0x3c7
 800df90:	4a20      	ldr	r2, [pc, #128]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800df92:	4821      	ldr	r0, [pc, #132]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800df94:	f003 f9be 	bl	8011314 <iprintf>
 800df98:	4828      	ldr	r0, [pc, #160]	@ (800e03c <Ble_Hci_Gap_Gatt_Init+0x518>)
 800df9a:	f003 fa2b 	bl	80113f4 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800df9e:	4b22      	ldr	r3, [pc, #136]	@ (800e028 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dfa0:	789b      	ldrb	r3, [r3, #2]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d023      	beq.n	800dfee <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800dfa6:	f7fc ff4f 	bl	800ae48 <aci_gap_configure_filter_accept_list>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800dfae:	7dfb      	ldrb	r3, [r7, #23]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00f      	beq.n	800dfd4 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800dfb4:	4816      	ldr	r0, [pc, #88]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dfb6:	f7fd fcb4 	bl	800b922 <DbgTraceGetFileName>
 800dfba:	4601      	mov	r1, r0
 800dfbc:	f240 33d2 	movw	r3, #978	@ 0x3d2
 800dfc0:	4a14      	ldr	r2, [pc, #80]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dfc2:	4815      	ldr	r0, [pc, #84]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dfc4:	f003 f9a6 	bl	8011314 <iprintf>
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	481c      	ldr	r0, [pc, #112]	@ (800e040 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800dfce:	f003 f9a1 	bl	8011314 <iprintf>
 800dfd2:	e00c      	b.n	800dfee <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800dfd4:	480e      	ldr	r0, [pc, #56]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dfd6:	f7fd fca4 	bl	800b922 <DbgTraceGetFileName>
 800dfda:	4601      	mov	r1, r0
 800dfdc:	f240 33d6 	movw	r3, #982	@ 0x3d6
 800dfe0:	4a0c      	ldr	r2, [pc, #48]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dfe2:	480d      	ldr	r0, [pc, #52]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dfe4:	f003 f996 	bl	8011314 <iprintf>
 800dfe8:	4816      	ldr	r0, [pc, #88]	@ (800e044 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800dfea:	f003 fa03 	bl	80113f4 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800dfee:	4808      	ldr	r0, [pc, #32]	@ (800e010 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dff0:	f7fd fc97 	bl	800b922 <DbgTraceGetFileName>
 800dff4:	4601      	mov	r1, r0
 800dff6:	f240 33d9 	movw	r3, #985	@ 0x3d9
 800dffa:	4a06      	ldr	r2, [pc, #24]	@ (800e014 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dffc:	4806      	ldr	r0, [pc, #24]	@ (800e018 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dffe:	f003 f989 	bl	8011314 <iprintf>
 800e002:	4811      	ldr	r0, [pc, #68]	@ (800e048 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800e004:	f003 f986 	bl	8011314 <iprintf>
}
 800e008:	bf00      	nop
 800e00a:	371c      	adds	r7, #28
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e010:	08012d60 	.word	0x08012d60
 800e014:	080142b0 	.word	0x080142b0
 800e018:	08012d7c 	.word	0x08012d7c
 800e01c:	080136f0 	.word	0x080136f0
 800e020:	08013710 	.word	0x08013710
 800e024:	0801374c 	.word	0x0801374c
 800e028:	200015ac 	.word	0x200015ac
 800e02c:	08013778 	.word	0x08013778
 800e030:	080137b8 	.word	0x080137b8
 800e034:	0001b207 	.word	0x0001b207
 800e038:	080137e8 	.word	0x080137e8
 800e03c:	08013834 	.word	0x08013834
 800e040:	08013870 	.word	0x08013870
 800e044:	080138b0 	.word	0x080138b0
 800e048:	080138e0 	.word	0x080138e0

0800e04c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b08c      	sub	sp, #48	@ 0x30
 800e050:	af08      	add	r7, sp, #32
 800e052:	4603      	mov	r3, r0
 800e054:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e056:	2392      	movs	r3, #146	@ 0x92
 800e058:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800e05a:	4a32      	ldr	r2, [pc, #200]	@ (800e124 <Adv_Request+0xd8>)
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800e062:	2300      	movs	r3, #0
 800e064:	9306      	str	r3, [sp, #24]
 800e066:	2300      	movs	r3, #0
 800e068:	9305      	str	r3, [sp, #20]
 800e06a:	2300      	movs	r3, #0
 800e06c:	9304      	str	r3, [sp, #16]
 800e06e:	2300      	movs	r3, #0
 800e070:	9303      	str	r3, [sp, #12]
 800e072:	2300      	movs	r3, #0
 800e074:	9302      	str	r3, [sp, #8]
 800e076:	2300      	movs	r3, #0
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	2300      	movs	r3, #0
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	2300      	movs	r3, #0
 800e080:	22a0      	movs	r2, #160	@ 0xa0
 800e082:	2180      	movs	r1, #128	@ 0x80
 800e084:	2000      	movs	r0, #0
 800e086:	f7fc fb47 	bl	800a718 <aci_gap_set_discoverable>
 800e08a:	4603      	mov	r3, r0
 800e08c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00f      	beq.n	800e0b4 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800e094:	4824      	ldr	r0, [pc, #144]	@ (800e128 <Adv_Request+0xdc>)
 800e096:	f7fd fc44 	bl	800b922 <DbgTraceGetFileName>
 800e09a:	4601      	mov	r1, r0
 800e09c:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 800e0a0:	4a22      	ldr	r2, [pc, #136]	@ (800e12c <Adv_Request+0xe0>)
 800e0a2:	4823      	ldr	r0, [pc, #140]	@ (800e130 <Adv_Request+0xe4>)
 800e0a4:	f003 f936 	bl	8011314 <iprintf>
 800e0a8:	7bfb      	ldrb	r3, [r7, #15]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4821      	ldr	r0, [pc, #132]	@ (800e134 <Adv_Request+0xe8>)
 800e0ae:	f003 f931 	bl	8011314 <iprintf>
 800e0b2:	e00c      	b.n	800e0ce <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800e0b4:	481c      	ldr	r0, [pc, #112]	@ (800e128 <Adv_Request+0xdc>)
 800e0b6:	f7fd fc34 	bl	800b922 <DbgTraceGetFileName>
 800e0ba:	4601      	mov	r1, r0
 800e0bc:	f240 33f3 	movw	r3, #1011	@ 0x3f3
 800e0c0:	4a1a      	ldr	r2, [pc, #104]	@ (800e12c <Adv_Request+0xe0>)
 800e0c2:	481b      	ldr	r0, [pc, #108]	@ (800e130 <Adv_Request+0xe4>)
 800e0c4:	f003 f926 	bl	8011314 <iprintf>
 800e0c8:	481b      	ldr	r0, [pc, #108]	@ (800e138 <Adv_Request+0xec>)
 800e0ca:	f003 f993 	bl	80113f4 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800e0ce:	491b      	ldr	r1, [pc, #108]	@ (800e13c <Adv_Request+0xf0>)
 800e0d0:	2013      	movs	r0, #19
 800e0d2:	f7fc fe47 	bl	800ad64 <aci_gap_update_adv_data>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800e0da:	7bfb      	ldrb	r3, [r7, #15]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00f      	beq.n	800e100 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800e0e0:	4811      	ldr	r0, [pc, #68]	@ (800e128 <Adv_Request+0xdc>)
 800e0e2:	f7fd fc1e 	bl	800b922 <DbgTraceGetFileName>
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800e0ec:	4a0f      	ldr	r2, [pc, #60]	@ (800e12c <Adv_Request+0xe0>)
 800e0ee:	4810      	ldr	r0, [pc, #64]	@ (800e130 <Adv_Request+0xe4>)
 800e0f0:	f003 f910 	bl	8011314 <iprintf>
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4811      	ldr	r0, [pc, #68]	@ (800e140 <Adv_Request+0xf4>)
 800e0fa:	f003 f90b 	bl	8011314 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800e0fe:	e00d      	b.n	800e11c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800e100:	4809      	ldr	r0, [pc, #36]	@ (800e128 <Adv_Request+0xdc>)
 800e102:	f7fd fc0e 	bl	800b922 <DbgTraceGetFileName>
 800e106:	4601      	mov	r1, r0
 800e108:	f240 4302 	movw	r3, #1026	@ 0x402
 800e10c:	4a07      	ldr	r2, [pc, #28]	@ (800e12c <Adv_Request+0xe0>)
 800e10e:	4808      	ldr	r0, [pc, #32]	@ (800e130 <Adv_Request+0xe4>)
 800e110:	f003 f900 	bl	8011314 <iprintf>
 800e114:	480b      	ldr	r0, [pc, #44]	@ (800e144 <Adv_Request+0xf8>)
 800e116:	f003 f8fd 	bl	8011314 <iprintf>
  return;
 800e11a:	bf00      	nop
}
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	200015ac 	.word	0x200015ac
 800e128:	08012d60 	.word	0x08012d60
 800e12c:	080142c8 	.word	0x080142c8
 800e130:	08012d7c 	.word	0x08012d7c
 800e134:	0801390c 	.word	0x0801390c
 800e138:	08013944 	.word	0x08013944
 800e13c:	20000014 	.word	0x20000014
 800e140:	0801396c 	.word	0x0801396c
 800e144:	080139a0 	.word	0x080139a0

0800e148 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b086      	sub	sp, #24
 800e14c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800e14e:	f7ff f8f5 	bl	800d33c <LL_FLASH_GetUDN>
 800e152:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e15a:	d023      	beq.n	800e1a4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800e15c:	f7ff f906 	bl	800d36c <LL_FLASH_GetSTCompanyID>
 800e160:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800e162:	f7ff f8f7 	bl	800d354 <LL_FLASH_GetDeviceID>
 800e166:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	4b16      	ldr	r3, [pc, #88]	@ (800e1c8 <BleGetBdAddress+0x80>)
 800e16e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	0a1b      	lsrs	r3, r3, #8
 800e174:	b2da      	uxtb	r2, r3
 800e176:	4b14      	ldr	r3, [pc, #80]	@ (800e1c8 <BleGetBdAddress+0x80>)
 800e178:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	4b12      	ldr	r3, [pc, #72]	@ (800e1c8 <BleGetBdAddress+0x80>)
 800e180:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	b2da      	uxtb	r2, r3
 800e186:	4b10      	ldr	r3, [pc, #64]	@ (800e1c8 <BleGetBdAddress+0x80>)
 800e188:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	0a1b      	lsrs	r3, r3, #8
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c8 <BleGetBdAddress+0x80>)
 800e192:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	0c1b      	lsrs	r3, r3, #16
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c8 <BleGetBdAddress+0x80>)
 800e19c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800e19e:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c8 <BleGetBdAddress+0x80>)
 800e1a0:	617b      	str	r3, [r7, #20]
 800e1a2:	e00b      	b.n	800e1bc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f7fd fe57 	bl	800be58 <OTP_Read>
 800e1aa:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	e001      	b.n	800e1bc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800e1b8:	4b04      	ldr	r3, [pc, #16]	@ (800e1cc <BleGetBdAddress+0x84>)
 800e1ba:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800e1bc:	697b      	ldr	r3, [r7, #20]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	200015a4 	.word	0x200015a4
 800e1cc:	08014260 	.word	0x08014260

0800e1d0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800e1d6:	4b1f      	ldr	r3, [pc, #124]	@ (800e254 <Adv_Cancel+0x84>)
 800e1d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e1dc:	2b05      	cmp	r3, #5
 800e1de:	d035      	beq.n	800e24c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e1e0:	2392      	movs	r3, #146	@ 0x92
 800e1e2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800e1e4:	f7fc fa74 	bl	800a6d0 <aci_gap_set_non_discoverable>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800e1ec:	4b19      	ldr	r3, [pc, #100]	@ (800e254 <Adv_Cancel+0x84>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00d      	beq.n	800e216 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800e1fa:	4817      	ldr	r0, [pc, #92]	@ (800e258 <Adv_Cancel+0x88>)
 800e1fc:	f7fd fb91 	bl	800b922 <DbgTraceGetFileName>
 800e200:	4601      	mov	r1, r0
 800e202:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 800e206:	4a15      	ldr	r2, [pc, #84]	@ (800e25c <Adv_Cancel+0x8c>)
 800e208:	4815      	ldr	r0, [pc, #84]	@ (800e260 <Adv_Cancel+0x90>)
 800e20a:	f003 f883 	bl	8011314 <iprintf>
 800e20e:	4815      	ldr	r0, [pc, #84]	@ (800e264 <Adv_Cancel+0x94>)
 800e210:	f003 f880 	bl	8011314 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800e214:	e01a      	b.n	800e24c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800e216:	4810      	ldr	r0, [pc, #64]	@ (800e258 <Adv_Cancel+0x88>)
 800e218:	f7fd fb83 	bl	800b922 <DbgTraceGetFileName>
 800e21c:	4601      	mov	r1, r0
 800e21e:	f240 4354 	movw	r3, #1108	@ 0x454
 800e222:	4a0e      	ldr	r2, [pc, #56]	@ (800e25c <Adv_Cancel+0x8c>)
 800e224:	480e      	ldr	r0, [pc, #56]	@ (800e260 <Adv_Cancel+0x90>)
 800e226:	f003 f875 	bl	8011314 <iprintf>
 800e22a:	480f      	ldr	r0, [pc, #60]	@ (800e268 <Adv_Cancel+0x98>)
 800e22c:	f003 f872 	bl	8011314 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800e230:	4809      	ldr	r0, [pc, #36]	@ (800e258 <Adv_Cancel+0x88>)
 800e232:	f7fd fb76 	bl	800b922 <DbgTraceGetFileName>
 800e236:	4601      	mov	r1, r0
 800e238:	f240 4355 	movw	r3, #1109	@ 0x455
 800e23c:	4a07      	ldr	r2, [pc, #28]	@ (800e25c <Adv_Cancel+0x8c>)
 800e23e:	4808      	ldr	r0, [pc, #32]	@ (800e260 <Adv_Cancel+0x90>)
 800e240:	f003 f868 	bl	8011314 <iprintf>
 800e244:	4809      	ldr	r0, [pc, #36]	@ (800e26c <Adv_Cancel+0x9c>)
 800e246:	f003 f865 	bl	8011314 <iprintf>
  return;
 800e24a:	bf00      	nop
 800e24c:	bf00      	nop
}
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	200015ac 	.word	0x200015ac
 800e258:	08012d60 	.word	0x08012d60
 800e25c:	080142d4 	.word	0x080142d4
 800e260:	08012d7c 	.word	0x08012d7c
 800e264:	080139c8 	.word	0x080139c8
 800e268:	080139ec 	.word	0x080139ec
 800e26c:	080139f4 	.word	0x080139f4

0800e270 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800e278:	2100      	movs	r1, #0
 800e27a:	2002      	movs	r0, #2
 800e27c:	f000 ff9a 	bl	800f1b4 <UTIL_SEQ_SetTask>

  return;
 800e280:	bf00      	nop
}
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e290:	2001      	movs	r0, #1
 800e292:	f000 fffb 	bl	800f28c <UTIL_SEQ_SetEvt>

  return;
 800e296:	bf00      	nop
}
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b082      	sub	sp, #8
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e2a6:	2001      	movs	r0, #1
 800e2a8:	f001 f810 	bl	800f2cc <UTIL_SEQ_WaitEvt>

  return;
 800e2ac:	bf00      	nop
}
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	3308      	adds	r3, #8
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fd9c 	bl	800ce04 <SVCCTL_UserEvtRx>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800e2d0:	7afb      	ldrb	r3, [r7, #11]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d003      	beq.n	800e2de <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800e2dc:	e003      	b.n	800e2e6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	701a      	strb	r2, [r3, #0]
  return;
 800e2e4:	bf00      	nop
}
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d002      	beq.n	800e302 <BLE_StatusNot+0x16>
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d006      	beq.n	800e30e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800e300:	e00b      	b.n	800e31a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e302:	2303      	movs	r3, #3
 800e304:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 ff80 	bl	800f20c <UTIL_SEQ_PauseTask>
      break;
 800e30c:	e005      	b.n	800e31a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e30e:	2303      	movs	r3, #3
 800e310:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f000 ff9a 	bl	800f24c <UTIL_SEQ_ResumeTask>
      break;
 800e318:	bf00      	nop
  }

  return;
 800e31a:	bf00      	nop
}
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	2b06      	cmp	r3, #6
 800e332:	d847      	bhi.n	800e3c4 <Custom_STM_App_Notification+0xa0>
 800e334:	a201      	add	r2, pc, #4	@ (adr r2, 800e33c <Custom_STM_App_Notification+0x18>)
 800e336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e33a:	bf00      	nop
 800e33c:	0800e3c5 	.word	0x0800e3c5
 800e340:	0800e359 	.word	0x0800e359
 800e344:	0800e385 	.word	0x0800e385
 800e348:	0800e3a5 	.word	0x0800e3a5
 800e34c:	0800e3c5 	.word	0x0800e3c5
 800e350:	0800e3c5 	.word	0x0800e3c5
 800e354:	0800e3c5 	.word	0x0800e3c5
      /* USER CODE END CUSTOM_STM_TEST_READ_EVT */
      break;

    case CUSTOM_STM_TEST_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEST_WRITE_NO_RESP_EVT */
    	APP_DBG_MSG("%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800e358:	481d      	ldr	r0, [pc, #116]	@ (800e3d0 <Custom_STM_App_Notification+0xac>)
 800e35a:	f7fd fae2 	bl	800b922 <DbgTraceGetFileName>
 800e35e:	4601      	mov	r1, r0
 800e360:	2370      	movs	r3, #112	@ 0x70
 800e362:	4a1c      	ldr	r2, [pc, #112]	@ (800e3d4 <Custom_STM_App_Notification+0xb0>)
 800e364:	481c      	ldr	r0, [pc, #112]	@ (800e3d8 <Custom_STM_App_Notification+0xb4>)
 800e366:	f002 ffd5 	bl	8011314 <iprintf>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	4619      	mov	r1, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	3301      	adds	r3, #1
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	461a      	mov	r2, r3
 800e37c:	4817      	ldr	r0, [pc, #92]	@ (800e3dc <Custom_STM_App_Notification+0xb8>)
 800e37e:	f002 ffc9 	bl	8011314 <iprintf>

      /* USER CODE END CUSTOM_STM_TEST_WRITE_NO_RESP_EVT */
      break;
 800e382:	e020      	b.n	800e3c6 <Custom_STM_App_Notification+0xa2>

    case CUSTOM_STM_DATA_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_DATA_NOTIFY_ENABLED_EVT */
    	APP_DBG_MSG("Custom Notify Enabled \n");
 800e384:	4812      	ldr	r0, [pc, #72]	@ (800e3d0 <Custom_STM_App_Notification+0xac>)
 800e386:	f7fd facc 	bl	800b922 <DbgTraceGetFileName>
 800e38a:	4601      	mov	r1, r0
 800e38c:	2377      	movs	r3, #119	@ 0x77
 800e38e:	4a11      	ldr	r2, [pc, #68]	@ (800e3d4 <Custom_STM_App_Notification+0xb0>)
 800e390:	4811      	ldr	r0, [pc, #68]	@ (800e3d8 <Custom_STM_App_Notification+0xb4>)
 800e392:	f002 ffbf 	bl	8011314 <iprintf>
 800e396:	4812      	ldr	r0, [pc, #72]	@ (800e3e0 <Custom_STM_App_Notification+0xbc>)
 800e398:	f003 f82c 	bl	80113f4 <puts>
    	Custom_App_Context.Data_Notification_Status = 1;
 800e39c:	4b11      	ldr	r3, [pc, #68]	@ (800e3e4 <Custom_STM_App_Notification+0xc0>)
 800e39e:	2201      	movs	r2, #1
 800e3a0:	701a      	strb	r2, [r3, #0]


      /* USER CODE END CUSTOM_STM_DATA_NOTIFY_ENABLED_EVT */
      break;
 800e3a2:	e010      	b.n	800e3c6 <Custom_STM_App_Notification+0xa2>

    case CUSTOM_STM_DATA_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_DATA_NOTIFY_DISABLED_EVT */
    	APP_DBG_MSG("Custom Notify Disabled \n");
 800e3a4:	480a      	ldr	r0, [pc, #40]	@ (800e3d0 <Custom_STM_App_Notification+0xac>)
 800e3a6:	f7fd fabc 	bl	800b922 <DbgTraceGetFileName>
 800e3aa:	4601      	mov	r1, r0
 800e3ac:	2380      	movs	r3, #128	@ 0x80
 800e3ae:	4a09      	ldr	r2, [pc, #36]	@ (800e3d4 <Custom_STM_App_Notification+0xb0>)
 800e3b0:	4809      	ldr	r0, [pc, #36]	@ (800e3d8 <Custom_STM_App_Notification+0xb4>)
 800e3b2:	f002 ffaf 	bl	8011314 <iprintf>
 800e3b6:	480c      	ldr	r0, [pc, #48]	@ (800e3e8 <Custom_STM_App_Notification+0xc4>)
 800e3b8:	f003 f81c 	bl	80113f4 <puts>
    	Custom_App_Context.Data_Notification_Status = 0;
 800e3bc:	4b09      	ldr	r3, [pc, #36]	@ (800e3e4 <Custom_STM_App_Notification+0xc0>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	701a      	strb	r2, [r3, #0]

      /* USER CODE END CUSTOM_STM_DATA_NOTIFY_DISABLED_EVT */
      break;
 800e3c2:	e000      	b.n	800e3c6 <Custom_STM_App_Notification+0xa2>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800e3c4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800e3c6:	bf00      	nop
}
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	08013a10 	.word	0x08013a10
 800e3d4:	080142e0 	.word	0x080142e0
 800e3d8:	08013a30 	.word	0x08013a30
 800e3dc:	08013a44 	.word	0x08013a44
 800e3e0:	08013a50 	.word	0x08013a50
 800e3e4:	20001634 	.word	0x20001634
 800e3e8:	08013a68 	.word	0x08013a68

0800e3ec <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <Custom_APP_Notification+0x16>
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d002      	beq.n	800e406 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800e400:	e002      	b.n	800e408 <Custom_APP_Notification+0x1c>
      break;
 800e402:	bf00      	nop
 800e404:	e000      	b.n	800e408 <Custom_APP_Notification+0x1c>
      break;
 800e406:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800e408:	bf00      	nop
}
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800e414:	b480      	push	{r7}
 800e416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.Data_Notification_Status = 0;
 800e418:	4b03      	ldr	r3, [pc, #12]	@ (800e428 <Custom_APP_Init+0x14>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800e41e:	bf00      	nop
}
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr
 800e428:	20001634 	.word	0x20001634

0800e42c <Custom_Data_Send_Notification>:
  /* USER CODE END Data_UC_Last*/
  return;
}

void Custom_Data_Send_Notification(void) /* Property Notification */
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Data_NS_1*/
  if(Custom_App_Context.Data_Notification_Status){
 800e436:	4b09      	ldr	r3, [pc, #36]	@ (800e45c <Custom_Data_Send_Notification+0x30>)
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <Custom_Data_Send_Notification+0x16>
	  updateflag = 1;
 800e43e:	2301      	movs	r3, #1
 800e440:	71fb      	strb	r3, [r7, #7]
  }

  /* USER CODE END Data_NS_1*/

  if (updateflag != 0)
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d004      	beq.n	800e452 <Custom_Data_Send_Notification+0x26>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_DATA, (uint8_t *)NotifyCharData);
 800e448:	4905      	ldr	r1, [pc, #20]	@ (800e460 <Custom_Data_Send_Notification+0x34>)
 800e44a:	2001      	movs	r0, #1
 800e44c:	f000 fa06 	bl	800e85c <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Data_NS_Last*/

  /* USER CODE END Data_NS_Last*/

  return;
 800e450:	bf00      	nop
 800e452:	bf00      	nop
}
 800e454:	3708      	adds	r7, #8
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	20001634 	.word	0x20001634
 800e460:	20001638 	.word	0x20001638

0800e464 <Notify_Client_With_Data>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

void Notify_Client_With_Data(uint8_t *pData, uint8_t len){
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	460b      	mov	r3, r1
 800e46e:	70fb      	strb	r3, [r7, #3]
	if(len > 512){
		APP_DBG_MSG("Data is too long \n");
	}

	for (int i = 0; i < len; i++){
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]
 800e474:	e00b      	b.n	800e48e <Notify_Client_With_Data+0x2a>
		NotifyCharData[i] = pData[i];
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	4413      	add	r3, r2
 800e47c:	7819      	ldrb	r1, [r3, #0]
 800e47e:	4a09      	ldr	r2, [pc, #36]	@ (800e4a4 <Notify_Client_With_Data+0x40>)
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4413      	add	r3, r2
 800e484:	460a      	mov	r2, r1
 800e486:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++){
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3301      	adds	r3, #1
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	78fb      	ldrb	r3, [r7, #3]
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	429a      	cmp	r2, r3
 800e494:	dbef      	blt.n	800e476 <Notify_Client_With_Data+0x12>
	}
	Custom_Data_Send_Notification();
 800e496:	f7ff ffc9 	bl	800e42c <Custom_Data_Send_Notification>
	return;
 800e49a:	bf00      	nop
}
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	20001638 	.word	0x20001638

0800e4a8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b08c      	sub	sp, #48	@ 0x30
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800e4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	2bff      	cmp	r3, #255	@ 0xff
 800e4c2:	f040 80a0 	bne.w	800e606 <Custom_STM_Event_Handler+0x15e>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800e4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c8:	3302      	adds	r3, #2
 800e4ca:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ce:	881b      	ldrh	r3, [r3, #0]
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800e4d6:	2b1a      	cmp	r3, #26
 800e4d8:	f200 8091 	bhi.w	800e5fe <Custom_STM_Event_Handler+0x156>
 800e4dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4e4 <Custom_STM_Event_Handler+0x3c>)
 800e4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e2:	bf00      	nop
 800e4e4:	0800e551 	.word	0x0800e551
 800e4e8:	0800e5ff 	.word	0x0800e5ff
 800e4ec:	0800e5ff 	.word	0x0800e5ff
 800e4f0:	0800e5ff 	.word	0x0800e5ff
 800e4f4:	0800e5ff 	.word	0x0800e5ff
 800e4f8:	0800e5ff 	.word	0x0800e5ff
 800e4fc:	0800e5ff 	.word	0x0800e5ff
 800e500:	0800e5ff 	.word	0x0800e5ff
 800e504:	0800e5ff 	.word	0x0800e5ff
 800e508:	0800e5ff 	.word	0x0800e5ff
 800e50c:	0800e5ff 	.word	0x0800e5ff
 800e510:	0800e5ff 	.word	0x0800e5ff
 800e514:	0800e5ff 	.word	0x0800e5ff
 800e518:	0800e5ff 	.word	0x0800e5ff
 800e51c:	0800e5ff 	.word	0x0800e5ff
 800e520:	0800e5ff 	.word	0x0800e5ff
 800e524:	0800e5ff 	.word	0x0800e5ff
 800e528:	0800e5ff 	.word	0x0800e5ff
 800e52c:	0800e5ff 	.word	0x0800e5ff
 800e530:	0800e5ff 	.word	0x0800e5ff
 800e534:	0800e5ff 	.word	0x0800e5ff
 800e538:	0800e5ff 	.word	0x0800e5ff
 800e53c:	0800e5ff 	.word	0x0800e5ff
 800e540:	0800e5ff 	.word	0x0800e5ff
 800e544:	0800e5ff 	.word	0x0800e5ff
 800e548:	0800e5ff 	.word	0x0800e5ff
 800e54c:	0800e5e1 	.word	0x0800e5e1
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800e550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e552:	3302      	adds	r3, #2
 800e554:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomDataHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	885b      	ldrh	r3, [r3, #2]
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	461a      	mov	r2, r3
 800e55e:	4b2d      	ldr	r3, [pc, #180]	@ (800e614 <Custom_STM_Event_Handler+0x16c>)
 800e560:	889b      	ldrh	r3, [r3, #4]
 800e562:	3302      	adds	r3, #2
 800e564:	429a      	cmp	r2, r3
 800e566:	d12c      	bne.n	800e5c2 <Custom_STM_Event_Handler+0x11a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800e568:	2301      	movs	r3, #1
 800e56a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */

            switch (attribute_modified->Attr_Data[0])
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	7a1b      	ldrb	r3, [r3, #8]
 800e572:	2b02      	cmp	r3, #2
 800e574:	d01d      	beq.n	800e5b2 <Custom_STM_Event_Handler+0x10a>
 800e576:	2b02      	cmp	r3, #2
 800e578:	dc30      	bgt.n	800e5dc <Custom_STM_Event_Handler+0x134>
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d002      	beq.n	800e584 <Custom_STM_Event_Handler+0xdc>
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d00f      	beq.n	800e5a2 <Custom_STM_Event_Handler+0xfa>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
                break;
 800e582:	e02b      	b.n	800e5dc <Custom_STM_Event_Handler+0x134>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATA_NOTIFY_DISABLED_EVT;
 800e584:	2303      	movs	r3, #3
 800e586:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e588:	f107 0308 	add.w	r3, r7, #8
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7ff fec9 	bl	800e324 <Custom_STM_App_Notification>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATA_INDICATE_DISABLED_EVT;
 800e592:	2305      	movs	r3, #5
 800e594:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e596:	f107 0308 	add.w	r3, r7, #8
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff fec2 	bl	800e324 <Custom_STM_App_Notification>
                break;
 800e5a0:	e01d      	b.n	800e5de <Custom_STM_Event_Handler+0x136>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATA_NOTIFY_ENABLED_EVT;
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e5a6:	f107 0308 	add.w	r3, r7, #8
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7ff feba 	bl	800e324 <Custom_STM_App_Notification>
                break;
 800e5b0:	e015      	b.n	800e5de <Custom_STM_Event_Handler+0x136>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATA_INDICATE_ENABLED_EVT;
 800e5b2:	2304      	movs	r3, #4
 800e5b4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e5b6:	f107 0308 	add.w	r3, r7, #8
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7ff feb2 	bl	800e324 <Custom_STM_App_Notification>
                break;
 800e5c0:	e00d      	b.n	800e5de <Custom_STM_Event_Handler+0x136>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDataHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTestHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	885b      	ldrh	r3, [r3, #2]
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	4b12      	ldr	r3, [pc, #72]	@ (800e614 <Custom_STM_Event_Handler+0x16c>)
 800e5cc:	885b      	ldrh	r3, [r3, #2]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d116      	bne.n	800e602 <Custom_STM_Event_Handler+0x15a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTestHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800e5da:	e012      	b.n	800e602 <Custom_STM_Event_Handler+0x15a>
                break;
 800e5dc:	bf00      	nop
          break;
 800e5de:	e010      	b.n	800e602 <Custom_STM_Event_Handler+0x15a>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e2:	3302      	adds	r3, #2
 800e5e4:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800e5e6:	2306      	movs	r3, #6
 800e5e8:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800e5f2:	f107 0308 	add.w	r3, r7, #8
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff fe94 	bl	800e324 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800e5fc:	e002      	b.n	800e604 <Custom_STM_Event_Handler+0x15c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800e5fe:	bf00      	nop
 800e600:	e002      	b.n	800e608 <Custom_STM_Event_Handler+0x160>
          break;
 800e602:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e604:	e000      	b.n	800e608 <Custom_STM_Event_Handler+0x160>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800e606:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800e608:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800e60c:	4618      	mov	r0, r3
 800e60e:	3730      	adds	r7, #48	@ 0x30
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	20001838 	.word	0x20001838

0800e618 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08c      	sub	sp, #48	@ 0x30
 800e61c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e61e:	2392      	movs	r3, #146	@ 0x92
 800e620:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800e622:	487f      	ldr	r0, [pc, #508]	@ (800e820 <SVCCTL_InitCustomSvc+0x208>)
 800e624:	f7fe fbd4 	bl	800cdd0 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800e628:	2306      	movs	r3, #6
 800e62a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 800e62c:	238f      	movs	r3, #143	@ 0x8f
 800e62e:	713b      	strb	r3, [r7, #4]
 800e630:	23e5      	movs	r3, #229	@ 0xe5
 800e632:	717b      	strb	r3, [r7, #5]
 800e634:	23b3      	movs	r3, #179	@ 0xb3
 800e636:	71bb      	strb	r3, [r7, #6]
 800e638:	23d5      	movs	r3, #213	@ 0xd5
 800e63a:	71fb      	strb	r3, [r7, #7]
 800e63c:	232e      	movs	r3, #46	@ 0x2e
 800e63e:	723b      	strb	r3, [r7, #8]
 800e640:	237f      	movs	r3, #127	@ 0x7f
 800e642:	727b      	strb	r3, [r7, #9]
 800e644:	234a      	movs	r3, #74	@ 0x4a
 800e646:	72bb      	strb	r3, [r7, #10]
 800e648:	2398      	movs	r3, #152	@ 0x98
 800e64a:	72fb      	strb	r3, [r7, #11]
 800e64c:	232a      	movs	r3, #42	@ 0x2a
 800e64e:	733b      	strb	r3, [r7, #12]
 800e650:	2348      	movs	r3, #72	@ 0x48
 800e652:	737b      	strb	r3, [r7, #13]
 800e654:	237a      	movs	r3, #122	@ 0x7a
 800e656:	73bb      	strb	r3, [r7, #14]
 800e658:	23cc      	movs	r3, #204	@ 0xcc
 800e65a:	73fb      	strb	r3, [r7, #15]
 800e65c:	2300      	movs	r3, #0
 800e65e:	743b      	strb	r3, [r7, #16]
 800e660:	2300      	movs	r3, #0
 800e662:	747b      	strb	r3, [r7, #17]
 800e664:	2300      	movs	r3, #0
 800e666:	74bb      	strb	r3, [r7, #18]
 800e668:	2300      	movs	r3, #0
 800e66a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e66c:	7dbb      	ldrb	r3, [r7, #22]
 800e66e:	1d39      	adds	r1, r7, #4
 800e670:	4a6c      	ldr	r2, [pc, #432]	@ (800e824 <SVCCTL_InitCustomSvc+0x20c>)
 800e672:	9200      	str	r2, [sp, #0]
 800e674:	2201      	movs	r2, #1
 800e676:	2002      	movs	r0, #2
 800e678:	f7fc fc96 	bl	800afa8 <aci_gatt_add_service>
 800e67c:	4603      	mov	r3, r0
 800e67e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomP2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e680:	7dfb      	ldrb	r3, [r7, #23]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00f      	beq.n	800e6a6 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: P2PS, error code: 0x%x \n\r", ret);
 800e686:	4868      	ldr	r0, [pc, #416]	@ (800e828 <SVCCTL_InitCustomSvc+0x210>)
 800e688:	f7fd f94b 	bl	800b922 <DbgTraceGetFileName>
 800e68c:	4601      	mov	r1, r0
 800e68e:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800e692:	4a66      	ldr	r2, [pc, #408]	@ (800e82c <SVCCTL_InitCustomSvc+0x214>)
 800e694:	4866      	ldr	r0, [pc, #408]	@ (800e830 <SVCCTL_InitCustomSvc+0x218>)
 800e696:	f002 fe3d 	bl	8011314 <iprintf>
 800e69a:	7dfb      	ldrb	r3, [r7, #23]
 800e69c:	4619      	mov	r1, r3
 800e69e:	4865      	ldr	r0, [pc, #404]	@ (800e834 <SVCCTL_InitCustomSvc+0x21c>)
 800e6a0:	f002 fe38 	bl	8011314 <iprintf>
 800e6a4:	e00c      	b.n	800e6c0 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: P2PS \n\r");
 800e6a6:	4860      	ldr	r0, [pc, #384]	@ (800e828 <SVCCTL_InitCustomSvc+0x210>)
 800e6a8:	f7fd f93b 	bl	800b922 <DbgTraceGetFileName>
 800e6ac:	4601      	mov	r1, r0
 800e6ae:	f44f 73a9 	mov.w	r3, #338	@ 0x152
 800e6b2:	4a5e      	ldr	r2, [pc, #376]	@ (800e82c <SVCCTL_InitCustomSvc+0x214>)
 800e6b4:	485e      	ldr	r0, [pc, #376]	@ (800e830 <SVCCTL_InitCustomSvc+0x218>)
 800e6b6:	f002 fe2d 	bl	8011314 <iprintf>
 800e6ba:	485f      	ldr	r0, [pc, #380]	@ (800e838 <SVCCTL_InitCustomSvc+0x220>)
 800e6bc:	f002 fe2a 	bl	8011314 <iprintf>
  }

  /**
   *  Test_Transmission
   */
  COPY_TEST_TRANSMISSION_UUID(uuid.Char_UUID_128);
 800e6c0:	2319      	movs	r3, #25
 800e6c2:	713b      	strb	r3, [r7, #4]
 800e6c4:	23ed      	movs	r3, #237	@ 0xed
 800e6c6:	717b      	strb	r3, [r7, #5]
 800e6c8:	2382      	movs	r3, #130	@ 0x82
 800e6ca:	71bb      	strb	r3, [r7, #6]
 800e6cc:	23ae      	movs	r3, #174	@ 0xae
 800e6ce:	71fb      	strb	r3, [r7, #7]
 800e6d0:	23ed      	movs	r3, #237	@ 0xed
 800e6d2:	723b      	strb	r3, [r7, #8]
 800e6d4:	2321      	movs	r3, #33	@ 0x21
 800e6d6:	727b      	strb	r3, [r7, #9]
 800e6d8:	234c      	movs	r3, #76	@ 0x4c
 800e6da:	72bb      	strb	r3, [r7, #10]
 800e6dc:	239d      	movs	r3, #157	@ 0x9d
 800e6de:	72fb      	strb	r3, [r7, #11]
 800e6e0:	2341      	movs	r3, #65	@ 0x41
 800e6e2:	733b      	strb	r3, [r7, #12]
 800e6e4:	2345      	movs	r3, #69	@ 0x45
 800e6e6:	737b      	strb	r3, [r7, #13]
 800e6e8:	2322      	movs	r3, #34	@ 0x22
 800e6ea:	73bb      	strb	r3, [r7, #14]
 800e6ec:	238e      	movs	r3, #142	@ 0x8e
 800e6ee:	73fb      	strb	r3, [r7, #15]
 800e6f0:	2341      	movs	r3, #65	@ 0x41
 800e6f2:	743b      	strb	r3, [r7, #16]
 800e6f4:	23fe      	movs	r3, #254	@ 0xfe
 800e6f6:	747b      	strb	r3, [r7, #17]
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	74bb      	strb	r3, [r7, #18]
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 800e700:	4b48      	ldr	r3, [pc, #288]	@ (800e824 <SVCCTL_InitCustomSvc+0x20c>)
 800e702:	8818      	ldrh	r0, [r3, #0]
 800e704:	4b4d      	ldr	r3, [pc, #308]	@ (800e83c <SVCCTL_InitCustomSvc+0x224>)
 800e706:	881b      	ldrh	r3, [r3, #0]
 800e708:	1d3a      	adds	r2, r7, #4
 800e70a:	494d      	ldr	r1, [pc, #308]	@ (800e840 <SVCCTL_InitCustomSvc+0x228>)
 800e70c:	9105      	str	r1, [sp, #20]
 800e70e:	2101      	movs	r1, #1
 800e710:	9104      	str	r1, [sp, #16]
 800e712:	2110      	movs	r1, #16
 800e714:	9103      	str	r1, [sp, #12]
 800e716:	2101      	movs	r1, #1
 800e718:	9102      	str	r1, [sp, #8]
 800e71a:	2100      	movs	r1, #0
 800e71c:	9101      	str	r1, [sp, #4]
 800e71e:	2106      	movs	r1, #6
 800e720:	9100      	str	r1, [sp, #0]
 800e722:	2102      	movs	r1, #2
 800e724:	f7fc fd16 	bl	800b154 <aci_gatt_add_char>
 800e728:	4603      	mov	r3, r0
 800e72a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomTestHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e72c:	7dfb      	ldrb	r3, [r7, #23]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00f      	beq.n	800e752 <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : TEST, error code: 0x%x \n\r", ret);
 800e732:	483d      	ldr	r0, [pc, #244]	@ (800e828 <SVCCTL_InitCustomSvc+0x210>)
 800e734:	f7fd f8f5 	bl	800b922 <DbgTraceGetFileName>
 800e738:	4601      	mov	r1, r0
 800e73a:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 800e73e:	4a3b      	ldr	r2, [pc, #236]	@ (800e82c <SVCCTL_InitCustomSvc+0x214>)
 800e740:	483b      	ldr	r0, [pc, #236]	@ (800e830 <SVCCTL_InitCustomSvc+0x218>)
 800e742:	f002 fde7 	bl	8011314 <iprintf>
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	4619      	mov	r1, r3
 800e74a:	483e      	ldr	r0, [pc, #248]	@ (800e844 <SVCCTL_InitCustomSvc+0x22c>)
 800e74c:	f002 fde2 	bl	8011314 <iprintf>
 800e750:	e00c      	b.n	800e76c <SVCCTL_InitCustomSvc+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TEST \n\r");
 800e752:	4835      	ldr	r0, [pc, #212]	@ (800e828 <SVCCTL_InitCustomSvc+0x210>)
 800e754:	f7fd f8e5 	bl	800b922 <DbgTraceGetFileName>
 800e758:	4601      	mov	r1, r0
 800e75a:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800e75e:	4a33      	ldr	r2, [pc, #204]	@ (800e82c <SVCCTL_InitCustomSvc+0x214>)
 800e760:	4833      	ldr	r0, [pc, #204]	@ (800e830 <SVCCTL_InitCustomSvc+0x218>)
 800e762:	f002 fdd7 	bl	8011314 <iprintf>
 800e766:	4838      	ldr	r0, [pc, #224]	@ (800e848 <SVCCTL_InitCustomSvc+0x230>)
 800e768:	f002 fdd4 	bl	8011314 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Transmit_Data
   */
  COPY_TRANSMIT_DATA_UUID(uuid.Char_UUID_128);
 800e76c:	2319      	movs	r3, #25
 800e76e:	713b      	strb	r3, [r7, #4]
 800e770:	23ed      	movs	r3, #237	@ 0xed
 800e772:	717b      	strb	r3, [r7, #5]
 800e774:	2382      	movs	r3, #130	@ 0x82
 800e776:	71bb      	strb	r3, [r7, #6]
 800e778:	23ae      	movs	r3, #174	@ 0xae
 800e77a:	71fb      	strb	r3, [r7, #7]
 800e77c:	23ed      	movs	r3, #237	@ 0xed
 800e77e:	723b      	strb	r3, [r7, #8]
 800e780:	2321      	movs	r3, #33	@ 0x21
 800e782:	727b      	strb	r3, [r7, #9]
 800e784:	234c      	movs	r3, #76	@ 0x4c
 800e786:	72bb      	strb	r3, [r7, #10]
 800e788:	239d      	movs	r3, #157	@ 0x9d
 800e78a:	72fb      	strb	r3, [r7, #11]
 800e78c:	2341      	movs	r3, #65	@ 0x41
 800e78e:	733b      	strb	r3, [r7, #12]
 800e790:	2345      	movs	r3, #69	@ 0x45
 800e792:	737b      	strb	r3, [r7, #13]
 800e794:	2322      	movs	r3, #34	@ 0x22
 800e796:	73bb      	strb	r3, [r7, #14]
 800e798:	238e      	movs	r3, #142	@ 0x8e
 800e79a:	73fb      	strb	r3, [r7, #15]
 800e79c:	2342      	movs	r3, #66	@ 0x42
 800e79e:	743b      	strb	r3, [r7, #16]
 800e7a0:	23fe      	movs	r3, #254	@ 0xfe
 800e7a2:	747b      	strb	r3, [r7, #17]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	74bb      	strb	r3, [r7, #18]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 800e7ac:	4b1d      	ldr	r3, [pc, #116]	@ (800e824 <SVCCTL_InitCustomSvc+0x20c>)
 800e7ae:	8818      	ldrh	r0, [r3, #0]
 800e7b0:	4b26      	ldr	r3, [pc, #152]	@ (800e84c <SVCCTL_InitCustomSvc+0x234>)
 800e7b2:	881b      	ldrh	r3, [r3, #0]
 800e7b4:	1d3a      	adds	r2, r7, #4
 800e7b6:	4926      	ldr	r1, [pc, #152]	@ (800e850 <SVCCTL_InitCustomSvc+0x238>)
 800e7b8:	9105      	str	r1, [sp, #20]
 800e7ba:	2101      	movs	r1, #1
 800e7bc:	9104      	str	r1, [sp, #16]
 800e7be:	2110      	movs	r1, #16
 800e7c0:	9103      	str	r1, [sp, #12]
 800e7c2:	2101      	movs	r1, #1
 800e7c4:	9102      	str	r1, [sp, #8]
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	9101      	str	r1, [sp, #4]
 800e7ca:	2130      	movs	r1, #48	@ 0x30
 800e7cc:	9100      	str	r1, [sp, #0]
 800e7ce:	2102      	movs	r1, #2
 800e7d0:	f7fc fcc0 	bl	800b154 <aci_gatt_add_char>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomDataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e7d8:	7dfb      	ldrb	r3, [r7, #23]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00f      	beq.n	800e7fe <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DATA, error code: 0x%x \n\r", ret);
 800e7de:	4812      	ldr	r0, [pc, #72]	@ (800e828 <SVCCTL_InitCustomSvc+0x210>)
 800e7e0:	f7fd f89f 	bl	800b922 <DbgTraceGetFileName>
 800e7e4:	4601      	mov	r1, r0
 800e7e6:	f44f 73bf 	mov.w	r3, #382	@ 0x17e
 800e7ea:	4a10      	ldr	r2, [pc, #64]	@ (800e82c <SVCCTL_InitCustomSvc+0x214>)
 800e7ec:	4810      	ldr	r0, [pc, #64]	@ (800e830 <SVCCTL_InitCustomSvc+0x218>)
 800e7ee:	f002 fd91 	bl	8011314 <iprintf>
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4817      	ldr	r0, [pc, #92]	@ (800e854 <SVCCTL_InitCustomSvc+0x23c>)
 800e7f8:	f002 fd8c 	bl	8011314 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800e7fc:	e00d      	b.n	800e81a <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DATA \n\r");
 800e7fe:	480a      	ldr	r0, [pc, #40]	@ (800e828 <SVCCTL_InitCustomSvc+0x210>)
 800e800:	f7fd f88f 	bl	800b922 <DbgTraceGetFileName>
 800e804:	4601      	mov	r1, r0
 800e806:	f44f 73c1 	mov.w	r3, #386	@ 0x182
 800e80a:	4a08      	ldr	r2, [pc, #32]	@ (800e82c <SVCCTL_InitCustomSvc+0x214>)
 800e80c:	4808      	ldr	r0, [pc, #32]	@ (800e830 <SVCCTL_InitCustomSvc+0x218>)
 800e80e:	f002 fd81 	bl	8011314 <iprintf>
 800e812:	4811      	ldr	r0, [pc, #68]	@ (800e858 <SVCCTL_InitCustomSvc+0x240>)
 800e814:	f002 fd7e 	bl	8011314 <iprintf>
  return;
 800e818:	bf00      	nop
}
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	0800e4a9 	.word	0x0800e4a9
 800e824:	20001838 	.word	0x20001838
 800e828:	08013a80 	.word	0x08013a80
 800e82c:	080142fc 	.word	0x080142fc
 800e830:	08013aa0 	.word	0x08013aa0
 800e834:	08013ab4 	.word	0x08013ab4
 800e838:	08013af8 	.word	0x08013af8
 800e83c:	20000028 	.word	0x20000028
 800e840:	2000183a 	.word	0x2000183a
 800e844:	08013b2c 	.word	0x08013b2c
 800e848:	08013b70 	.word	0x08013b70
 800e84c:	2000002a 	.word	0x2000002a
 800e850:	2000183c 	.word	0x2000183c
 800e854:	08013ba4 	.word	0x08013ba4
 800e858:	08013be8 	.word	0x08013be8

0800e85c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af02      	add	r7, sp, #8
 800e862:	4603      	mov	r3, r0
 800e864:	6039      	str	r1, [r7, #0]
 800e866:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e868:	2392      	movs	r3, #146	@ 0x92
 800e86a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800e86c:	79fb      	ldrb	r3, [r7, #7]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <Custom_STM_App_Update_Char+0x1c>
 800e872:	2b01      	cmp	r3, #1
 800e874:	d030      	beq.n	800e8d8 <Custom_STM_App_Update_Char+0x7c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800e876:	e05f      	b.n	800e938 <Custom_STM_App_Update_Char+0xdc>
      ret = aci_gatt_update_char_value(CustomContext.CustomP2PsHdle,
 800e878:	4b32      	ldr	r3, [pc, #200]	@ (800e944 <Custom_STM_App_Update_Char+0xe8>)
 800e87a:	8818      	ldrh	r0, [r3, #0]
 800e87c:	4b31      	ldr	r3, [pc, #196]	@ (800e944 <Custom_STM_App_Update_Char+0xe8>)
 800e87e:	8859      	ldrh	r1, [r3, #2]
 800e880:	4b31      	ldr	r3, [pc, #196]	@ (800e948 <Custom_STM_App_Update_Char+0xec>)
 800e882:	881b      	ldrh	r3, [r3, #0]
 800e884:	b2da      	uxtb	r2, r3
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	4613      	mov	r3, r2
 800e88c:	2200      	movs	r2, #0
 800e88e:	f7fc fd69 	bl	800b364 <aci_gatt_update_char_value>
 800e892:	4603      	mov	r3, r0
 800e894:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00f      	beq.n	800e8bc <Custom_STM_App_Update_Char+0x60>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value TEST command, result : 0x%x \n\r", ret);
 800e89c:	482b      	ldr	r0, [pc, #172]	@ (800e94c <Custom_STM_App_Update_Char+0xf0>)
 800e89e:	f7fd f840 	bl	800b922 <DbgTraceGetFileName>
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	f240 13a9 	movw	r3, #425	@ 0x1a9
 800e8a8:	4a29      	ldr	r2, [pc, #164]	@ (800e950 <Custom_STM_App_Update_Char+0xf4>)
 800e8aa:	482a      	ldr	r0, [pc, #168]	@ (800e954 <Custom_STM_App_Update_Char+0xf8>)
 800e8ac:	f002 fd32 	bl	8011314 <iprintf>
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	4828      	ldr	r0, [pc, #160]	@ (800e958 <Custom_STM_App_Update_Char+0xfc>)
 800e8b6:	f002 fd2d 	bl	8011314 <iprintf>
      break;
 800e8ba:	e03d      	b.n	800e938 <Custom_STM_App_Update_Char+0xdc>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEST command\n\r");
 800e8bc:	4823      	ldr	r0, [pc, #140]	@ (800e94c <Custom_STM_App_Update_Char+0xf0>)
 800e8be:	f7fd f830 	bl	800b922 <DbgTraceGetFileName>
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800e8c8:	4a21      	ldr	r2, [pc, #132]	@ (800e950 <Custom_STM_App_Update_Char+0xf4>)
 800e8ca:	4822      	ldr	r0, [pc, #136]	@ (800e954 <Custom_STM_App_Update_Char+0xf8>)
 800e8cc:	f002 fd22 	bl	8011314 <iprintf>
 800e8d0:	4822      	ldr	r0, [pc, #136]	@ (800e95c <Custom_STM_App_Update_Char+0x100>)
 800e8d2:	f002 fd1f 	bl	8011314 <iprintf>
      break;
 800e8d6:	e02f      	b.n	800e938 <Custom_STM_App_Update_Char+0xdc>
      ret = aci_gatt_update_char_value(CustomContext.CustomP2PsHdle,
 800e8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e944 <Custom_STM_App_Update_Char+0xe8>)
 800e8da:	8818      	ldrh	r0, [r3, #0]
 800e8dc:	4b19      	ldr	r3, [pc, #100]	@ (800e944 <Custom_STM_App_Update_Char+0xe8>)
 800e8de:	8899      	ldrh	r1, [r3, #4]
 800e8e0:	4b1f      	ldr	r3, [pc, #124]	@ (800e960 <Custom_STM_App_Update_Char+0x104>)
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	9300      	str	r3, [sp, #0]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f7fc fd39 	bl	800b364 <aci_gatt_update_char_value>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00f      	beq.n	800e91c <Custom_STM_App_Update_Char+0xc0>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DATA command, result : 0x%x \n\r", ret);
 800e8fc:	4813      	ldr	r0, [pc, #76]	@ (800e94c <Custom_STM_App_Update_Char+0xf0>)
 800e8fe:	f7fd f810 	bl	800b922 <DbgTraceGetFileName>
 800e902:	4601      	mov	r1, r0
 800e904:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 800e908:	4a11      	ldr	r2, [pc, #68]	@ (800e950 <Custom_STM_App_Update_Char+0xf4>)
 800e90a:	4812      	ldr	r0, [pc, #72]	@ (800e954 <Custom_STM_App_Update_Char+0xf8>)
 800e90c:	f002 fd02 	bl	8011314 <iprintf>
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	4619      	mov	r1, r3
 800e914:	4813      	ldr	r0, [pc, #76]	@ (800e964 <Custom_STM_App_Update_Char+0x108>)
 800e916:	f002 fcfd 	bl	8011314 <iprintf>
      break;
 800e91a:	e00c      	b.n	800e936 <Custom_STM_App_Update_Char+0xda>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DATA command\n\r");
 800e91c:	480b      	ldr	r0, [pc, #44]	@ (800e94c <Custom_STM_App_Update_Char+0xf0>)
 800e91e:	f7fd f800 	bl	800b922 <DbgTraceGetFileName>
 800e922:	4601      	mov	r1, r0
 800e924:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800e928:	4a09      	ldr	r2, [pc, #36]	@ (800e950 <Custom_STM_App_Update_Char+0xf4>)
 800e92a:	480a      	ldr	r0, [pc, #40]	@ (800e954 <Custom_STM_App_Update_Char+0xf8>)
 800e92c:	f002 fcf2 	bl	8011314 <iprintf>
 800e930:	480d      	ldr	r0, [pc, #52]	@ (800e968 <Custom_STM_App_Update_Char+0x10c>)
 800e932:	f002 fcef 	bl	8011314 <iprintf>
      break;
 800e936:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800e938:	7bfb      	ldrb	r3, [r7, #15]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20001838 	.word	0x20001838
 800e948:	20000028 	.word	0x20000028
 800e94c:	08013a80 	.word	0x08013a80
 800e950:	08014314 	.word	0x08014314
 800e954:	08013aa0 	.word	0x08013aa0
 800e958:	08013c1c 	.word	0x08013c1c
 800e95c:	08013c64 	.word	0x08013c64
 800e960:	2000002a 	.word	0x2000002a
 800e964:	08013c9c 	.word	0x08013c9c
 800e968:	08013ce4 	.word	0x08013ce4

0800e96c <LL_PWR_EnableBootC2>:
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e970:	4b05      	ldr	r3, [pc, #20]	@ (800e988 <LL_PWR_EnableBootC2+0x1c>)
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	4a04      	ldr	r2, [pc, #16]	@ (800e988 <LL_PWR_EnableBootC2+0x1c>)
 800e976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e97a:	60d3      	str	r3, [r2, #12]
}
 800e97c:	bf00      	nop
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	58000400 	.word	0x58000400

0800e98c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e994:	4b06      	ldr	r3, [pc, #24]	@ (800e9b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e996:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800e99a:	4905      	ldr	r1, [pc, #20]	@ (800e9b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	58000800 	.word	0x58000800

0800e9b4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e9bc:	4b05      	ldr	r3, [pc, #20]	@ (800e9d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e9be:	6a1a      	ldr	r2, [r3, #32]
 800e9c0:	4904      	ldr	r1, [pc, #16]	@ (800e9d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	620b      	str	r3, [r1, #32]
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr
 800e9d4:	58000800 	.word	0x58000800

0800e9d8 <LL_AHB3_GRP1_EnableClock>:
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e9e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e9f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4013      	ands	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
}
 800e9fe:	bf00      	nop
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b085      	sub	sp, #20
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ea12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea16:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ea1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4313      	orrs	r3, r2
 800ea22:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ea26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea2a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4013      	ands	r3, r2
 800ea32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ea34:	68fb      	ldr	r3, [r7, #12]
}
 800ea36:	bf00      	nop
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	601a      	str	r2, [r3, #0]
}
 800ea56:	bf00      	nop
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800ea62:	b480      	push	{r7}
 800ea64:	b083      	sub	sp, #12
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f043 0201 	orr.w	r2, r3, #1
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	601a      	str	r2, [r3, #0]
}
 800ea76:	bf00      	nop
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ea82:	b480      	push	{r7}
 800ea84:	b083      	sub	sp, #12
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	041b      	lsls	r3, r3, #16
 800ea94:	43db      	mvns	r3, r3
 800ea96:	401a      	ands	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	605a      	str	r2, [r3, #4]
}
 800ea9c:	bf00      	nop
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	685a      	ldr	r2, [r3, #4]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	041b      	lsls	r3, r3, #16
 800eaba:	431a      	orrs	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	605a      	str	r2, [r3, #4]
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	685a      	ldr	r2, [r3, #4]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	43db      	mvns	r3, r3
 800eade:	401a      	ands	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	605a      	str	r2, [r3, #4]
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	609a      	str	r2, [r3, #8]
}
 800eb00:	bf00      	nop
 800eb02:	370c      	adds	r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	041a      	lsls	r2, r3, #16
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	609a      	str	r2, [r3, #8]
}
 800eb1e:	bf00      	nop
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800eb2a:	b480      	push	{r7}
 800eb2c:	b083      	sub	sp, #12
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	68da      	ldr	r2, [r3, #12]
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	4013      	ands	r3, r2
 800eb3c:	683a      	ldr	r2, [r7, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d101      	bne.n	800eb46 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800eb42:	2301      	movs	r3, #1
 800eb44:	e000      	b.n	800eb48 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	69da      	ldr	r2, [r3, #28]
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	4013      	ands	r3, r2
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d101      	bne.n	800eb70 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e000      	b.n	800eb72 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	370c      	adds	r7, #12
 800eb76:	46bd      	mov	sp, r7
 800eb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7c:	4770      	bx	lr
	...

0800eb80 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800eb84:	2102      	movs	r1, #2
 800eb86:	4818      	ldr	r0, [pc, #96]	@ (800ebe8 <HW_IPCC_Rx_Handler+0x68>)
 800eb88:	f7ff ffe4 	bl	800eb54 <LL_C2_IPCC_IsActiveFlag_CHx>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d008      	beq.n	800eba4 <HW_IPCC_Rx_Handler+0x24>
 800eb92:	4b15      	ldr	r3, [pc, #84]	@ (800ebe8 <HW_IPCC_Rx_Handler+0x68>)
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	f003 0302 	and.w	r3, r3, #2
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d102      	bne.n	800eba4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800eb9e:	f000 f925 	bl	800edec <HW_IPCC_SYS_EvtHandler>
 800eba2:	e01e      	b.n	800ebe2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800eba4:	2101      	movs	r1, #1
 800eba6:	4810      	ldr	r0, [pc, #64]	@ (800ebe8 <HW_IPCC_Rx_Handler+0x68>)
 800eba8:	f7ff ffd4 	bl	800eb54 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d008      	beq.n	800ebc4 <HW_IPCC_Rx_Handler+0x44>
 800ebb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe8 <HW_IPCC_Rx_Handler+0x68>)
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f003 0301 	and.w	r3, r3, #1
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d102      	bne.n	800ebc4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800ebbe:	f000 f899 	bl	800ecf4 <HW_IPCC_BLE_EvtHandler>
 800ebc2:	e00e      	b.n	800ebe2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800ebc4:	2108      	movs	r1, #8
 800ebc6:	4808      	ldr	r0, [pc, #32]	@ (800ebe8 <HW_IPCC_Rx_Handler+0x68>)
 800ebc8:	f7ff ffc4 	bl	800eb54 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d008      	beq.n	800ebe4 <HW_IPCC_Rx_Handler+0x64>
 800ebd2:	4b05      	ldr	r3, [pc, #20]	@ (800ebe8 <HW_IPCC_Rx_Handler+0x68>)
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	f003 0308 	and.w	r3, r3, #8
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d102      	bne.n	800ebe4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800ebde:	f000 f97d 	bl	800eedc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800ebe2:	bf00      	nop
 800ebe4:	bf00      	nop
}
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	58000c00 	.word	0x58000c00

0800ebec <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ebf0:	2102      	movs	r1, #2
 800ebf2:	4818      	ldr	r0, [pc, #96]	@ (800ec54 <HW_IPCC_Tx_Handler+0x68>)
 800ebf4:	f7ff ff99 	bl	800eb2a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d108      	bne.n	800ec10 <HW_IPCC_Tx_Handler+0x24>
 800ebfe:	4b15      	ldr	r3, [pc, #84]	@ (800ec54 <HW_IPCC_Tx_Handler+0x68>)
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d102      	bne.n	800ec10 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ec0a:	f000 f8d3 	bl	800edb4 <HW_IPCC_SYS_CmdEvtHandler>
 800ec0e:	e01e      	b.n	800ec4e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ec10:	2108      	movs	r1, #8
 800ec12:	4810      	ldr	r0, [pc, #64]	@ (800ec54 <HW_IPCC_Tx_Handler+0x68>)
 800ec14:	f7ff ff89 	bl	800eb2a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d108      	bne.n	800ec30 <HW_IPCC_Tx_Handler+0x44>
 800ec1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec54 <HW_IPCC_Tx_Handler+0x68>)
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d102      	bne.n	800ec30 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ec2a:	f000 f919 	bl	800ee60 <HW_IPCC_MM_FreeBufHandler>
 800ec2e:	e00e      	b.n	800ec4e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ec30:	2120      	movs	r1, #32
 800ec32:	4808      	ldr	r0, [pc, #32]	@ (800ec54 <HW_IPCC_Tx_Handler+0x68>)
 800ec34:	f7ff ff79 	bl	800eb2a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d108      	bne.n	800ec50 <HW_IPCC_Tx_Handler+0x64>
 800ec3e:	4b05      	ldr	r3, [pc, #20]	@ (800ec54 <HW_IPCC_Tx_Handler+0x68>)
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d102      	bne.n	800ec50 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800ec4a:	f000 f85f 	bl	800ed0c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ec4e:	bf00      	nop
 800ec50:	bf00      	nop
}
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	58000c00 	.word	0x58000c00

0800ec58 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ec5c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ec60:	f7ff fed3 	bl	800ea0a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ec64:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ec68:	f7ff fea4 	bl	800e9b4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ec6c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ec70:	f7ff fe8c 	bl	800e98c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ec74:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ec76:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ec78:	f7ff fe78 	bl	800e96c <LL_PWR_EnableBootC2>

  return;
 800ec7c:	bf00      	nop
}
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800ec84:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800ec88:	f7ff fea6 	bl	800e9d8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800ec8c:	4806      	ldr	r0, [pc, #24]	@ (800eca8 <HW_IPCC_Init+0x28>)
 800ec8e:	f7ff fee8 	bl	800ea62 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ec92:	4805      	ldr	r0, [pc, #20]	@ (800eca8 <HW_IPCC_Init+0x28>)
 800ec94:	f7ff fed5 	bl	800ea42 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800ec98:	202c      	movs	r0, #44	@ 0x2c
 800ec9a:	f7f5 fe70 	bl	800497e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800ec9e:	202d      	movs	r0, #45	@ 0x2d
 800eca0:	f7f5 fe6d 	bl	800497e <HAL_NVIC_EnableIRQ>

  return;
 800eca4:	bf00      	nop
}
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	58000c00 	.word	0x58000c00

0800ecac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecb2:	f3ef 8310 	mrs	r3, PRIMASK
 800ecb6:	607b      	str	r3, [r7, #4]
  return(result);
 800ecb8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800ecba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecbc:	b672      	cpsid	i
}
 800ecbe:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ecc0:	2101      	movs	r1, #1
 800ecc2:	4806      	ldr	r0, [pc, #24]	@ (800ecdc <HW_IPCC_BLE_Init+0x30>)
 800ecc4:	f7ff ff02 	bl	800eacc <LL_C1_IPCC_EnableReceiveChannel>
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	f383 8810 	msr	PRIMASK, r3
}
 800ecd2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800ecd4:	bf00      	nop
}
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	58000c00 	.word	0x58000c00

0800ece0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800ece4:	2101      	movs	r1, #1
 800ece6:	4802      	ldr	r0, [pc, #8]	@ (800ecf0 <HW_IPCC_BLE_SendCmd+0x10>)
 800ece8:	f7ff ff10 	bl	800eb0c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ecec:	bf00      	nop
}
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	58000c00 	.word	0x58000c00

0800ecf4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800ecf8:	f7fe f968 	bl	800cfcc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ecfc:	2101      	movs	r1, #1
 800ecfe:	4802      	ldr	r0, [pc, #8]	@ (800ed08 <HW_IPCC_BLE_EvtHandler+0x14>)
 800ed00:	f7ff fef6 	bl	800eaf0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ed04:	bf00      	nop
}
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	58000c00 	.word	0x58000c00

0800ed0c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed12:	f3ef 8310 	mrs	r3, PRIMASK
 800ed16:	607b      	str	r3, [r7, #4]
  return(result);
 800ed18:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800ed1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed1c:	b672      	cpsid	i
}
 800ed1e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800ed20:	2120      	movs	r1, #32
 800ed22:	4807      	ldr	r0, [pc, #28]	@ (800ed40 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800ed24:	f7ff fec0 	bl	800eaa8 <LL_C1_IPCC_DisableTransmitChannel>
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	f383 8810 	msr	PRIMASK, r3
}
 800ed32:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800ed34:	f7fe f97a 	bl	800d02c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800ed38:	bf00      	nop
}
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	58000c00 	.word	0x58000c00

0800ed44 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed4e:	607b      	str	r3, [r7, #4]
  return(result);
 800ed50:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800ed52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed54:	b672      	cpsid	i
}
 800ed56:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800ed58:	2102      	movs	r1, #2
 800ed5a:	4806      	ldr	r0, [pc, #24]	@ (800ed74 <HW_IPCC_SYS_Init+0x30>)
 800ed5c:	f7ff feb6 	bl	800eacc <LL_C1_IPCC_EnableReceiveChannel>
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	f383 8810 	msr	PRIMASK, r3
}
 800ed6a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800ed6c:	bf00      	nop
}
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	58000c00 	.word	0x58000c00

0800ed78 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ed7e:	2102      	movs	r1, #2
 800ed80:	480b      	ldr	r0, [pc, #44]	@ (800edb0 <HW_IPCC_SYS_SendCmd+0x38>)
 800ed82:	f7ff fec3 	bl	800eb0c <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed86:	f3ef 8310 	mrs	r3, PRIMASK
 800ed8a:	607b      	str	r3, [r7, #4]
  return(result);
 800ed8c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800ed8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed90:	b672      	cpsid	i
}
 800ed92:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800ed94:	2102      	movs	r1, #2
 800ed96:	4806      	ldr	r0, [pc, #24]	@ (800edb0 <HW_IPCC_SYS_SendCmd+0x38>)
 800ed98:	f7ff fe73 	bl	800ea82 <LL_C1_IPCC_EnableTransmitChannel>
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	f383 8810 	msr	PRIMASK, r3
}
 800eda6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800eda8:	bf00      	nop
}
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	58000c00 	.word	0x58000c00

0800edb4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edba:	f3ef 8310 	mrs	r3, PRIMASK
 800edbe:	607b      	str	r3, [r7, #4]
  return(result);
 800edc0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800edc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800edc4:	b672      	cpsid	i
}
 800edc6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800edc8:	2102      	movs	r1, #2
 800edca:	4807      	ldr	r0, [pc, #28]	@ (800ede8 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800edcc:	f7ff fe6c 	bl	800eaa8 <LL_C1_IPCC_DisableTransmitChannel>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	f383 8810 	msr	PRIMASK, r3
}
 800edda:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800eddc:	f7fe f976 	bl	800d0cc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800ede0:	bf00      	nop
}
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	58000c00 	.word	0x58000c00

0800edec <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800edf0:	f7fe f982 	bl	800d0f8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800edf4:	2102      	movs	r1, #2
 800edf6:	4802      	ldr	r0, [pc, #8]	@ (800ee00 <HW_IPCC_SYS_EvtHandler+0x14>)
 800edf8:	f7ff fe7a 	bl	800eaf0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800edfc:	bf00      	nop
}
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	58000c00 	.word	0x58000c00

0800ee04 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800ee0c:	2108      	movs	r1, #8
 800ee0e:	4812      	ldr	r0, [pc, #72]	@ (800ee58 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800ee10:	f7ff fe8b 	bl	800eb2a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ee14:	4603      	mov	r3, r0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d013      	beq.n	800ee42 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800ee1a:	4a10      	ldr	r2, [pc, #64]	@ (800ee5c <HW_IPCC_MM_SendFreeBuf+0x58>)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee20:	f3ef 8310 	mrs	r3, PRIMASK
 800ee24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee26:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800ee28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee2a:	b672      	cpsid	i
}
 800ee2c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ee2e:	2108      	movs	r1, #8
 800ee30:	4809      	ldr	r0, [pc, #36]	@ (800ee58 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800ee32:	f7ff fe26 	bl	800ea82 <LL_C1_IPCC_EnableTransmitChannel>
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	f383 8810 	msr	PRIMASK, r3
}
 800ee40:	e005      	b.n	800ee4e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ee46:	2108      	movs	r1, #8
 800ee48:	4803      	ldr	r0, [pc, #12]	@ (800ee58 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800ee4a:	f7ff fe5f 	bl	800eb0c <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800ee4e:	bf00      	nop
}
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	58000c00 	.word	0x58000c00
 800ee5c:	20001840 	.word	0x20001840

0800ee60 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee66:	f3ef 8310 	mrs	r3, PRIMASK
 800ee6a:	607b      	str	r3, [r7, #4]
  return(result);
 800ee6c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800ee6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee70:	b672      	cpsid	i
}
 800ee72:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ee74:	2108      	movs	r1, #8
 800ee76:	480a      	ldr	r0, [pc, #40]	@ (800eea0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800ee78:	f7ff fe16 	bl	800eaa8 <LL_C1_IPCC_DisableTransmitChannel>
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f383 8810 	msr	PRIMASK, r3
}
 800ee86:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800ee88:	4b06      	ldr	r3, [pc, #24]	@ (800eea4 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ee8e:	2108      	movs	r1, #8
 800ee90:	4803      	ldr	r0, [pc, #12]	@ (800eea0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800ee92:	f7ff fe3b 	bl	800eb0c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ee96:	bf00      	nop
}
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	58000c00 	.word	0x58000c00
 800eea4:	20001840 	.word	0x20001840

0800eea8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeae:	f3ef 8310 	mrs	r3, PRIMASK
 800eeb2:	607b      	str	r3, [r7, #4]
  return(result);
 800eeb4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800eeb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800eeb8:	b672      	cpsid	i
}
 800eeba:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800eebc:	2108      	movs	r1, #8
 800eebe:	4806      	ldr	r0, [pc, #24]	@ (800eed8 <HW_IPCC_TRACES_Init+0x30>)
 800eec0:	f7ff fe04 	bl	800eacc <LL_C1_IPCC_EnableReceiveChannel>
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f383 8810 	msr	PRIMASK, r3
}
 800eece:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800eed0:	bf00      	nop
}
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	58000c00 	.word	0x58000c00

0800eedc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800eee0:	f7fe f9b2 	bl	800d248 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800eee4:	2108      	movs	r1, #8
 800eee6:	4802      	ldr	r0, [pc, #8]	@ (800eef0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800eee8:	f7ff fe02 	bl	800eaf0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800eeec:	bf00      	nop
}
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	58000c00 	.word	0x58000c00

0800eef4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800eef4:	b480      	push	{r7}
 800eef6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800eef8:	4b05      	ldr	r3, [pc, #20]	@ (800ef10 <UTIL_LPM_Init+0x1c>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800eefe:	4b05      	ldr	r3, [pc, #20]	@ (800ef14 <UTIL_LPM_Init+0x20>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ef04:	bf00      	nop
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	20001844 	.word	0x20001844
 800ef14:	20001848 	.word	0x20001848

0800ef18 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	460b      	mov	r3, r1
 800ef22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef24:	f3ef 8310 	mrs	r3, PRIMASK
 800ef28:	613b      	str	r3, [r7, #16]
  return(result);
 800ef2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ef2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef2e:	b672      	cpsid	i
}
 800ef30:	bf00      	nop
  
  switch(state)
 800ef32:	78fb      	ldrb	r3, [r7, #3]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d008      	beq.n	800ef4a <UTIL_LPM_SetOffMode+0x32>
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d10e      	bne.n	800ef5a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ef3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ef74 <UTIL_LPM_SetOffMode+0x5c>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4313      	orrs	r3, r2
 800ef44:	4a0b      	ldr	r2, [pc, #44]	@ (800ef74 <UTIL_LPM_SetOffMode+0x5c>)
 800ef46:	6013      	str	r3, [r2, #0]
      break;
 800ef48:	e008      	b.n	800ef5c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	43da      	mvns	r2, r3
 800ef4e:	4b09      	ldr	r3, [pc, #36]	@ (800ef74 <UTIL_LPM_SetOffMode+0x5c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	4013      	ands	r3, r2
 800ef54:	4a07      	ldr	r2, [pc, #28]	@ (800ef74 <UTIL_LPM_SetOffMode+0x5c>)
 800ef56:	6013      	str	r3, [r2, #0]
      break;
 800ef58:	e000      	b.n	800ef5c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ef5a:	bf00      	nop
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f383 8810 	msr	PRIMASK, r3
}
 800ef66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ef68:	bf00      	nop
 800ef6a:	371c      	adds	r7, #28
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr
 800ef74:	20001848 	.word	0x20001848

0800ef78 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b090      	sub	sp, #64	@ 0x40
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ef80:	4b73      	ldr	r3, [pc, #460]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800ef86:	4b72      	ldr	r3, [pc, #456]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	4a70      	ldr	r2, [pc, #448]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800ef90:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ef92:	4b70      	ldr	r3, [pc, #448]	@ (800f154 <UTIL_SEQ_Run+0x1dc>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ef98:	4b6f      	ldr	r3, [pc, #444]	@ (800f158 <UTIL_SEQ_Run+0x1e0>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ef9e:	4b6f      	ldr	r3, [pc, #444]	@ (800f15c <UTIL_SEQ_Run+0x1e4>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800efa4:	4b6e      	ldr	r3, [pc, #440]	@ (800f160 <UTIL_SEQ_Run+0x1e8>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800efaa:	e08d      	b.n	800f0c8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800efac:	2300      	movs	r3, #0
 800efae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800efb0:	e002      	b.n	800efb8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800efb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efb4:	3301      	adds	r3, #1
 800efb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800efb8:	4a6a      	ldr	r2, [pc, #424]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800efba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efbc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800efc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efc2:	401a      	ands	r2, r3
 800efc4:	4b62      	ldr	r3, [pc, #392]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	4013      	ands	r3, r2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d0f1      	beq.n	800efb2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800efce:	4a65      	ldr	r2, [pc, #404]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800efd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efd2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800efd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efd8:	401a      	ands	r2, r3
 800efda:	4b5d      	ldr	r3, [pc, #372]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	4013      	ands	r3, r2
 800efe0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800efe2:	4a60      	ldr	r2, [pc, #384]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800efe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	4413      	add	r3, r2
 800efea:	685a      	ldr	r2, [r3, #4]
 800efec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efee:	4013      	ands	r3, r2
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d106      	bne.n	800f002 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800eff4:	4a5b      	ldr	r2, [pc, #364]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800eff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff8:	00db      	lsls	r3, r3, #3
 800effa:	4413      	add	r3, r2
 800effc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f000:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f002:	4a58      	ldr	r2, [pc, #352]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800f004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f006:	00db      	lsls	r3, r3, #3
 800f008:	4413      	add	r3, r2
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00e:	4013      	ands	r3, r2
 800f010:	4618      	mov	r0, r3
 800f012:	f000 f9c1 	bl	800f398 <SEQ_BitPosition>
 800f016:	4603      	mov	r3, r0
 800f018:	461a      	mov	r2, r3
 800f01a:	4b53      	ldr	r3, [pc, #332]	@ (800f168 <UTIL_SEQ_Run+0x1f0>)
 800f01c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f01e:	4a51      	ldr	r2, [pc, #324]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800f020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f022:	00db      	lsls	r3, r3, #3
 800f024:	4413      	add	r3, r2
 800f026:	685a      	ldr	r2, [r3, #4]
 800f028:	4b4f      	ldr	r3, [pc, #316]	@ (800f168 <UTIL_SEQ_Run+0x1f0>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2101      	movs	r1, #1
 800f02e:	fa01 f303 	lsl.w	r3, r1, r3
 800f032:	43db      	mvns	r3, r3
 800f034:	401a      	ands	r2, r3
 800f036:	494b      	ldr	r1, [pc, #300]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800f038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f03a:	00db      	lsls	r3, r3, #3
 800f03c:	440b      	add	r3, r1
 800f03e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f040:	f3ef 8310 	mrs	r3, PRIMASK
 800f044:	61bb      	str	r3, [r7, #24]
  return(result);
 800f046:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800f04a:	b672      	cpsid	i
}
 800f04c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f04e:	4b46      	ldr	r3, [pc, #280]	@ (800f168 <UTIL_SEQ_Run+0x1f0>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2201      	movs	r2, #1
 800f054:	fa02 f303 	lsl.w	r3, r2, r3
 800f058:	43da      	mvns	r2, r3
 800f05a:	4b3e      	ldr	r3, [pc, #248]	@ (800f154 <UTIL_SEQ_Run+0x1dc>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	4013      	ands	r3, r2
 800f060:	4a3c      	ldr	r2, [pc, #240]	@ (800f154 <UTIL_SEQ_Run+0x1dc>)
 800f062:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f064:	2301      	movs	r3, #1
 800f066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f068:	e013      	b.n	800f092 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f06c:	3b01      	subs	r3, #1
 800f06e:	4a3d      	ldr	r2, [pc, #244]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800f070:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800f074:	4b3c      	ldr	r3, [pc, #240]	@ (800f168 <UTIL_SEQ_Run+0x1f0>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2201      	movs	r2, #1
 800f07a:	fa02 f303 	lsl.w	r3, r2, r3
 800f07e:	43da      	mvns	r2, r3
 800f080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f082:	3b01      	subs	r3, #1
 800f084:	400a      	ands	r2, r1
 800f086:	4937      	ldr	r1, [pc, #220]	@ (800f164 <UTIL_SEQ_Run+0x1ec>)
 800f088:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800f08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f08e:	3b01      	subs	r3, #1
 800f090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1e8      	bne.n	800f06a <UTIL_SEQ_Run+0xf2>
 800f098:	6a3b      	ldr	r3, [r7, #32]
 800f09a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	f383 8810 	msr	PRIMASK, r3
}
 800f0a2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800f0a4:	4b30      	ldr	r3, [pc, #192]	@ (800f168 <UTIL_SEQ_Run+0x1f0>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4a30      	ldr	r2, [pc, #192]	@ (800f16c <UTIL_SEQ_Run+0x1f4>)
 800f0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ae:	4798      	blx	r3

    local_taskset = TaskSet;
 800f0b0:	4b28      	ldr	r3, [pc, #160]	@ (800f154 <UTIL_SEQ_Run+0x1dc>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800f0b6:	4b28      	ldr	r3, [pc, #160]	@ (800f158 <UTIL_SEQ_Run+0x1e0>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800f0bc:	4b27      	ldr	r3, [pc, #156]	@ (800f15c <UTIL_SEQ_Run+0x1e4>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800f0c2:	4b27      	ldr	r3, [pc, #156]	@ (800f160 <UTIL_SEQ_Run+0x1e8>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800f0c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0cc:	401a      	ands	r2, r3
 800f0ce:	4b20      	ldr	r3, [pc, #128]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d005      	beq.n	800f0e4 <UTIL_SEQ_Run+0x16c>
 800f0d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0dc:	4013      	ands	r3, r2
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f43f af64 	beq.w	800efac <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f0e4:	4b20      	ldr	r3, [pc, #128]	@ (800f168 <UTIL_SEQ_Run+0x1f0>)
 800f0e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0ea:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800f0ec:	f000 f946 	bl	800f37c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800f0f4:	613b      	str	r3, [r7, #16]
  return(result);
 800f0f6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800f0f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0fa:	b672      	cpsid	i
}
 800f0fc:	bf00      	nop
  local_taskset = TaskSet;
 800f0fe:	4b15      	ldr	r3, [pc, #84]	@ (800f154 <UTIL_SEQ_Run+0x1dc>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800f104:	4b14      	ldr	r3, [pc, #80]	@ (800f158 <UTIL_SEQ_Run+0x1e0>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800f10a:	4b14      	ldr	r3, [pc, #80]	@ (800f15c <UTIL_SEQ_Run+0x1e4>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800f110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	401a      	ands	r2, r3
 800f116:	4b0e      	ldr	r3, [pc, #56]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4013      	ands	r3, r2
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d107      	bne.n	800f130 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800f120:	4b0f      	ldr	r3, [pc, #60]	@ (800f160 <UTIL_SEQ_Run+0x1e8>)
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f126:	4013      	ands	r3, r2
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d101      	bne.n	800f130 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800f12c:	f7f2 f9b3 	bl	8001496 <UTIL_SEQ_Idle>
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f383 8810 	msr	PRIMASK, r3
}
 800f13a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800f13c:	f000 f925 	bl	800f38a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800f140:	4a03      	ldr	r2, [pc, #12]	@ (800f150 <UTIL_SEQ_Run+0x1d8>)
 800f142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f144:	6013      	str	r3, [r2, #0]

  return;
 800f146:	bf00      	nop
}
 800f148:	3740      	adds	r7, #64	@ 0x40
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	20000030 	.word	0x20000030
 800f154:	2000184c 	.word	0x2000184c
 800f158:	20001850 	.word	0x20001850
 800f15c:	2000002c 	.word	0x2000002c
 800f160:	20001854 	.word	0x20001854
 800f164:	200018dc 	.word	0x200018dc
 800f168:	20001858 	.word	0x20001858
 800f16c:	2000185c 	.word	0x2000185c

0800f170 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f17c:	f3ef 8310 	mrs	r3, PRIMASK
 800f180:	617b      	str	r3, [r7, #20]
  return(result);
 800f182:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800f184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f186:	b672      	cpsid	i
}
 800f188:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f000 f904 	bl	800f398 <SEQ_BitPosition>
 800f190:	4603      	mov	r3, r0
 800f192:	4619      	mov	r1, r3
 800f194:	4a06      	ldr	r2, [pc, #24]	@ (800f1b0 <UTIL_SEQ_RegTask+0x40>)
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1a0:	69bb      	ldr	r3, [r7, #24]
 800f1a2:	f383 8810 	msr	PRIMASK, r3
}
 800f1a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800f1a8:	bf00      	nop
}
 800f1aa:	3720      	adds	r7, #32
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	2000185c 	.word	0x2000185c

0800f1b4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b087      	sub	sp, #28
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1be:	f3ef 8310 	mrs	r3, PRIMASK
 800f1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f1c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f1c8:	b672      	cpsid	i
}
 800f1ca:	bf00      	nop

  TaskSet |= TaskId_bm;
 800f1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800f204 <UTIL_SEQ_SetTask+0x50>)
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	4a0b      	ldr	r2, [pc, #44]	@ (800f204 <UTIL_SEQ_SetTask+0x50>)
 800f1d6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f1d8:	4a0b      	ldr	r2, [pc, #44]	@ (800f208 <UTIL_SEQ_SetTask+0x54>)
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	431a      	orrs	r2, r3
 800f1e4:	4908      	ldr	r1, [pc, #32]	@ (800f208 <UTIL_SEQ_SetTask+0x54>)
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	f383 8810 	msr	PRIMASK, r3
}
 800f1f6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f1f8:	bf00      	nop
}
 800f1fa:	371c      	adds	r7, #28
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr
 800f204:	2000184c 	.word	0x2000184c
 800f208:	200018dc 	.word	0x200018dc

0800f20c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f20c:	b480      	push	{r7}
 800f20e:	b087      	sub	sp, #28
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f214:	f3ef 8310 	mrs	r3, PRIMASK
 800f218:	60fb      	str	r3, [r7, #12]
  return(result);
 800f21a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f21c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f21e:	b672      	cpsid	i
}
 800f220:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	43da      	mvns	r2, r3
 800f226:	4b08      	ldr	r3, [pc, #32]	@ (800f248 <UTIL_SEQ_PauseTask+0x3c>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4013      	ands	r3, r2
 800f22c:	4a06      	ldr	r2, [pc, #24]	@ (800f248 <UTIL_SEQ_PauseTask+0x3c>)
 800f22e:	6013      	str	r3, [r2, #0]
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	f383 8810 	msr	PRIMASK, r3
}
 800f23a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f23c:	bf00      	nop
}
 800f23e:	371c      	adds	r7, #28
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr
 800f248:	2000002c 	.word	0x2000002c

0800f24c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800f24c:	b480      	push	{r7}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f254:	f3ef 8310 	mrs	r3, PRIMASK
 800f258:	60fb      	str	r3, [r7, #12]
  return(result);
 800f25a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f25c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f25e:	b672      	cpsid	i
}
 800f260:	bf00      	nop

  TaskMask |= TaskId_bm;
 800f262:	4b09      	ldr	r3, [pc, #36]	@ (800f288 <UTIL_SEQ_ResumeTask+0x3c>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4313      	orrs	r3, r2
 800f26a:	4a07      	ldr	r2, [pc, #28]	@ (800f288 <UTIL_SEQ_ResumeTask+0x3c>)
 800f26c:	6013      	str	r3, [r2, #0]
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	f383 8810 	msr	PRIMASK, r3
}
 800f278:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f27a:	bf00      	nop
}
 800f27c:	371c      	adds	r7, #28
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	2000002c 	.word	0x2000002c

0800f28c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f294:	f3ef 8310 	mrs	r3, PRIMASK
 800f298:	60fb      	str	r3, [r7, #12]
  return(result);
 800f29a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f29c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f29e:	b672      	cpsid	i
}
 800f2a0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800f2a2:	4b09      	ldr	r3, [pc, #36]	@ (800f2c8 <UTIL_SEQ_SetEvt+0x3c>)
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	4a07      	ldr	r2, [pc, #28]	@ (800f2c8 <UTIL_SEQ_SetEvt+0x3c>)
 800f2ac:	6013      	str	r3, [r2, #0]
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	f383 8810 	msr	PRIMASK, r3
}
 800f2b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800f2ba:	bf00      	nop
}
 800f2bc:	371c      	adds	r7, #28
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	20001850 	.word	0x20001850

0800f2cc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800f2d4:	4b1f      	ldr	r3, [pc, #124]	@ (800f354 <UTIL_SEQ_WaitEvt+0x88>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f2da:	4b1e      	ldr	r3, [pc, #120]	@ (800f354 <UTIL_SEQ_WaitEvt+0x88>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f2e2:	d102      	bne.n	800f2ea <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	61fb      	str	r3, [r7, #28]
 800f2e8:	e005      	b.n	800f2f6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800f2ea:	4b1a      	ldr	r3, [pc, #104]	@ (800f354 <UTIL_SEQ_WaitEvt+0x88>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800f2f6:	4b18      	ldr	r3, [pc, #96]	@ (800f358 <UTIL_SEQ_WaitEvt+0x8c>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800f2fc:	4a16      	ldr	r2, [pc, #88]	@ (800f358 <UTIL_SEQ_WaitEvt+0x8c>)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800f302:	e003      	b.n	800f30c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	69f8      	ldr	r0, [r7, #28]
 800f308:	f000 f82a 	bl	800f360 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800f30c:	4b13      	ldr	r3, [pc, #76]	@ (800f35c <UTIL_SEQ_WaitEvt+0x90>)
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4013      	ands	r3, r2
 800f314:	2b00      	cmp	r3, #0
 800f316:	d0f5      	beq.n	800f304 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800f318:	4a0e      	ldr	r2, [pc, #56]	@ (800f354 <UTIL_SEQ_WaitEvt+0x88>)
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f31e:	f3ef 8310 	mrs	r3, PRIMASK
 800f322:	60bb      	str	r3, [r7, #8]
  return(result);
 800f324:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800f326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f328:	b672      	cpsid	i
}
 800f32a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	43da      	mvns	r2, r3
 800f330:	4b0a      	ldr	r3, [pc, #40]	@ (800f35c <UTIL_SEQ_WaitEvt+0x90>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4013      	ands	r3, r2
 800f336:	4a09      	ldr	r2, [pc, #36]	@ (800f35c <UTIL_SEQ_WaitEvt+0x90>)
 800f338:	6013      	str	r3, [r2, #0]
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f383 8810 	msr	PRIMASK, r3
}
 800f344:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800f346:	4a04      	ldr	r2, [pc, #16]	@ (800f358 <UTIL_SEQ_WaitEvt+0x8c>)
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	6013      	str	r3, [r2, #0]
  return;
 800f34c:	bf00      	nop
}
 800f34e:	3720      	adds	r7, #32
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20001858 	.word	0x20001858
 800f358:	20001854 	.word	0x20001854
 800f35c:	20001850 	.word	0x20001850

0800f360 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	43db      	mvns	r3, r3
 800f36e:	4618      	mov	r0, r3
 800f370:	f7ff fe02 	bl	800ef78 <UTIL_SEQ_Run>
  return;
 800f374:	bf00      	nop
}
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800f37c:	b480      	push	{r7}
 800f37e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f380:	bf00      	nop
}
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800f38a:	b480      	push	{r7}
 800f38c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800f38e:	bf00      	nop
}
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d101      	bne.n	800f3ae <SEQ_BitPosition+0x16>
    return 32U;
 800f3aa:	2320      	movs	r3, #32
 800f3ac:	e003      	b.n	800f3b6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	fab3 f383 	clz	r3, r3
 800f3b4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800f3b6:	f1c3 031f 	rsb	r3, r3, #31
 800f3ba:	b2db      	uxtb	r3, r3
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3714      	adds	r7, #20
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <D16_MULTI_CH_INPUT>:
 800f3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3cc:	e9d2 5602 	ldrd	r5, r6, [r2, #8]
 800f3d0:	b085      	sub	sp, #20
 800f3d2:	8c53      	ldrh	r3, [r2, #34]	@ 0x22
 800f3d4:	9101      	str	r1, [sp, #4]
 800f3d6:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800f3da:	6991      	ldr	r1, [r2, #24]
 800f3dc:	9603      	str	r6, [sp, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d060      	beq.n	800f4a4 <D16_MULTI_CH_INPUT+0xdc>
 800f3e2:	69d6      	ldr	r6, [r2, #28]
 800f3e4:	6857      	ldr	r7, [r2, #4]
 800f3e6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f3e8:	9700      	str	r7, [sp, #0]
 800f3ea:	f04f 0c00 	mov.w	ip, #0
 800f3ee:	9302      	str	r3, [sp, #8]
 800f3f0:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
 800f3f4:	46e1      	mov	r9, ip
 800f3f6:	4637      	mov	r7, r6
 800f3f8:	e048      	b.n	800f48c <D16_MULTI_CH_INPUT+0xc4>
 800f3fa:	f810 b00a 	ldrb.w	fp, [r0, sl]
 800f3fe:	7803      	ldrb	r3, [r0, #0]
 800f400:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800f404:	eb03 230b 	add.w	r3, r3, fp, lsl #8
 800f408:	9e00      	ldr	r6, [sp, #0]
 800f40a:	fa5f fa83 	uxtb.w	sl, r3
 800f40e:	0a1b      	lsrs	r3, r3, #8
 800f410:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800f414:	eb0a 2a91 	add.w	sl, sl, r1, lsr #10
 800f418:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800f41c:	4b26      	ldr	r3, [pc, #152]	@ (800f4b8 <D16_MULTI_CH_INPUT+0xf0>)
 800f41e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800f422:	ea03 4a0a 	and.w	sl, r3, sl, lsl #16
 800f426:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800f42a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f42e:	4b23      	ldr	r3, [pc, #140]	@ (800f4bc <D16_MULTI_CH_INPUT+0xf4>)
 800f430:	fb2a 5303 	smlad	r3, sl, r3, r5
 800f434:	4d22      	ldr	r5, [pc, #136]	@ (800f4c0 <D16_MULTI_CH_INPUT+0xf8>)
 800f436:	fb2a f505 	smuad	r5, sl, r5
 800f43a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800f43e:	eb03 0a04 	add.w	sl, r3, r4
 800f442:	ebaa 0a08 	sub.w	sl, sl, r8
 800f446:	b137      	cbz	r7, 800f456 <D16_MULTI_CH_INPUT+0x8e>
 800f448:	4676      	mov	r6, lr
 800f44a:	464c      	mov	r4, r9
 800f44c:	fbca 6407 	smlal	r6, r4, sl, r7
 800f450:	0064      	lsls	r4, r4, #1
 800f452:	4698      	mov	r8, r3
 800f454:	4623      	mov	r3, r4
 800f456:	9e02      	ldr	r6, [sp, #8]
 800f458:	041b      	lsls	r3, r3, #16
 800f45a:	46f3      	mov	fp, lr
 800f45c:	46ca      	mov	sl, r9
 800f45e:	fbc3 ba06 	smlal	fp, sl, r3, r6
 800f462:	f8b2 b024 	ldrh.w	fp, [r2, #36]	@ 0x24
 800f466:	9e01      	ldr	r6, [sp, #4]
 800f468:	ea4f 03aa 	mov.w	r3, sl, asr #2
 800f46c:	fa1f fa8c 	uxth.w	sl, ip
 800f470:	fb0b fa0a 	mul.w	sl, fp, sl
 800f474:	f303 030f 	ssat	r3, #16, r3
 800f478:	f826 301a 	strh.w	r3, [r6, sl, lsl #1]
 800f47c:	f10c 0c01 	add.w	ip, ip, #1
 800f480:	f8b2 a022 	ldrh.w	sl, [r2, #34]	@ 0x22
 800f484:	fa1f f38c 	uxth.w	r3, ip
 800f488:	459a      	cmp	sl, r3
 800f48a:	d90b      	bls.n	800f4a4 <D16_MULTI_CH_INPUT+0xdc>
 800f48c:	f8b2 a026 	ldrh.w	sl, [r2, #38]	@ 0x26
 800f490:	f1ba 0f02 	cmp.w	sl, #2
 800f494:	d1b1      	bne.n	800f3fa <D16_MULTI_CH_INPUT+0x32>
 800f496:	f890 a002 	ldrb.w	sl, [r0, #2]
 800f49a:	f810 3b04 	ldrb.w	r3, [r0], #4
 800f49e:	eb03 230a 	add.w	r3, r3, sl, lsl #8
 800f4a2:	e7b1      	b.n	800f408 <D16_MULTI_CH_INPUT+0x40>
 800f4a4:	9b03      	ldr	r3, [sp, #12]
 800f4a6:	6095      	str	r5, [r2, #8]
 800f4a8:	e9c2 4105 	strd	r4, r1, [r2, #20]
 800f4ac:	60d3      	str	r3, [r2, #12]
 800f4ae:	f8c2 8010 	str.w	r8, [r2, #16]
 800f4b2:	b005      	add	sp, #20
 800f4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b8:	03ff0000 	.word	0x03ff0000
 800f4bc:	00030001 	.word	0x00030001
 800f4c0:	00010003 	.word	0x00010003

0800f4c4 <D24_MULTI_CH_INPUT>:
 800f4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c8:	e9d2 3804 	ldrd	r3, r8, [r2, #16]
 800f4cc:	b087      	sub	sp, #28
 800f4ce:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800f4d2:	8c51      	ldrh	r1, [r2, #34]	@ 0x22
 800f4d4:	6993      	ldr	r3, [r2, #24]
 800f4d6:	e9d2 c402 	ldrd	ip, r4, [r2, #8]
 800f4da:	2900      	cmp	r1, #0
 800f4dc:	d077      	beq.n	800f5ce <D24_MULTI_CH_INPUT+0x10a>
 800f4de:	69d1      	ldr	r1, [r2, #28]
 800f4e0:	6857      	ldr	r7, [r2, #4]
 800f4e2:	9104      	str	r1, [sp, #16]
 800f4e4:	f04f 0e00 	mov.w	lr, #0
 800f4e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800f4ea:	9105      	str	r1, [sp, #20]
 800f4ec:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 800f4f0:	46f1      	mov	r9, lr
 800f4f2:	9701      	str	r7, [sp, #4]
 800f4f4:	e05f      	b.n	800f5b6 <D24_MULTI_CH_INPUT+0xf2>
 800f4f6:	f810 6011 	ldrb.w	r6, [r0, r1, lsl #1]
 800f4fa:	f810 a001 	ldrb.w	sl, [r0, r1]
 800f4fe:	0436      	lsls	r6, r6, #16
 800f500:	eb06 260a 	add.w	r6, r6, sl, lsl #8
 800f504:	f890 a000 	ldrb.w	sl, [r0]
 800f508:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 800f50c:	eb0b 0001 	add.w	r0, fp, r1
 800f510:	4456      	add	r6, sl
 800f512:	9f01      	ldr	r7, [sp, #4]
 800f514:	b2f1      	uxtb	r1, r6
 800f516:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800f51a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800f51e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800f522:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f526:	eb03 2a91 	add.w	sl, r3, r1, lsr #10
 800f52a:	4b2d      	ldr	r3, [pc, #180]	@ (800f5e0 <D24_MULTI_CH_INPUT+0x11c>)
 800f52c:	ea03 4101 	and.w	r1, r3, r1, lsl #16
 800f530:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800f534:	4319      	orrs	r1, r3
 800f536:	4b2b      	ldr	r3, [pc, #172]	@ (800f5e4 <D24_MULTI_CH_INPUT+0x120>)
 800f538:	fb21 4303 	smlad	r3, r1, r3, r4
 800f53c:	4c2a      	ldr	r4, [pc, #168]	@ (800f5e8 <D24_MULTI_CH_INPUT+0x124>)
 800f53e:	fb21 c404 	smlad	r4, r1, r4, ip
 800f542:	2701      	movs	r7, #1
 800f544:	fb21 f107 	smuad	r1, r1, r7
 800f548:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 800f54c:	9f01      	ldr	r7, [sp, #4]
 800f54e:	f5a3 56d8 	sub.w	r6, r3, #6912	@ 0x1b00
 800f552:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800f556:	9f02      	ldr	r7, [sp, #8]
 800f558:	eb06 0c08 	add.w	ip, r6, r8
 800f55c:	ebac 0c07 	sub.w	ip, ip, r7
 800f560:	9f04      	ldr	r7, [sp, #16]
 800f562:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800f566:	46cb      	mov	fp, r9
 800f568:	46aa      	mov	sl, r5
 800f56a:	fbcc ab07 	smlal	sl, fp, ip, r7
 800f56e:	f3c3 0c09 	ubfx	ip, r3, #0, #10
 800f572:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800f576:	fa1f fa8e 	uxth.w	sl, lr
 800f57a:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 800f57e:	f10e 0e01 	add.w	lr, lr, #1
 800f582:	448c      	add	ip, r1
 800f584:	b11f      	cbz	r7, 800f58e <D24_MULTI_CH_INPUT+0xca>
 800f586:	ea4f 084b 	mov.w	r8, fp, lsl #1
 800f58a:	9602      	str	r6, [sp, #8]
 800f58c:	4646      	mov	r6, r8
 800f58e:	9f05      	ldr	r7, [sp, #20]
 800f590:	03b6      	lsls	r6, r6, #14
 800f592:	46ab      	mov	fp, r5
 800f594:	4649      	mov	r1, r9
 800f596:	fbc6 b107 	smlal	fp, r1, r6, r7
 800f59a:	8c96      	ldrh	r6, [r2, #36]	@ 0x24
 800f59c:	fb06 fa0a 	mul.w	sl, r6, sl
 800f5a0:	9e03      	ldr	r6, [sp, #12]
 800f5a2:	1089      	asrs	r1, r1, #2
 800f5a4:	f301 010f 	ssat	r1, #16, r1
 800f5a8:	f826 101a 	strh.w	r1, [r6, sl, lsl #1]
 800f5ac:	8c56      	ldrh	r6, [r2, #34]	@ 0x22
 800f5ae:	fa1f f18e 	uxth.w	r1, lr
 800f5b2:	428e      	cmp	r6, r1
 800f5b4:	d90b      	bls.n	800f5ce <D24_MULTI_CH_INPUT+0x10a>
 800f5b6:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 800f5b8:	2902      	cmp	r1, #2
 800f5ba:	d19c      	bne.n	800f4f6 <D24_MULTI_CH_INPUT+0x32>
 800f5bc:	7906      	ldrb	r6, [r0, #4]
 800f5be:	7881      	ldrb	r1, [r0, #2]
 800f5c0:	0436      	lsls	r6, r6, #16
 800f5c2:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 800f5c6:	f810 1b06 	ldrb.w	r1, [r0], #6
 800f5ca:	440e      	add	r6, r1
 800f5cc:	e7a1      	b.n	800f512 <D24_MULTI_CH_INPUT+0x4e>
 800f5ce:	e9c2 8305 	strd	r8, r3, [r2, #20]
 800f5d2:	9b02      	ldr	r3, [sp, #8]
 800f5d4:	6113      	str	r3, [r2, #16]
 800f5d6:	e9c2 c402 	strd	ip, r4, [r2, #8]
 800f5da:	b007      	add	sp, #28
 800f5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e0:	03ff0000 	.word	0x03ff0000
 800f5e4:	00030001 	.word	0x00030001
 800f5e8:	00060007 	.word	0x00060007

0800f5ec <D32_MULTI_CH_INPUT>:
 800f5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f0:	b085      	sub	sp, #20
 800f5f2:	e9d2 9704 	ldrd	r9, r7, [r2, #16]
 800f5f6:	9101      	str	r1, [sp, #4]
 800f5f8:	8c51      	ldrh	r1, [r2, #34]	@ 0x22
 800f5fa:	6993      	ldr	r3, [r2, #24]
 800f5fc:	e9d2 4e02 	ldrd	r4, lr, [r2, #8]
 800f600:	2900      	cmp	r1, #0
 800f602:	f000 8094 	beq.w	800f72e <D32_MULTI_CH_INPUT+0x142>
 800f606:	69d1      	ldr	r1, [r2, #28]
 800f608:	9102      	str	r1, [sp, #8]
 800f60a:	2500      	movs	r5, #0
 800f60c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800f60e:	6856      	ldr	r6, [r2, #4]
 800f610:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 800f750 <D32_MULTI_CH_INPUT+0x164>
 800f614:	9103      	str	r1, [sp, #12]
 800f616:	9500      	str	r5, [sp, #0]
 800f618:	e073      	b.n	800f702 <D32_MULTI_CH_INPUT+0x116>
 800f61a:	f810 101c 	ldrb.w	r1, [r0, ip, lsl #1]
 800f61e:	f810 b00c 	ldrb.w	fp, [r0, ip]
 800f622:	7800      	ldrb	r0, [r0, #0]
 800f624:	0409      	lsls	r1, r1, #16
 800f626:	eb01 210b 	add.w	r1, r1, fp, lsl #8
 800f62a:	f81a b00c 	ldrb.w	fp, [sl, ip]
 800f62e:	4401      	add	r1, r0
 800f630:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800f634:	eb0a 004c 	add.w	r0, sl, ip, lsl #1
 800f638:	fa5f fc81 	uxtb.w	ip, r1
 800f63c:	4d40      	ldr	r5, [pc, #256]	@ (800f740 <D32_MULTI_CH_INPUT+0x154>)
 800f63e:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 800f642:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800f646:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f64a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800f64e:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 800f652:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800f656:	ea08 4c0c 	and.w	ip, r8, ip, lsl #16
 800f65a:	ea4c 0c0a 	orr.w	ip, ip, sl
 800f65e:	fb2c ee05 	smlad	lr, ip, r5, lr
 800f662:	4d38      	ldr	r5, [pc, #224]	@ (800f744 <D32_MULTI_CH_INPUT+0x158>)
 800f664:	fb2c 4a05 	smlad	sl, ip, r5, r4
 800f668:	2401      	movs	r4, #1
 800f66a:	fb2c f404 	smuad	r4, ip, r4
 800f66e:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800f672:	0e09      	lsrs	r1, r1, #24
 800f674:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 800f678:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800f67c:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 800f680:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 800f684:	f3c3 0109 	ubfx	r1, r3, #0, #10
 800f688:	ea08 4c0c 	and.w	ip, r8, ip, lsl #16
 800f68c:	ea4c 0c01 	orr.w	ip, ip, r1
 800f690:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800f694:	fb2c e101 	smlad	r1, ip, r1, lr
 800f698:	4d2b      	ldr	r5, [pc, #172]	@ (800f748 <D32_MULTI_CH_INPUT+0x15c>)
 800f69a:	fb2c ae05 	smlad	lr, ip, r5, sl
 800f69e:	4d2b      	ldr	r5, [pc, #172]	@ (800f74c <D32_MULTI_CH_INPUT+0x160>)
 800f6a0:	fb2c 4405 	smlad	r4, ip, r5, r4
 800f6a4:	f5a1 4180 	sub.w	r1, r1, #16384	@ 0x4000
 800f6a8:	9d02      	ldr	r5, [sp, #8]
 800f6aa:	eb01 0c07 	add.w	ip, r1, r7
 800f6ae:	ebac 0c09 	sub.w	ip, ip, r9
 800f6b2:	b13d      	cbz	r5, 800f6c4 <D32_MULTI_CH_INPUT+0xd8>
 800f6b4:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 800f6b8:	2700      	movs	r7, #0
 800f6ba:	fbcc 9705 	smlal	r9, r7, ip, r5
 800f6be:	007f      	lsls	r7, r7, #1
 800f6c0:	4689      	mov	r9, r1
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	9d03      	ldr	r5, [sp, #12]
 800f6c6:	f8dd b000 	ldr.w	fp, [sp]
 800f6ca:	0349      	lsls	r1, r1, #13
 800f6cc:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 800f6d0:	f04f 0c00 	mov.w	ip, #0
 800f6d4:	fbc1 ac05 	smlal	sl, ip, r1, r5
 800f6d8:	f8b2 a024 	ldrh.w	sl, [r2, #36]	@ 0x24
 800f6dc:	9d01      	ldr	r5, [sp, #4]
 800f6de:	ea4f 01ac 	mov.w	r1, ip, asr #2
 800f6e2:	fa1f fc8b 	uxth.w	ip, fp
 800f6e6:	fb0a fc0c 	mul.w	ip, sl, ip
 800f6ea:	f301 010f 	ssat	r1, #16, r1
 800f6ee:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
 800f6f2:	4659      	mov	r1, fp
 800f6f4:	3101      	adds	r1, #1
 800f6f6:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 800f6fa:	9100      	str	r1, [sp, #0]
 800f6fc:	b289      	uxth	r1, r1
 800f6fe:	458c      	cmp	ip, r1
 800f700:	d915      	bls.n	800f72e <D32_MULTI_CH_INPUT+0x142>
 800f702:	f8b2 c026 	ldrh.w	ip, [r2, #38]	@ 0x26
 800f706:	f1bc 0f02 	cmp.w	ip, #2
 800f70a:	eb00 0a4c 	add.w	sl, r0, ip, lsl #1
 800f70e:	d184      	bne.n	800f61a <D32_MULTI_CH_INPUT+0x2e>
 800f710:	f890 c004 	ldrb.w	ip, [r0, #4]
 800f714:	7881      	ldrb	r1, [r0, #2]
 800f716:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800f71a:	eb0c 2c01 	add.w	ip, ip, r1, lsl #8
 800f71e:	7801      	ldrb	r1, [r0, #0]
 800f720:	4461      	add	r1, ip
 800f722:	f890 c006 	ldrb.w	ip, [r0, #6]
 800f726:	3008      	adds	r0, #8
 800f728:	eb01 610c 	add.w	r1, r1, ip, lsl #24
 800f72c:	e784      	b.n	800f638 <D32_MULTI_CH_INPUT+0x4c>
 800f72e:	e9c2 4e02 	strd	r4, lr, [r2, #8]
 800f732:	e9c2 7305 	strd	r7, r3, [r2, #20]
 800f736:	f8c2 9010 	str.w	r9, [r2, #16]
 800f73a:	b005      	add	sp, #20
 800f73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f740:	00060003 	.word	0x00060003
 800f744:	000a000c 	.word	0x000a000c
 800f748:	000c000a 	.word	0x000c000a
 800f74c:	00030006 	.word	0x00030006
 800f750:	03ff0000 	.word	0x03ff0000

0800f754 <D48_MULTI_CH_INPUT>:
 800f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f758:	8c53      	ldrh	r3, [r2, #34]	@ 0x22
 800f75a:	b085      	sub	sp, #20
 800f75c:	e9d2 a804 	ldrd	sl, r8, [r2, #16]
 800f760:	9101      	str	r1, [sp, #4]
 800f762:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800f766:	6991      	ldr	r1, [r2, #24]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f000 80c1 	beq.w	800f8f0 <D48_MULTI_CH_INPUT+0x19c>
 800f76e:	69d3      	ldr	r3, [r2, #28]
 800f770:	9302      	str	r3, [sp, #8]
 800f772:	2700      	movs	r7, #0
 800f774:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800f776:	6856      	ldr	r6, [r2, #4]
 800f778:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 800f91c <D48_MULTI_CH_INPUT+0x1c8>
 800f77c:	9303      	str	r3, [sp, #12]
 800f77e:	9700      	str	r7, [sp, #0]
 800f780:	e099      	b.n	800f8b6 <D48_MULTI_CH_INPUT+0x162>
 800f782:	f810 301e 	ldrb.w	r3, [r0, lr, lsl #1]
 800f786:	f810 b00e 	ldrb.w	fp, [r0, lr]
 800f78a:	7800      	ldrb	r0, [r0, #0]
 800f78c:	041b      	lsls	r3, r3, #16
 800f78e:	eb03 230b 	add.w	r3, r3, fp, lsl #8
 800f792:	4403      	add	r3, r0
 800f794:	f81c b00e 	ldrb.w	fp, [ip, lr]
 800f798:	eb0c 004e 	add.w	r0, ip, lr, lsl #1
 800f79c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800f7a0:	f81c c01e 	ldrb.w	ip, [ip, lr, lsl #1]
 800f7a4:	f810 b00e 	ldrb.w	fp, [r0, lr]
 800f7a8:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 800f7ac:	eb0c 2c0b 	add.w	ip, ip, fp, lsl #8
 800f7b0:	fa5f fe83 	uxtb.w	lr, r3
 800f7b4:	4f53      	ldr	r7, [pc, #332]	@ (800f904 <D48_MULTI_CH_INPUT+0x1b0>)
 800f7b6:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800f7ba:	eb0e 2191 	add.w	r1, lr, r1, lsr #10
 800f7be:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 800f7c2:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 800f7c6:	eb0e 2e91 	add.w	lr, lr, r1, lsr #10
 800f7ca:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800f7ce:	ea09 4101 	and.w	r1, r9, r1, lsl #16
 800f7d2:	ea41 010b 	orr.w	r1, r1, fp
 800f7d6:	fb21 5507 	smlad	r5, r1, r7, r5
 800f7da:	4f4b      	ldr	r7, [pc, #300]	@ (800f908 <D48_MULTI_CH_INPUT+0x1b4>)
 800f7dc:	fb21 4407 	smlad	r4, r1, r7, r4
 800f7e0:	f04f 0b01 	mov.w	fp, #1
 800f7e4:	fb21 f10b 	smuad	r1, r1, fp
 800f7e8:	f3c3 4b07 	ubfx	fp, r3, #16, #8
 800f7ec:	0e1b      	lsrs	r3, r3, #24
 800f7ee:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800f7f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800f7f6:	4f45      	ldr	r7, [pc, #276]	@ (800f90c <D48_MULTI_CH_INPUT+0x1b8>)
 800f7f8:	eb0b 2b9e 	add.w	fp, fp, lr, lsr #10
 800f7fc:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800f800:	ea09 430b 	and.w	r3, r9, fp, lsl #16
 800f804:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800f808:	ea43 030b 	orr.w	r3, r3, fp
 800f80c:	fb23 5b07 	smlad	fp, r3, r7, r5
 800f810:	f04f 151b 	mov.w	r5, #1769499	@ 0x1b001b
 800f814:	fb23 4505 	smlad	r5, r3, r5, r4
 800f818:	4c3d      	ldr	r4, [pc, #244]	@ (800f910 <D48_MULTI_CH_INPUT+0x1bc>)
 800f81a:	fb23 1304 	smlad	r3, r3, r4, r1
 800f81e:	fa5f f18c 	uxtb.w	r1, ip
 800f822:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800f826:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800f82a:	f856 102c 	ldr.w	r1, [r6, ip, lsl #2]
 800f82e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800f832:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800f836:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 800f83a:	ea09 4404 	and.w	r4, r9, r4, lsl #16
 800f83e:	ea44 040c 	orr.w	r4, r4, ip
 800f842:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 800f846:	fb24 bc0c 	smlad	ip, r4, ip, fp
 800f84a:	4f32      	ldr	r7, [pc, #200]	@ (800f914 <D48_MULTI_CH_INPUT+0x1c0>)
 800f84c:	fb24 5507 	smlad	r5, r4, r7, r5
 800f850:	4f31      	ldr	r7, [pc, #196]	@ (800f918 <D48_MULTI_CH_INPUT+0x1c4>)
 800f852:	fb24 3407 	smlad	r4, r4, r7, r3
 800f856:	f5ac 4c58 	sub.w	ip, ip, #55296	@ 0xd800
 800f85a:	9f02      	ldr	r7, [sp, #8]
 800f85c:	eb0c 0308 	add.w	r3, ip, r8
 800f860:	eba3 030a 	sub.w	r3, r3, sl
 800f864:	b14f      	cbz	r7, 800f87a <D48_MULTI_CH_INPUT+0x126>
 800f866:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
 800f86a:	f04f 0800 	mov.w	r8, #0
 800f86e:	fbc3 e807 	smlal	lr, r8, r3, r7
 800f872:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f876:	46e2      	mov	sl, ip
 800f878:	46c4      	mov	ip, r8
 800f87a:	9f03      	ldr	r7, [sp, #12]
 800f87c:	f8dd b000 	ldr.w	fp, [sp]
 800f880:	ea4f 2ccc 	mov.w	ip, ip, lsl #11
 800f884:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
 800f888:	2300      	movs	r3, #0
 800f88a:	fbcc e307 	smlal	lr, r3, ip, r7
 800f88e:	f8b2 e024 	ldrh.w	lr, [r2, #36]	@ 0x24
 800f892:	9f01      	ldr	r7, [sp, #4]
 800f894:	fa1f fc8b 	uxth.w	ip, fp
 800f898:	fb0e fc0c 	mul.w	ip, lr, ip
 800f89c:	109b      	asrs	r3, r3, #2
 800f89e:	f303 030f 	ssat	r3, #16, r3
 800f8a2:	f827 301c 	strh.w	r3, [r7, ip, lsl #1]
 800f8a6:	465b      	mov	r3, fp
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 800f8ae:	9300      	str	r3, [sp, #0]
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	459c      	cmp	ip, r3
 800f8b4:	d91c      	bls.n	800f8f0 <D48_MULTI_CH_INPUT+0x19c>
 800f8b6:	f8b2 e026 	ldrh.w	lr, [r2, #38]	@ 0x26
 800f8ba:	f1be 0f02 	cmp.w	lr, #2
 800f8be:	eb00 0c4e 	add.w	ip, r0, lr, lsl #1
 800f8c2:	f47f af5e 	bne.w	800f782 <D48_MULTI_CH_INPUT+0x2e>
 800f8c6:	f890 c004 	ldrb.w	ip, [r0, #4]
 800f8ca:	7883      	ldrb	r3, [r0, #2]
 800f8cc:	f890 e00a 	ldrb.w	lr, [r0, #10]
 800f8d0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800f8d4:	eb0c 2c03 	add.w	ip, ip, r3, lsl #8
 800f8d8:	7803      	ldrb	r3, [r0, #0]
 800f8da:	4463      	add	r3, ip
 800f8dc:	f890 c006 	ldrb.w	ip, [r0, #6]
 800f8e0:	eb03 630c 	add.w	r3, r3, ip, lsl #24
 800f8e4:	f890 c008 	ldrb.w	ip, [r0, #8]
 800f8e8:	300c      	adds	r0, #12
 800f8ea:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
 800f8ee:	e75f      	b.n	800f7b0 <D48_MULTI_CH_INPUT+0x5c>
 800f8f0:	e9c2 4502 	strd	r4, r5, [r2, #8]
 800f8f4:	e9c2 8105 	strd	r8, r1, [r2, #20]
 800f8f8:	f8c2 a010 	str.w	sl, [r2, #16]
 800f8fc:	b005      	add	sp, #20
 800f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f902:	bf00      	nop
 800f904:	000f000a 	.word	0x000f000a
 800f908:	00150019 	.word	0x00150019
 800f90c:	00060003 	.word	0x00060003
 800f910:	00030006 	.word	0x00030006
 800f914:	00190015 	.word	0x00190015
 800f918:	000a000f 	.word	0x000a000f
 800f91c:	03ff0000 	.word	0x03ff0000

0800f920 <D64_MULTI_CH_INPUT>:
 800f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f924:	e9d2 3804 	ldrd	r3, r8, [r2, #16]
 800f928:	b087      	sub	sp, #28
 800f92a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800f92e:	8c51      	ldrh	r1, [r2, #34]	@ 0x22
 800f930:	6993      	ldr	r3, [r2, #24]
 800f932:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 800f936:	2900      	cmp	r1, #0
 800f938:	f000 80ea 	beq.w	800fb10 <D64_MULTI_CH_INPUT+0x1f0>
 800f93c:	69d1      	ldr	r1, [r2, #28]
 800f93e:	9102      	str	r1, [sp, #8]
 800f940:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800f942:	6856      	ldr	r6, [r2, #4]
 800f944:	f8df a204 	ldr.w	sl, [pc, #516]	@ 800fb4c <D64_MULTI_CH_INPUT+0x22c>
 800f948:	9105      	str	r1, [sp, #20]
 800f94a:	f04f 0900 	mov.w	r9, #0
 800f94e:	9201      	str	r2, [sp, #4]
 800f950:	e0bb      	b.n	800faca <D64_MULTI_CH_INPUT+0x1aa>
 800f952:	eb00 074c 	add.w	r7, r0, ip, lsl #1
 800f956:	eb07 014c 	add.w	r1, r7, ip, lsl #1
 800f95a:	f810 b01c 	ldrb.w	fp, [r0, ip, lsl #1]
 800f95e:	f811 e01c 	ldrb.w	lr, [r1, ip, lsl #1]
 800f962:	f811 100c 	ldrb.w	r1, [r1, ip]
 800f966:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800f96a:	eb0e 2e01 	add.w	lr, lr, r1, lsl #8
 800f96e:	f810 100c 	ldrb.w	r1, [r0, ip]
 800f972:	7800      	ldrb	r0, [r0, #0]
 800f974:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 800f978:	eb0b 2101 	add.w	r1, fp, r1, lsl #8
 800f97c:	4401      	add	r1, r0
 800f97e:	f817 b01c 	ldrb.w	fp, [r7, ip, lsl #1]
 800f982:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 800f986:	f817 700c 	ldrb.w	r7, [r7, ip]
 800f98a:	eb01 6707 	add.w	r7, r1, r7, lsl #24
 800f98e:	f810 100c 	ldrb.w	r1, [r0, ip]
 800f992:	44de      	add	lr, fp
 800f994:	eb00 004c 	add.w	r0, r0, ip, lsl #1
 800f998:	eb0e 6101 	add.w	r1, lr, r1, lsl #24
 800f99c:	fa5f fc87 	uxtb.w	ip, r7
 800f9a0:	4a60      	ldr	r2, [pc, #384]	@ (800fb24 <D64_MULTI_CH_INPUT+0x204>)
 800f9a2:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 800f9a6:	eb0c 2393 	add.w	r3, ip, r3, lsr #10
 800f9aa:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800f9ae:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 800f9b2:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800f9b6:	f3cc 0e09 	ubfx	lr, ip, #0, #10
 800f9ba:	ea0a 4303 	and.w	r3, sl, r3, lsl #16
 800f9be:	ea43 030e 	orr.w	r3, r3, lr
 800f9c2:	fb23 4402 	smlad	r4, r3, r2, r4
 800f9c6:	4a58      	ldr	r2, [pc, #352]	@ (800fb28 <D64_MULTI_CH_INPUT+0x208>)
 800f9c8:	fb23 5502 	smlad	r5, r3, r2, r5
 800f9cc:	f04f 0e01 	mov.w	lr, #1
 800f9d0:	fb23 fe0e 	smuad	lr, r3, lr
 800f9d4:	f3c7 4307 	ubfx	r3, r7, #16, #8
 800f9d8:	0e3f      	lsrs	r7, r7, #24
 800f9da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800f9de:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800f9e2:	4a52      	ldr	r2, [pc, #328]	@ (800fb2c <D64_MULTI_CH_INPUT+0x20c>)
 800f9e4:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 800f9e8:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 800f9ec:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 800f9f0:	ea0a 4303 	and.w	r3, sl, r3, lsl #16
 800f9f4:	ea43 030c 	orr.w	r3, r3, ip
 800f9f8:	fb23 4402 	smlad	r4, r3, r2, r4
 800f9fc:	4a4c      	ldr	r2, [pc, #304]	@ (800fb30 <D64_MULTI_CH_INPUT+0x210>)
 800f9fe:	fb23 5502 	smlad	r5, r3, r2, r5
 800fa02:	4a4c      	ldr	r2, [pc, #304]	@ (800fb34 <D64_MULTI_CH_INPUT+0x214>)
 800fa04:	fb23 ec02 	smlad	ip, r3, r2, lr
 800fa08:	b2cb      	uxtb	r3, r1
 800fa0a:	4a4b      	ldr	r2, [pc, #300]	@ (800fb38 <D64_MULTI_CH_INPUT+0x218>)
 800fa0c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800fa10:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800fa14:	f3c1 2707 	ubfx	r7, r1, #8, #8
 800fa18:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800fa1c:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 800fa20:	f3c7 0e09 	ubfx	lr, r7, #0, #10
 800fa24:	ea0a 4303 	and.w	r3, sl, r3, lsl #16
 800fa28:	ea43 030e 	orr.w	r3, r3, lr
 800fa2c:	fb23 4402 	smlad	r4, r3, r2, r4
 800fa30:	4a42      	ldr	r2, [pc, #264]	@ (800fb3c <D64_MULTI_CH_INPUT+0x21c>)
 800fa32:	fb23 5502 	smlad	r5, r3, r2, r5
 800fa36:	4a42      	ldr	r2, [pc, #264]	@ (800fb40 <D64_MULTI_CH_INPUT+0x220>)
 800fa38:	fb23 cc02 	smlad	ip, r3, r2, ip
 800fa3c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fa40:	0e09      	lsrs	r1, r1, #24
 800fa42:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800fa46:	eb03 2797 	add.w	r7, r3, r7, lsr #10
 800fa4a:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 800fa4e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800fa52:	ea0a 4107 	and.w	r1, sl, r7, lsl #16
 800fa56:	f3c3 0709 	ubfx	r7, r3, #0, #10
 800fa5a:	4339      	orrs	r1, r7
 800fa5c:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 800fa60:	fb21 4707 	smlad	r7, r1, r7, r4
 800fa64:	4c37      	ldr	r4, [pc, #220]	@ (800fb44 <D64_MULTI_CH_INPUT+0x224>)
 800fa66:	fb21 5404 	smlad	r4, r1, r4, r5
 800fa6a:	4d37      	ldr	r5, [pc, #220]	@ (800fb48 <D64_MULTI_CH_INPUT+0x228>)
 800fa6c:	fb21 c505 	smlad	r5, r1, r5, ip
 800fa70:	f5a7 3100 	sub.w	r1, r7, #131072	@ 0x20000
 800fa74:	9f02      	ldr	r7, [sp, #8]
 800fa76:	b16f      	cbz	r7, 800fa94 <D64_MULTI_CH_INPUT+0x174>
 800fa78:	9a03      	ldr	r2, [sp, #12]
 800fa7a:	9103      	str	r1, [sp, #12]
 800fa7c:	4488      	add	r8, r1
 800fa7e:	eba8 0802 	sub.w	r8, r8, r2
 800fa82:	9a02      	ldr	r2, [sp, #8]
 800fa84:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 800fa88:	2100      	movs	r1, #0
 800fa8a:	fbc8 7102 	smlal	r7, r1, r8, r2
 800fa8e:	ea4f 0841 	mov.w	r8, r1, lsl #1
 800fa92:	4641      	mov	r1, r8
 800fa94:	9a01      	ldr	r2, [sp, #4]
 800fa96:	8c97      	ldrh	r7, [r2, #36]	@ 0x24
 800fa98:	9a05      	ldr	r2, [sp, #20]
 800fa9a:	fa1f fc89 	uxth.w	ip, r9
 800fa9e:	0289      	lsls	r1, r1, #10
 800faa0:	fb07 fc0c 	mul.w	ip, r7, ip
 800faa4:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
 800faa8:	2700      	movs	r7, #0
 800faaa:	fbc1 e702 	smlal	lr, r7, r1, r2
 800faae:	9a04      	ldr	r2, [sp, #16]
 800fab0:	10bf      	asrs	r7, r7, #2
 800fab2:	f307 070f 	ssat	r7, #16, r7
 800fab6:	f822 701c 	strh.w	r7, [r2, ip, lsl #1]
 800faba:	9a01      	ldr	r2, [sp, #4]
 800fabc:	f109 0901 	add.w	r9, r9, #1
 800fac0:	8c57      	ldrh	r7, [r2, #34]	@ 0x22
 800fac2:	fa1f f189 	uxth.w	r1, r9
 800fac6:	428f      	cmp	r7, r1
 800fac8:	d922      	bls.n	800fb10 <D64_MULTI_CH_INPUT+0x1f0>
 800faca:	9a01      	ldr	r2, [sp, #4]
 800facc:	f8b2 c026 	ldrh.w	ip, [r2, #38]	@ 0x26
 800fad0:	f1bc 0f02 	cmp.w	ip, #2
 800fad4:	f47f af3d 	bne.w	800f952 <D64_MULTI_CH_INPUT+0x32>
 800fad8:	7907      	ldrb	r7, [r0, #4]
 800fada:	f890 c002 	ldrb.w	ip, [r0, #2]
 800fade:	7b01      	ldrb	r1, [r0, #12]
 800fae0:	043f      	lsls	r7, r7, #16
 800fae2:	eb07 270c 	add.w	r7, r7, ip, lsl #8
 800fae6:	f890 c00a 	ldrb.w	ip, [r0, #10]
 800faea:	0409      	lsls	r1, r1, #16
 800faec:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800faf0:	f890 c000 	ldrb.w	ip, [r0]
 800faf4:	4467      	add	r7, ip
 800faf6:	f890 c008 	ldrb.w	ip, [r0, #8]
 800fafa:	4461      	add	r1, ip
 800fafc:	f890 c006 	ldrb.w	ip, [r0, #6]
 800fb00:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 800fb04:	f890 c00e 	ldrb.w	ip, [r0, #14]
 800fb08:	3010      	adds	r0, #16
 800fb0a:	eb01 610c 	add.w	r1, r1, ip, lsl #24
 800fb0e:	e745      	b.n	800f99c <D64_MULTI_CH_INPUT+0x7c>
 800fb10:	e9c2 8305 	strd	r8, r3, [r2, #20]
 800fb14:	9b03      	ldr	r3, [sp, #12]
 800fb16:	6113      	str	r3, [r2, #16]
 800fb18:	e9c2 5402 	strd	r5, r4, [r2, #8]
 800fb1c:	b007      	add	sp, #28
 800fb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb22:	bf00      	nop
 800fb24:	001c0015 	.word	0x001c0015
 800fb28:	0024002a 	.word	0x0024002a
 800fb2c:	000f000a 	.word	0x000f000a
 800fb30:	002e0030 	.word	0x002e0030
 800fb34:	00030006 	.word	0x00030006
 800fb38:	00060003 	.word	0x00060003
 800fb3c:	0030002e 	.word	0x0030002e
 800fb40:	000a000f 	.word	0x000a000f
 800fb44:	002a0024 	.word	0x002a0024
 800fb48:	0015001c 	.word	0x0015001c
 800fb4c:	03ff0000 	.word	0x03ff0000

0800fb50 <D80_MULTI_CH_INPUT>:
 800fb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb54:	b087      	sub	sp, #28
 800fb56:	6953      	ldr	r3, [r2, #20]
 800fb58:	9302      	str	r3, [sp, #8]
 800fb5a:	8c54      	ldrh	r4, [r2, #34]	@ 0x22
 800fb5c:	6913      	ldr	r3, [r2, #16]
 800fb5e:	e9cd 3103 	strd	r3, r1, [sp, #12]
 800fb62:	e9d2 3502 	ldrd	r3, r5, [r2, #8]
 800fb66:	6991      	ldr	r1, [r2, #24]
 800fb68:	2c00      	cmp	r4, #0
 800fb6a:	f000 8115 	beq.w	800fd98 <D80_MULTI_CH_INPUT+0x248>
 800fb6e:	69d4      	ldr	r4, [r2, #28]
 800fb70:	9401      	str	r4, [sp, #4]
 800fb72:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800fb74:	6857      	ldr	r7, [r2, #4]
 800fb76:	f8df 825c 	ldr.w	r8, [pc, #604]	@ 800fdd4 <D80_MULTI_CH_INPUT+0x284>
 800fb7a:	9405      	str	r4, [sp, #20]
 800fb7c:	f04f 0900 	mov.w	r9, #0
 800fb80:	9200      	str	r2, [sp, #0]
 800fb82:	e0e0      	b.n	800fd46 <D80_MULTI_CH_INPUT+0x1f6>
 800fb84:	eb00 0a4e 	add.w	sl, r0, lr, lsl #1
 800fb88:	eb0a 044e 	add.w	r4, sl, lr, lsl #1
 800fb8c:	f810 601e 	ldrb.w	r6, [r0, lr, lsl #1]
 800fb90:	f814 b01e 	ldrb.w	fp, [r4, lr, lsl #1]
 800fb94:	f814 400e 	ldrb.w	r4, [r4, lr]
 800fb98:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 800fb9c:	eb0b 2b04 	add.w	fp, fp, r4, lsl #8
 800fba0:	f810 400e 	ldrb.w	r4, [r0, lr]
 800fba4:	7800      	ldrb	r0, [r0, #0]
 800fba6:	0436      	lsls	r6, r6, #16
 800fba8:	eb0a 0c8e 	add.w	ip, sl, lr, lsl #2
 800fbac:	eb06 2404 	add.w	r4, r6, r4, lsl #8
 800fbb0:	f81a 601e 	ldrb.w	r6, [sl, lr, lsl #1]
 800fbb4:	f81a a00e 	ldrb.w	sl, [sl, lr]
 800fbb8:	4404      	add	r4, r0
 800fbba:	eb04 640a 	add.w	r4, r4, sl, lsl #24
 800fbbe:	eb0c 004e 	add.w	r0, ip, lr, lsl #1
 800fbc2:	f81c a00e 	ldrb.w	sl, [ip, lr]
 800fbc6:	f81c c01e 	ldrb.w	ip, [ip, lr, lsl #1]
 800fbca:	445e      	add	r6, fp
 800fbcc:	eb06 660a 	add.w	r6, r6, sl, lsl #24
 800fbd0:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800fbd4:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 800fbd8:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 800fbdc:	fa5f fe84 	uxtb.w	lr, r4
 800fbe0:	4a72      	ldr	r2, [pc, #456]	@ (800fdac <D80_MULTI_CH_INPUT+0x25c>)
 800fbe2:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
 800fbe6:	eb0e 2191 	add.w	r1, lr, r1, lsr #10
 800fbea:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 800fbee:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
 800fbf2:	eb0e 2e91 	add.w	lr, lr, r1, lsr #10
 800fbf6:	f3ce 0a09 	ubfx	sl, lr, #0, #10
 800fbfa:	ea08 4101 	and.w	r1, r8, r1, lsl #16
 800fbfe:	ea41 010a 	orr.w	r1, r1, sl
 800fc02:	fb21 5502 	smlad	r5, r1, r2, r5
 800fc06:	4a6a      	ldr	r2, [pc, #424]	@ (800fdb0 <D80_MULTI_CH_INPUT+0x260>)
 800fc08:	fb21 3302 	smlad	r3, r1, r2, r3
 800fc0c:	f04f 0a01 	mov.w	sl, #1
 800fc10:	fb21 fa0a 	smuad	sl, r1, sl
 800fc14:	f3c4 4107 	ubfx	r1, r4, #16, #8
 800fc18:	0e24      	lsrs	r4, r4, #24
 800fc1a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800fc1e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 800fc22:	4a64      	ldr	r2, [pc, #400]	@ (800fdb4 <D80_MULTI_CH_INPUT+0x264>)
 800fc24:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 800fc28:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 800fc2c:	f3c4 0e09 	ubfx	lr, r4, #0, #10
 800fc30:	ea08 4101 	and.w	r1, r8, r1, lsl #16
 800fc34:	ea41 010e 	orr.w	r1, r1, lr
 800fc38:	fb21 5502 	smlad	r5, r1, r2, r5
 800fc3c:	4a5e      	ldr	r2, [pc, #376]	@ (800fdb8 <D80_MULTI_CH_INPUT+0x268>)
 800fc3e:	fb21 3302 	smlad	r3, r1, r2, r3
 800fc42:	4a5e      	ldr	r2, [pc, #376]	@ (800fdbc <D80_MULTI_CH_INPUT+0x26c>)
 800fc44:	fb21 ae02 	smlad	lr, r1, r2, sl
 800fc48:	b2f1      	uxtb	r1, r6
 800fc4a:	4a5d      	ldr	r2, [pc, #372]	@ (800fdc0 <D80_MULTI_CH_INPUT+0x270>)
 800fc4c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800fc50:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 800fc54:	f3c6 2407 	ubfx	r4, r6, #8, #8
 800fc58:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 800fc5c:	eb04 2a91 	add.w	sl, r4, r1, lsr #10
 800fc60:	ea08 4401 	and.w	r4, r8, r1, lsl #16
 800fc64:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800fc68:	4321      	orrs	r1, r4
 800fc6a:	fb21 5502 	smlad	r5, r1, r2, r5
 800fc6e:	f04f 144b 	mov.w	r4, #4915275	@ 0x4b004b
 800fc72:	fb21 3404 	smlad	r4, r1, r4, r3
 800fc76:	4b53      	ldr	r3, [pc, #332]	@ (800fdc4 <D80_MULTI_CH_INPUT+0x274>)
 800fc78:	fb21 e103 	smlad	r1, r1, r3, lr
 800fc7c:	f3c6 4307 	ubfx	r3, r6, #16, #8
 800fc80:	0e36      	lsrs	r6, r6, #24
 800fc82:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800fc86:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800fc8a:	4a4f      	ldr	r2, [pc, #316]	@ (800fdc8 <D80_MULTI_CH_INPUT+0x278>)
 800fc8c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800fc90:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800fc94:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 800fc98:	ea08 4303 	and.w	r3, r8, r3, lsl #16
 800fc9c:	ea43 030e 	orr.w	r3, r3, lr
 800fca0:	fb23 5502 	smlad	r5, r3, r2, r5
 800fca4:	f8df e130 	ldr.w	lr, [pc, #304]	@ 800fdd8 <D80_MULTI_CH_INPUT+0x288>
 800fca8:	fb23 440e 	smlad	r4, r3, lr, r4
 800fcac:	f8df e12c 	ldr.w	lr, [pc, #300]	@ 800fddc <D80_MULTI_CH_INPUT+0x28c>
 800fcb0:	fb23 1e0e 	smlad	lr, r3, lr, r1
 800fcb4:	fa5f f38c 	uxtb.w	r3, ip
 800fcb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800fcbc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800fcc0:	f857 102c 	ldr.w	r1, [r7, ip, lsl #2]
 800fcc4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800fcc8:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800fccc:	f3c1 0609 	ubfx	r6, r1, #0, #10
 800fcd0:	ea08 4303 	and.w	r3, r8, r3, lsl #16
 800fcd4:	4333      	orrs	r3, r6
 800fcd6:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800fcda:	fb23 5606 	smlad	r6, r3, r6, r5
 800fcde:	4d3b      	ldr	r5, [pc, #236]	@ (800fdcc <D80_MULTI_CH_INPUT+0x27c>)
 800fce0:	fb23 4505 	smlad	r5, r3, r5, r4
 800fce4:	4c3a      	ldr	r4, [pc, #232]	@ (800fdd0 <D80_MULTI_CH_INPUT+0x280>)
 800fce6:	fb23 e304 	smlad	r3, r3, r4, lr
 800fcea:	f5a6 347a 	sub.w	r4, r6, #256000	@ 0x3e800
 800fcee:	9e01      	ldr	r6, [sp, #4]
 800fcf0:	b176      	cbz	r6, 800fd10 <D80_MULTI_CH_INPUT+0x1c0>
 800fcf2:	9a02      	ldr	r2, [sp, #8]
 800fcf4:	4422      	add	r2, r4
 800fcf6:	4616      	mov	r6, r2
 800fcf8:	9a03      	ldr	r2, [sp, #12]
 800fcfa:	9403      	str	r4, [sp, #12]
 800fcfc:	1ab6      	subs	r6, r6, r2
 800fcfe:	9a01      	ldr	r2, [sp, #4]
 800fd00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fd04:	2400      	movs	r4, #0
 800fd06:	fbc6 c402 	smlal	ip, r4, r6, r2
 800fd0a:	0062      	lsls	r2, r4, #1
 800fd0c:	9202      	str	r2, [sp, #8]
 800fd0e:	4614      	mov	r4, r2
 800fd10:	9a00      	ldr	r2, [sp, #0]
 800fd12:	8c96      	ldrh	r6, [r2, #36]	@ 0x24
 800fd14:	9a05      	ldr	r2, [sp, #20]
 800fd16:	fa1f fc89 	uxth.w	ip, r9
 800fd1a:	0264      	lsls	r4, r4, #9
 800fd1c:	fb06 fc0c 	mul.w	ip, r6, ip
 800fd20:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
 800fd24:	2600      	movs	r6, #0
 800fd26:	fbc4 e602 	smlal	lr, r6, r4, r2
 800fd2a:	9a04      	ldr	r2, [sp, #16]
 800fd2c:	10b6      	asrs	r6, r6, #2
 800fd2e:	f306 060f 	ssat	r6, #16, r6
 800fd32:	f822 601c 	strh.w	r6, [r2, ip, lsl #1]
 800fd36:	9a00      	ldr	r2, [sp, #0]
 800fd38:	f109 0901 	add.w	r9, r9, #1
 800fd3c:	8c56      	ldrh	r6, [r2, #34]	@ 0x22
 800fd3e:	fa1f f489 	uxth.w	r4, r9
 800fd42:	42a6      	cmp	r6, r4
 800fd44:	d928      	bls.n	800fd98 <D80_MULTI_CH_INPUT+0x248>
 800fd46:	9a00      	ldr	r2, [sp, #0]
 800fd48:	f8b2 e026 	ldrh.w	lr, [r2, #38]	@ 0x26
 800fd4c:	f1be 0f02 	cmp.w	lr, #2
 800fd50:	f47f af18 	bne.w	800fb84 <D80_MULTI_CH_INPUT+0x34>
 800fd54:	7904      	ldrb	r4, [r0, #4]
 800fd56:	f890 c002 	ldrb.w	ip, [r0, #2]
 800fd5a:	7b06      	ldrb	r6, [r0, #12]
 800fd5c:	f890 e012 	ldrb.w	lr, [r0, #18]
 800fd60:	0424      	lsls	r4, r4, #16
 800fd62:	eb04 240c 	add.w	r4, r4, ip, lsl #8
 800fd66:	f890 c00a 	ldrb.w	ip, [r0, #10]
 800fd6a:	0436      	lsls	r6, r6, #16
 800fd6c:	eb06 260c 	add.w	r6, r6, ip, lsl #8
 800fd70:	f890 c000 	ldrb.w	ip, [r0]
 800fd74:	4464      	add	r4, ip
 800fd76:	f890 c008 	ldrb.w	ip, [r0, #8]
 800fd7a:	4466      	add	r6, ip
 800fd7c:	f890 c006 	ldrb.w	ip, [r0, #6]
 800fd80:	eb04 640c 	add.w	r4, r4, ip, lsl #24
 800fd84:	f890 c00e 	ldrb.w	ip, [r0, #14]
 800fd88:	eb06 660c 	add.w	r6, r6, ip, lsl #24
 800fd8c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800fd90:	3014      	adds	r0, #20
 800fd92:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
 800fd96:	e721      	b.n	800fbdc <D80_MULTI_CH_INPUT+0x8c>
 800fd98:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800fd9c:	9b02      	ldr	r3, [sp, #8]
 800fd9e:	6153      	str	r3, [r2, #20]
 800fda0:	9b03      	ldr	r3, [sp, #12]
 800fda2:	6191      	str	r1, [r2, #24]
 800fda4:	6113      	str	r3, [r2, #16]
 800fda6:	b007      	add	sp, #28
 800fda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdac:	002d0024 	.word	0x002d0024
 800fdb0:	0037003f 	.word	0x0037003f
 800fdb4:	001c0015 	.word	0x001c0015
 800fdb8:	00450049 	.word	0x00450049
 800fdbc:	00030006 	.word	0x00030006
 800fdc0:	000f000a 	.word	0x000f000a
 800fdc4:	000a000f 	.word	0x000a000f
 800fdc8:	00060003 	.word	0x00060003
 800fdcc:	003f0037 	.word	0x003f0037
 800fdd0:	0024002d 	.word	0x0024002d
 800fdd4:	03ff0000 	.word	0x03ff0000
 800fdd8:	00490045 	.word	0x00490045
 800fddc:	0015001c 	.word	0x0015001c

0800fde0 <D128_MULTI_CH_INPUT>:
 800fde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde4:	b08b      	sub	sp, #44	@ 0x2c
 800fde6:	6953      	ldr	r3, [r2, #20]
 800fde8:	9305      	str	r3, [sp, #20]
 800fdea:	6913      	ldr	r3, [r2, #16]
 800fdec:	6894      	ldr	r4, [r2, #8]
 800fdee:	9404      	str	r4, [sp, #16]
 800fdf0:	e9cd 3106 	strd	r3, r1, [sp, #24]
 800fdf4:	8c53      	ldrh	r3, [r2, #34]	@ 0x22
 800fdf6:	68d4      	ldr	r4, [r2, #12]
 800fdf8:	6991      	ldr	r1, [r2, #24]
 800fdfa:	9403      	str	r4, [sp, #12]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 8195 	beq.w	801012c <D128_MULTI_CH_INPUT+0x34c>
 800fe02:	69d3      	ldr	r3, [r2, #28]
 800fe04:	9308      	str	r3, [sp, #32]
 800fe06:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800fe08:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800fe10:	6854      	ldr	r4, [r2, #4]
 800fe12:	4dcc      	ldr	r5, [pc, #816]	@ (8010144 <D128_MULTI_CH_INPUT+0x364>)
 800fe14:	e154      	b.n	80100c0 <D128_MULTI_CH_INPUT+0x2e0>
 800fe16:	eb00 0a43 	add.w	sl, r0, r3, lsl #1
 800fe1a:	eb0a 0743 	add.w	r7, sl, r3, lsl #1
 800fe1e:	eb0a 0983 	add.w	r9, sl, r3, lsl #2
 800fe22:	f817 e013 	ldrb.w	lr, [r7, r3, lsl #1]
 800fe26:	5cff      	ldrb	r7, [r7, r3]
 800fe28:	f810 b013 	ldrb.w	fp, [r0, r3, lsl #1]
 800fe2c:	eb09 0643 	add.w	r6, r9, r3, lsl #1
 800fe30:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800fe34:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fe38:	eb0e 2e07 	add.w	lr, lr, r7, lsl #8
 800fe3c:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 800fe40:	5cf6      	ldrb	r6, [r6, r3]
 800fe42:	eb08 0c43 	add.w	ip, r8, r3, lsl #1
 800fe46:	043f      	lsls	r7, r7, #16
 800fe48:	eb07 2706 	add.w	r7, r7, r6, lsl #8
 800fe4c:	f81c 6013 	ldrb.w	r6, [ip, r3, lsl #1]
 800fe50:	f81c c003 	ldrb.w	ip, [ip, r3]
 800fe54:	0436      	lsls	r6, r6, #16
 800fe56:	eb06 260c 	add.w	r6, r6, ip, lsl #8
 800fe5a:	f810 c003 	ldrb.w	ip, [r0, r3]
 800fe5e:	7800      	ldrb	r0, [r0, #0]
 800fe60:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 800fe64:	eb0b 2c0c 	add.w	ip, fp, ip, lsl #8
 800fe68:	f81a b013 	ldrb.w	fp, [sl, r3, lsl #1]
 800fe6c:	44f3      	add	fp, lr
 800fe6e:	f81a e003 	ldrb.w	lr, [sl, r3]
 800fe72:	4484      	add	ip, r0
 800fe74:	eb0c 6c0e 	add.w	ip, ip, lr, lsl #24
 800fe78:	f819 e013 	ldrb.w	lr, [r9, r3, lsl #1]
 800fe7c:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 800fe80:	44be      	add	lr, r7
 800fe82:	f819 7003 	ldrb.w	r7, [r9, r3]
 800fe86:	f818 9013 	ldrb.w	r9, [r8, r3, lsl #1]
 800fe8a:	f818 8003 	ldrb.w	r8, [r8, r3]
 800fe8e:	eb0e 6808 	add.w	r8, lr, r8, lsl #24
 800fe92:	f810 e003 	ldrb.w	lr, [r0, r3]
 800fe96:	444e      	add	r6, r9
 800fe98:	eb0b 6707 	add.w	r7, fp, r7, lsl #24
 800fe9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800fea0:	eb06 6e0e 	add.w	lr, r6, lr, lsl #24
 800fea4:	fa5f f38c 	uxtb.w	r3, ip
 800fea8:	4aa7      	ldr	r2, [pc, #668]	@ (8010148 <D128_MULTI_CH_INPUT+0x368>)
 800feaa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800feae:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 800feb2:	f3cc 2107 	ubfx	r1, ip, #8, #8
 800feb6:	f854 6021 	ldr.w	r6, [r4, r1, lsl #2]
 800feba:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800febe:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800fec2:	ea05 4303 	and.w	r3, r5, r3, lsl #16
 800fec6:	430b      	orrs	r3, r1
 800fec8:	9903      	ldr	r1, [sp, #12]
 800feca:	fb23 1b02 	smlad	fp, r3, r2, r1
 800fece:	4a9f      	ldr	r2, [pc, #636]	@ (801014c <D128_MULTI_CH_INPUT+0x36c>)
 800fed0:	9904      	ldr	r1, [sp, #16]
 800fed2:	fb23 1902 	smlad	r9, r3, r2, r1
 800fed6:	f04f 0a01 	mov.w	sl, #1
 800feda:	fb23 fa0a 	smuad	sl, r3, sl
 800fede:	f3cc 4307 	ubfx	r3, ip, #16, #8
 800fee2:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800fee6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800feea:	4a99      	ldr	r2, [pc, #612]	@ (8010150 <D128_MULTI_CH_INPUT+0x370>)
 800feec:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800fef0:	f854 602c 	ldr.w	r6, [r4, ip, lsl #2]
 800fef4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800fef8:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800fefc:	ea05 4303 	and.w	r3, r5, r3, lsl #16
 800ff00:	ea43 030c 	orr.w	r3, r3, ip
 800ff04:	fb23 bc02 	smlad	ip, r3, r2, fp
 800ff08:	4a92      	ldr	r2, [pc, #584]	@ (8010154 <D128_MULTI_CH_INPUT+0x374>)
 800ff0a:	fb23 9902 	smlad	r9, r3, r2, r9
 800ff0e:	4a92      	ldr	r2, [pc, #584]	@ (8010158 <D128_MULTI_CH_INPUT+0x378>)
 800ff10:	fb23 a302 	smlad	r3, r3, r2, sl
 800ff14:	b2f9      	uxtb	r1, r7
 800ff16:	4a91      	ldr	r2, [pc, #580]	@ (801015c <D128_MULTI_CH_INPUT+0x37c>)
 800ff18:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800ff1c:	eb01 2696 	add.w	r6, r1, r6, lsr #10
 800ff20:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800ff24:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800ff28:	eb01 2a96 	add.w	sl, r1, r6, lsr #10
 800ff2c:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800ff30:	ea05 4606 	and.w	r6, r5, r6, lsl #16
 800ff34:	430e      	orrs	r6, r1
 800ff36:	fb26 cc02 	smlad	ip, r6, r2, ip
 800ff3a:	4a89      	ldr	r2, [pc, #548]	@ (8010160 <D128_MULTI_CH_INPUT+0x380>)
 800ff3c:	fb26 9902 	smlad	r9, r6, r2, r9
 800ff40:	4a88      	ldr	r2, [pc, #544]	@ (8010164 <D128_MULTI_CH_INPUT+0x384>)
 800ff42:	fb26 3102 	smlad	r1, r6, r2, r3
 800ff46:	f3c7 4307 	ubfx	r3, r7, #16, #8
 800ff4a:	0e3f      	lsrs	r7, r7, #24
 800ff4c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ff50:	f854 6027 	ldr.w	r6, [r4, r7, lsl #2]
 800ff54:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800ff58:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800ff5c:	f3c6 0709 	ubfx	r7, r6, #0, #10
 800ff60:	ea05 4303 	and.w	r3, r5, r3, lsl #16
 800ff64:	433b      	orrs	r3, r7
 800ff66:	4f80      	ldr	r7, [pc, #512]	@ (8010168 <D128_MULTI_CH_INPUT+0x388>)
 800ff68:	fb23 c707 	smlad	r7, r3, r7, ip
 800ff6c:	f8df c208 	ldr.w	ip, [pc, #520]	@ 8010178 <D128_MULTI_CH_INPUT+0x398>
 800ff70:	fb23 9c0c 	smlad	ip, r3, ip, r9
 800ff74:	f8df 9204 	ldr.w	r9, [pc, #516]	@ 801017c <D128_MULTI_CH_INPUT+0x39c>
 800ff78:	fb23 1109 	smlad	r1, r3, r9, r1
 800ff7c:	fa5f f388 	uxtb.w	r3, r8
 800ff80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ff84:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800ff88:	f3c8 2607 	ubfx	r6, r8, #8, #8
 800ff8c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800ff90:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800ff94:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800ff98:	ea05 4303 	and.w	r3, r5, r3, lsl #16
 800ff9c:	ea43 0309 	orr.w	r3, r3, r9
 800ffa0:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 8010180 <D128_MULTI_CH_INPUT+0x3a0>
 800ffa4:	fb23 7909 	smlad	r9, r3, r9, r7
 800ffa8:	4f70      	ldr	r7, [pc, #448]	@ (801016c <D128_MULTI_CH_INPUT+0x38c>)
 800ffaa:	fb23 cc07 	smlad	ip, r3, r7, ip
 800ffae:	4f70      	ldr	r7, [pc, #448]	@ (8010170 <D128_MULTI_CH_INPUT+0x390>)
 800ffb0:	fb23 1707 	smlad	r7, r3, r7, r1
 800ffb4:	f3c8 4307 	ubfx	r3, r8, #16, #8
 800ffb8:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800ffbc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800ffc0:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 800ffc4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800ffc8:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800ffcc:	f3c1 0609 	ubfx	r6, r1, #0, #10
 800ffd0:	ea05 4303 	and.w	r3, r5, r3, lsl #16
 800ffd4:	4333      	orrs	r3, r6
 800ffd6:	4e67      	ldr	r6, [pc, #412]	@ (8010174 <D128_MULTI_CH_INPUT+0x394>)
 800ffd8:	fb23 9606 	smlad	r6, r3, r6, r9
 800ffdc:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8010184 <D128_MULTI_CH_INPUT+0x3a4>
 800ffe0:	fb23 cc08 	smlad	ip, r3, r8, ip
 800ffe4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010188 <D128_MULTI_CH_INPUT+0x3a8>
 800ffe8:	fb23 7708 	smlad	r7, r3, r8, r7
 800ffec:	fa5f f38e 	uxtb.w	r3, lr
 800fff0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800fff4:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 800fff8:	f3ce 2107 	ubfx	r1, lr, #8, #8
 800fffc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8010000:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8010004:	f3c1 0809 	ubfx	r8, r1, #0, #10
 8010008:	ea05 4303 	and.w	r3, r5, r3, lsl #16
 801000c:	ea43 0308 	orr.w	r3, r3, r8
 8010010:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 801018c <D128_MULTI_CH_INPUT+0x3ac>
 8010014:	fb23 6608 	smlad	r6, r3, r8, r6
 8010018:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 8010190 <D128_MULTI_CH_INPUT+0x3b0>
 801001c:	fb23 cc08 	smlad	ip, r3, r8, ip
 8010020:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8010194 <D128_MULTI_CH_INPUT+0x3b4>
 8010024:	fb23 7308 	smlad	r3, r3, r8, r7
 8010028:	f3ce 4707 	ubfx	r7, lr, #16, #8
 801002c:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8010030:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8010034:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8010038:	f854 102e 	ldr.w	r1, [r4, lr, lsl #2]
 801003c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8010040:	f3c1 0e09 	ubfx	lr, r1, #0, #10
 8010044:	ea05 4707 	and.w	r7, r5, r7, lsl #16
 8010048:	ea47 070e 	orr.w	r7, r7, lr
 801004c:	f44f 3e80 	mov.w	lr, #65536	@ 0x10000
 8010050:	fb27 660e 	smlad	r6, r7, lr, r6
 8010054:	f8df e140 	ldr.w	lr, [pc, #320]	@ 8010198 <D128_MULTI_CH_INPUT+0x3b8>
 8010058:	fb27 c20e 	smlad	r2, r7, lr, ip
 801005c:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 801019c <D128_MULTI_CH_INPUT+0x3bc>
 8010060:	9203      	str	r2, [sp, #12]
 8010062:	fb27 330c 	smlad	r3, r7, ip, r3
 8010066:	9a08      	ldr	r2, [sp, #32]
 8010068:	9304      	str	r3, [sp, #16]
 801006a:	f5a6 1380 	sub.w	r3, r6, #1048576	@ 0x100000
 801006e:	b162      	cbz	r2, 801008a <D128_MULTI_CH_INPUT+0x2aa>
 8010070:	9f05      	ldr	r7, [sp, #20]
 8010072:	441f      	add	r7, r3
 8010074:	463e      	mov	r6, r7
 8010076:	9f06      	ldr	r7, [sp, #24]
 8010078:	9306      	str	r3, [sp, #24]
 801007a:	1bf6      	subs	r6, r6, r7
 801007c:	2300      	movs	r3, #0
 801007e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8010082:	fbc6 7302 	smlal	r7, r3, r6, r2
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	9305      	str	r3, [sp, #20]
 801008a:	9a02      	ldr	r2, [sp, #8]
 801008c:	9e01      	ldr	r6, [sp, #4]
 801008e:	b297      	uxth	r7, r2
 8010090:	8cb6      	ldrh	r6, [r6, #36]	@ 0x24
 8010092:	3201      	adds	r2, #1
 8010094:	9202      	str	r2, [sp, #8]
 8010096:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010098:	01db      	lsls	r3, r3, #7
 801009a:	fb06 f707 	mul.w	r7, r6, r7
 801009e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80100a2:	2600      	movs	r6, #0
 80100a4:	fbc3 c602 	smlal	ip, r6, r3, r2
 80100a8:	9b07      	ldr	r3, [sp, #28]
 80100aa:	10b6      	asrs	r6, r6, #2
 80100ac:	f306 060f 	ssat	r6, #16, r6
 80100b0:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
 80100b4:	9e01      	ldr	r6, [sp, #4]
 80100b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80100ba:	8c76      	ldrh	r6, [r6, #34]	@ 0x22
 80100bc:	429e      	cmp	r6, r3
 80100be:	d934      	bls.n	801012a <D128_MULTI_CH_INPUT+0x34a>
 80100c0:	9b01      	ldr	r3, [sp, #4]
 80100c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	f47f aea6 	bne.w	800fe16 <D128_MULTI_CH_INPUT+0x36>
 80100ca:	f890 c004 	ldrb.w	ip, [r0, #4]
 80100ce:	7883      	ldrb	r3, [r0, #2]
 80100d0:	7b07      	ldrb	r7, [r0, #12]
 80100d2:	f890 8014 	ldrb.w	r8, [r0, #20]
 80100d6:	f890 e01c 	ldrb.w	lr, [r0, #28]
 80100da:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80100de:	eb0c 2c03 	add.w	ip, ip, r3, lsl #8
 80100e2:	7a83      	ldrb	r3, [r0, #10]
 80100e4:	043f      	lsls	r7, r7, #16
 80100e6:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80100ea:	7c83      	ldrb	r3, [r0, #18]
 80100ec:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80100f0:	eb08 2803 	add.w	r8, r8, r3, lsl #8
 80100f4:	7e83      	ldrb	r3, [r0, #26]
 80100f6:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80100fa:	eb0e 2e03 	add.w	lr, lr, r3, lsl #8
 80100fe:	7803      	ldrb	r3, [r0, #0]
 8010100:	449c      	add	ip, r3
 8010102:	7a03      	ldrb	r3, [r0, #8]
 8010104:	441f      	add	r7, r3
 8010106:	7c03      	ldrb	r3, [r0, #16]
 8010108:	4498      	add	r8, r3
 801010a:	7e03      	ldrb	r3, [r0, #24]
 801010c:	449e      	add	lr, r3
 801010e:	7983      	ldrb	r3, [r0, #6]
 8010110:	eb0c 6c03 	add.w	ip, ip, r3, lsl #24
 8010114:	7b83      	ldrb	r3, [r0, #14]
 8010116:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 801011a:	7d83      	ldrb	r3, [r0, #22]
 801011c:	eb08 6803 	add.w	r8, r8, r3, lsl #24
 8010120:	7f83      	ldrb	r3, [r0, #30]
 8010122:	3020      	adds	r0, #32
 8010124:	eb0e 6e03 	add.w	lr, lr, r3, lsl #24
 8010128:	e6bc      	b.n	800fea4 <D128_MULTI_CH_INPUT+0xc4>
 801012a:	9a01      	ldr	r2, [sp, #4]
 801012c:	9b04      	ldr	r3, [sp, #16]
 801012e:	6093      	str	r3, [r2, #8]
 8010130:	9b03      	ldr	r3, [sp, #12]
 8010132:	60d3      	str	r3, [r2, #12]
 8010134:	9b05      	ldr	r3, [sp, #20]
 8010136:	6153      	str	r3, [r2, #20]
 8010138:	9b06      	ldr	r3, [sp, #24]
 801013a:	6191      	str	r1, [r2, #24]
 801013c:	6113      	str	r3, [r2, #16]
 801013e:	b00b      	add	sp, #44	@ 0x2c
 8010140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010144:	03ff0000 	.word	0x03ff0000
 8010148:	00780069 	.word	0x00780069
 801014c:	00880096 	.word	0x00880096
 8010150:	005b004e 	.word	0x005b004e
 8010154:	00a200ac 	.word	0x00a200ac
 8010158:	00030006 	.word	0x00030006
 801015c:	00420037 	.word	0x00420037
 8010160:	00b400ba 	.word	0x00b400ba
 8010164:	000a000f 	.word	0x000a000f
 8010168:	002d0024 	.word	0x002d0024
 801016c:	00c000be 	.word	0x00c000be
 8010170:	0024002d 	.word	0x0024002d
 8010174:	000f000a 	.word	0x000f000a
 8010178:	00be00c0 	.word	0x00be00c0
 801017c:	0015001c 	.word	0x0015001c
 8010180:	001c0015 	.word	0x001c0015
 8010184:	00ba00b4 	.word	0x00ba00b4
 8010188:	00370042 	.word	0x00370042
 801018c:	00060003 	.word	0x00060003
 8010190:	00ac00a2 	.word	0x00ac00a2
 8010194:	004e005b 	.word	0x004e005b
 8010198:	00960088 	.word	0x00960088
 801019c:	00690078 	.word	0x00690078

080101a0 <D16_MONO_INPUT>:
 80101a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a4:	b087      	sub	sp, #28
 80101a6:	4682      	mov	sl, r0
 80101a8:	e9d2 0502 	ldrd	r0, r5, [r2, #8]
 80101ac:	9101      	str	r1, [sp, #4]
 80101ae:	8c51      	ldrh	r1, [r2, #34]	@ 0x22
 80101b0:	6993      	ldr	r3, [r2, #24]
 80101b2:	9505      	str	r5, [sp, #20]
 80101b4:	e9d2 6404 	ldrd	r6, r4, [r2, #16]
 80101b8:	2900      	cmp	r1, #0
 80101ba:	d055      	beq.n	8010268 <D16_MONO_INPUT+0xc8>
 80101bc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80101be:	9104      	str	r1, [sp, #16]
 80101c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80101c2:	9103      	str	r1, [sp, #12]
 80101c4:	9904      	ldr	r1, [sp, #16]
 80101c6:	69d7      	ldr	r7, [r2, #28]
 80101c8:	6855      	ldr	r5, [r2, #4]
 80101ca:	9702      	str	r7, [sp, #8]
 80101cc:	f011 0120 	ands.w	r1, r1, #32
 80101d0:	d153      	bne.n	801027a <D16_MONO_INPUT+0xda>
 80101d2:	2f00      	cmp	r7, #0
 80101d4:	f000 80da 	beq.w	801038c <D16_MONO_INPUT+0x1ec>
 80101d8:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 80101dc:	4689      	mov	r9, r1
 80101de:	9504      	str	r5, [sp, #16]
 80101e0:	f83a eb02 	ldrh.w	lr, [sl], #2
 80101e4:	9d04      	ldr	r5, [sp, #16]
 80101e6:	fa5f fc8e 	uxtb.w	ip, lr
 80101ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80101ee:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80101f2:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 80101f6:	f855 302e 	ldr.w	r3, [r5, lr, lsl #2]
 80101fa:	4d83      	ldr	r5, [pc, #524]	@ (8010408 <D16_MONO_INPUT+0x268>)
 80101fc:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 8010200:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 8010204:	ea05 4c0c 	and.w	ip, r5, ip, lsl #16
 8010208:	ea4c 0c0e 	orr.w	ip, ip, lr
 801020c:	4d7f      	ldr	r5, [pc, #508]	@ (801040c <D16_MONO_INPUT+0x26c>)
 801020e:	fb2c 0e05 	smlad	lr, ip, r5, r0
 8010212:	487f      	ldr	r0, [pc, #508]	@ (8010410 <D16_MONO_INPUT+0x270>)
 8010214:	fb2c f000 	smuad	r0, ip, r0
 8010218:	46b0      	mov	r8, r6
 801021a:	f5ae 6600 	sub.w	r6, lr, #2048	@ 0x800
 801021e:	9d02      	ldr	r5, [sp, #8]
 8010220:	4434      	add	r4, r6
 8010222:	eba4 0c08 	sub.w	ip, r4, r8
 8010226:	46be      	mov	lr, r7
 8010228:	464c      	mov	r4, r9
 801022a:	fbc5 e40c 	smlal	lr, r4, r5, ip
 801022e:	f8b2 e024 	ldrh.w	lr, [r2, #36]	@ 0x24
 8010232:	9d03      	ldr	r5, [sp, #12]
 8010234:	fa1f fc81 	uxth.w	ip, r1
 8010238:	fb0c fe0e 	mul.w	lr, ip, lr
 801023c:	ea4f 4844 	mov.w	r8, r4, lsl #17
 8010240:	46bb      	mov	fp, r7
 8010242:	46cc      	mov	ip, r9
 8010244:	fbc5 bc08 	smlal	fp, ip, r5, r8
 8010248:	9d01      	ldr	r5, [sp, #4]
 801024a:	ea4f 0cac 	mov.w	ip, ip, asr #2
 801024e:	f30c 0c0f 	ssat	ip, #16, ip
 8010252:	f825 c01e 	strh.w	ip, [r5, lr, lsl #1]
 8010256:	3101      	adds	r1, #1
 8010258:	f8b2 e022 	ldrh.w	lr, [r2, #34]	@ 0x22
 801025c:	fa1f fc81 	uxth.w	ip, r1
 8010260:	45e6      	cmp	lr, ip
 8010262:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8010266:	d8bb      	bhi.n	80101e0 <D16_MONO_INPUT+0x40>
 8010268:	9905      	ldr	r1, [sp, #20]
 801026a:	6090      	str	r0, [r2, #8]
 801026c:	e9c2 4305 	strd	r4, r3, [r2, #20]
 8010270:	60d1      	str	r1, [r2, #12]
 8010272:	6116      	str	r6, [r2, #16]
 8010274:	b007      	add	sp, #28
 8010276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801027a:	2f00      	cmp	r7, #0
 801027c:	d13d      	bne.n	80102fa <D16_MONO_INPUT+0x15a>
 801027e:	46bc      	mov	ip, r7
 8010280:	46be      	mov	lr, r7
 8010282:	9604      	str	r6, [sp, #16]
 8010284:	f8df 9184 	ldr.w	r9, [pc, #388]	@ 801040c <D16_MONO_INPUT+0x26c>
 8010288:	9e03      	ldr	r6, [sp, #12]
 801028a:	9f01      	ldr	r7, [sp, #4]
 801028c:	9402      	str	r4, [sp, #8]
 801028e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8010292:	f83a 4b02 	ldrh.w	r4, [sl], #2
 8010296:	ba64      	rev16	r4, r4
 8010298:	b2e1      	uxtb	r1, r4
 801029a:	0a24      	lsrs	r4, r4, #8
 801029c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80102a0:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80102a4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80102a8:	4c57      	ldr	r4, [pc, #348]	@ (8010408 <D16_MONO_INPUT+0x268>)
 80102aa:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 80102ae:	ea04 4101 	and.w	r1, r4, r1, lsl #16
 80102b2:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80102b6:	430c      	orrs	r4, r1
 80102b8:	fb24 0109 	smlad	r1, r4, r9, r0
 80102bc:	4854      	ldr	r0, [pc, #336]	@ (8010410 <D16_MONO_INPUT+0x270>)
 80102be:	fb24 f000 	smuad	r0, r4, r0
 80102c2:	f5a1 6100 	sub.w	r1, r1, #2048	@ 0x800
 80102c6:	0409      	lsls	r1, r1, #16
 80102c8:	46c3      	mov	fp, r8
 80102ca:	4674      	mov	r4, lr
 80102cc:	fbc6 b401 	smlal	fp, r4, r6, r1
 80102d0:	f8b2 b024 	ldrh.w	fp, [r2, #36]	@ 0x24
 80102d4:	10a1      	asrs	r1, r4, #2
 80102d6:	fa1f f48c 	uxth.w	r4, ip
 80102da:	fb0b f404 	mul.w	r4, fp, r4
 80102de:	f301 010f 	ssat	r1, #16, r1
 80102e2:	f827 1014 	strh.w	r1, [r7, r4, lsl #1]
 80102e6:	f10c 0c01 	add.w	ip, ip, #1
 80102ea:	8c54      	ldrh	r4, [r2, #34]	@ 0x22
 80102ec:	fa1f f18c 	uxth.w	r1, ip
 80102f0:	428c      	cmp	r4, r1
 80102f2:	d8ce      	bhi.n	8010292 <D16_MONO_INPUT+0xf2>
 80102f4:	9c02      	ldr	r4, [sp, #8]
 80102f6:	9e04      	ldr	r6, [sp, #16]
 80102f8:	e7b6      	b.n	8010268 <D16_MONO_INPUT+0xc8>
 80102fa:	2700      	movs	r7, #0
 80102fc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010300:	46b9      	mov	r9, r7
 8010302:	9504      	str	r5, [sp, #16]
 8010304:	f83a eb02 	ldrh.w	lr, [sl], #2
 8010308:	fa9e fe9e 	rev16.w	lr, lr
 801030c:	9d04      	ldr	r5, [sp, #16]
 801030e:	fa5f f18e 	uxtb.w	r1, lr
 8010312:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8010316:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801031a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 801031e:	f855 302e 	ldr.w	r3, [r5, lr, lsl #2]
 8010322:	4d39      	ldr	r5, [pc, #228]	@ (8010408 <D16_MONO_INPUT+0x268>)
 8010324:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 8010328:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 801032c:	ea05 4101 	and.w	r1, r5, r1, lsl #16
 8010330:	ea41 010e 	orr.w	r1, r1, lr
 8010334:	4d35      	ldr	r5, [pc, #212]	@ (801040c <D16_MONO_INPUT+0x26c>)
 8010336:	fb21 0e05 	smlad	lr, r1, r5, r0
 801033a:	4835      	ldr	r0, [pc, #212]	@ (8010410 <D16_MONO_INPUT+0x270>)
 801033c:	fb21 f000 	smuad	r0, r1, r0
 8010340:	46b0      	mov	r8, r6
 8010342:	f5ae 6600 	sub.w	r6, lr, #2048	@ 0x800
 8010346:	9d02      	ldr	r5, [sp, #8]
 8010348:	4434      	add	r4, r6
 801034a:	eba4 0108 	sub.w	r1, r4, r8
 801034e:	46e6      	mov	lr, ip
 8010350:	464c      	mov	r4, r9
 8010352:	fbc1 e405 	smlal	lr, r4, r1, r5
 8010356:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8010358:	9d03      	ldr	r5, [sp, #12]
 801035a:	fa1f fe87 	uxth.w	lr, r7
 801035e:	fb01 fe0e 	mul.w	lr, r1, lr
 8010362:	ea4f 4844 	mov.w	r8, r4, lsl #17
 8010366:	46e3      	mov	fp, ip
 8010368:	4649      	mov	r1, r9
 801036a:	fbc8 b105 	smlal	fp, r1, r8, r5
 801036e:	9d01      	ldr	r5, [sp, #4]
 8010370:	1089      	asrs	r1, r1, #2
 8010372:	f301 010f 	ssat	r1, #16, r1
 8010376:	f825 101e 	strh.w	r1, [r5, lr, lsl #1]
 801037a:	3701      	adds	r7, #1
 801037c:	f8b2 e022 	ldrh.w	lr, [r2, #34]	@ 0x22
 8010380:	b2b9      	uxth	r1, r7
 8010382:	458e      	cmp	lr, r1
 8010384:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8010388:	d8bc      	bhi.n	8010304 <D16_MONO_INPUT+0x164>
 801038a:	e76d      	b.n	8010268 <D16_MONO_INPUT+0xc8>
 801038c:	9604      	str	r6, [sp, #16]
 801038e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 801040c <D16_MONO_INPUT+0x26c>
 8010392:	9e03      	ldr	r6, [sp, #12]
 8010394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010398:	9402      	str	r4, [sp, #8]
 801039a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801039e:	f83a cb02 	ldrh.w	ip, [sl], #2
 80103a2:	4f19      	ldr	r7, [pc, #100]	@ (8010408 <D16_MONO_INPUT+0x268>)
 80103a4:	fa5f f48c 	uxtb.w	r4, ip
 80103a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80103ac:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80103b0:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80103b4:	f855 302c 	ldr.w	r3, [r5, ip, lsl #2]
 80103b8:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 80103bc:	f3c3 0c09 	ubfx	ip, r3, #0, #10
 80103c0:	ea07 4404 	and.w	r4, r7, r4, lsl #16
 80103c4:	ea44 0c0c 	orr.w	ip, r4, ip
 80103c8:	fb2c 0409 	smlad	r4, ip, r9, r0
 80103cc:	4810      	ldr	r0, [pc, #64]	@ (8010410 <D16_MONO_INPUT+0x270>)
 80103ce:	fb2c f000 	smuad	r0, ip, r0
 80103d2:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80103d6:	f8b2 b024 	ldrh.w	fp, [r2, #36]	@ 0x24
 80103da:	0424      	lsls	r4, r4, #16
 80103dc:	46c4      	mov	ip, r8
 80103de:	2700      	movs	r7, #0
 80103e0:	fbc6 c704 	smlal	ip, r7, r6, r4
 80103e4:	fa1f fc81 	uxth.w	ip, r1
 80103e8:	fb0b fc0c 	mul.w	ip, fp, ip
 80103ec:	10bc      	asrs	r4, r7, #2
 80103ee:	f304 040f 	ssat	r4, #16, r4
 80103f2:	f82e 401c 	strh.w	r4, [lr, ip, lsl #1]
 80103f6:	3101      	adds	r1, #1
 80103f8:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 80103fc:	b28c      	uxth	r4, r1
 80103fe:	45a4      	cmp	ip, r4
 8010400:	d8cd      	bhi.n	801039e <D16_MONO_INPUT+0x1fe>
 8010402:	9c02      	ldr	r4, [sp, #8]
 8010404:	9e04      	ldr	r6, [sp, #16]
 8010406:	e72f      	b.n	8010268 <D16_MONO_INPUT+0xc8>
 8010408:	03ff0000 	.word	0x03ff0000
 801040c:	00030001 	.word	0x00030001
 8010410:	00010003 	.word	0x00010003

08010414 <D24_MONO_INPUT>:
 8010414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	e9d2 3804 	ldrd	r3, r8, [r2, #16]
 801041c:	b087      	sub	sp, #28
 801041e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010422:	8c51      	ldrh	r1, [r2, #34]	@ 0x22
 8010424:	6993      	ldr	r3, [r2, #24]
 8010426:	e9d2 e402 	ldrd	lr, r4, [r2, #8]
 801042a:	2900      	cmp	r1, #0
 801042c:	f000 8082 	beq.w	8010534 <D24_MONO_INPUT+0x120>
 8010430:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8010432:	6857      	ldr	r7, [r2, #4]
 8010434:	9200      	str	r2, [sp, #0]
 8010436:	f001 0120 	and.w	r1, r1, #32
 801043a:	9103      	str	r1, [sp, #12]
 801043c:	69d1      	ldr	r1, [r2, #28]
 801043e:	9104      	str	r1, [sp, #16]
 8010440:	f04f 0c00 	mov.w	ip, #0
 8010444:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8010446:	9105      	str	r1, [sp, #20]
 8010448:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 801044c:	4661      	mov	r1, ip
 801044e:	46e1      	mov	r9, ip
 8010450:	e05b      	b.n	801050a <D24_MONO_INPUT+0xf6>
 8010452:	07ca      	lsls	r2, r1, #31
 8010454:	d465      	bmi.n	8010522 <D24_MONO_INPUT+0x10e>
 8010456:	78c6      	ldrb	r6, [r0, #3]
 8010458:	7801      	ldrb	r1, [r0, #0]
 801045a:	0436      	lsls	r6, r6, #16
 801045c:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 8010460:	7841      	ldrb	r1, [r0, #1]
 8010462:	3002      	adds	r0, #2
 8010464:	440e      	add	r6, r1
 8010466:	b2f1      	uxtb	r1, r6
 8010468:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801046c:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8010470:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8010474:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8010478:	eb03 2a91 	add.w	sl, r3, r1, lsr #10
 801047c:	4b32      	ldr	r3, [pc, #200]	@ (8010548 <D24_MONO_INPUT+0x134>)
 801047e:	ea03 4101 	and.w	r1, r3, r1, lsl #16
 8010482:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8010486:	4319      	orrs	r1, r3
 8010488:	4b30      	ldr	r3, [pc, #192]	@ (801054c <D24_MONO_INPUT+0x138>)
 801048a:	fb21 4303 	smlad	r3, r1, r3, r4
 801048e:	4a30      	ldr	r2, [pc, #192]	@ (8010550 <D24_MONO_INPUT+0x13c>)
 8010490:	fb21 e402 	smlad	r4, r1, r2, lr
 8010494:	2201      	movs	r2, #1
 8010496:	fb21 f102 	smuad	r1, r1, r2
 801049a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801049e:	9a01      	ldr	r2, [sp, #4]
 80104a0:	f5a3 56d8 	sub.w	r6, r3, #6912	@ 0x1b00
 80104a4:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
 80104a8:	eb06 0e08 	add.w	lr, r6, r8
 80104ac:	ebae 0e02 	sub.w	lr, lr, r2
 80104b0:	9a04      	ldr	r2, [sp, #16]
 80104b2:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80104b6:	46cb      	mov	fp, r9
 80104b8:	46aa      	mov	sl, r5
 80104ba:	fbce ab02 	smlal	sl, fp, lr, r2
 80104be:	f3c3 0e09 	ubfx	lr, r3, #0, #10
 80104c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80104c6:	fa1f fa8c 	uxth.w	sl, ip
 80104ca:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 80104ce:	f10c 0c01 	add.w	ip, ip, #1
 80104d2:	448e      	add	lr, r1
 80104d4:	b11a      	cbz	r2, 80104de <D24_MONO_INPUT+0xca>
 80104d6:	ea4f 084b 	mov.w	r8, fp, lsl #1
 80104da:	9601      	str	r6, [sp, #4]
 80104dc:	4646      	mov	r6, r8
 80104de:	9a05      	ldr	r2, [sp, #20]
 80104e0:	03b6      	lsls	r6, r6, #14
 80104e2:	46ab      	mov	fp, r5
 80104e4:	4649      	mov	r1, r9
 80104e6:	fbc6 b102 	smlal	fp, r1, r6, r2
 80104ea:	9a00      	ldr	r2, [sp, #0]
 80104ec:	8c96      	ldrh	r6, [r2, #36]	@ 0x24
 80104ee:	9a02      	ldr	r2, [sp, #8]
 80104f0:	fb06 fa0a 	mul.w	sl, r6, sl
 80104f4:	1089      	asrs	r1, r1, #2
 80104f6:	f301 010f 	ssat	r1, #16, r1
 80104fa:	f822 101a 	strh.w	r1, [r2, sl, lsl #1]
 80104fe:	9a00      	ldr	r2, [sp, #0]
 8010500:	8c56      	ldrh	r6, [r2, #34]	@ 0x22
 8010502:	fa1f f18c 	uxth.w	r1, ip
 8010506:	428e      	cmp	r6, r1
 8010508:	d914      	bls.n	8010534 <D24_MONO_INPUT+0x120>
 801050a:	9a03      	ldr	r2, [sp, #12]
 801050c:	2a00      	cmp	r2, #0
 801050e:	d1a0      	bne.n	8010452 <D24_MONO_INPUT+0x3e>
 8010510:	7886      	ldrb	r6, [r0, #2]
 8010512:	7841      	ldrb	r1, [r0, #1]
 8010514:	0436      	lsls	r6, r6, #16
 8010516:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 801051a:	f810 1b03 	ldrb.w	r1, [r0], #3
 801051e:	440e      	add	r6, r1
 8010520:	e7a1      	b.n	8010466 <D24_MONO_INPUT+0x52>
 8010522:	7886      	ldrb	r6, [r0, #2]
 8010524:	78c1      	ldrb	r1, [r0, #3]
 8010526:	0436      	lsls	r6, r6, #16
 8010528:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 801052c:	f810 1b04 	ldrb.w	r1, [r0], #4
 8010530:	440e      	add	r6, r1
 8010532:	e798      	b.n	8010466 <D24_MONO_INPUT+0x52>
 8010534:	e9c2 8305 	strd	r8, r3, [r2, #20]
 8010538:	9b01      	ldr	r3, [sp, #4]
 801053a:	6113      	str	r3, [r2, #16]
 801053c:	e9c2 e402 	strd	lr, r4, [r2, #8]
 8010540:	b007      	add	sp, #28
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010546:	bf00      	nop
 8010548:	03ff0000 	.word	0x03ff0000
 801054c:	00030001 	.word	0x00030001
 8010550:	00060007 	.word	0x00060007

08010554 <D32_MONO_INPUT>:
 8010554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010558:	b087      	sub	sp, #28
 801055a:	e9d2 9704 	ldrd	r9, r7, [r2, #16]
 801055e:	9102      	str	r1, [sp, #8]
 8010560:	8c51      	ldrh	r1, [r2, #34]	@ 0x22
 8010562:	6993      	ldr	r3, [r2, #24]
 8010564:	e9d2 4a02 	ldrd	r4, sl, [r2, #8]
 8010568:	2900      	cmp	r1, #0
 801056a:	d073      	beq.n	8010654 <D32_MONO_INPUT+0x100>
 801056c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801056e:	6856      	ldr	r6, [r2, #4]
 8010570:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 8010678 <D32_MONO_INPUT+0x124>
 8010574:	9001      	str	r0, [sp, #4]
 8010576:	f001 0120 	and.w	r1, r1, #32
 801057a:	9103      	str	r1, [sp, #12]
 801057c:	69d1      	ldr	r1, [r2, #28]
 801057e:	9104      	str	r1, [sp, #16]
 8010580:	f04f 0e00 	mov.w	lr, #0
 8010584:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8010586:	9105      	str	r1, [sp, #20]
 8010588:	46f3      	mov	fp, lr
 801058a:	9901      	ldr	r1, [sp, #4]
 801058c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010590:	9101      	str	r1, [sp, #4]
 8010592:	9903      	ldr	r1, [sp, #12]
 8010594:	b101      	cbz	r1, 8010598 <D32_MONO_INPUT+0x44>
 8010596:	ba6d      	rev16	r5, r5
 8010598:	b2e9      	uxtb	r1, r5
 801059a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801059e:	eb01 2c93 	add.w	ip, r1, r3, lsr #10
 80105a2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80105a6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80105aa:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 80105ae:	f3c3 0109 	ubfx	r1, r3, #0, #10
 80105b2:	ea08 4c0c 	and.w	ip, r8, ip, lsl #16
 80105b6:	ea4c 0c01 	orr.w	ip, ip, r1
 80105ba:	492b      	ldr	r1, [pc, #172]	@ (8010668 <D32_MONO_INPUT+0x114>)
 80105bc:	fb2c a101 	smlad	r1, ip, r1, sl
 80105c0:	482a      	ldr	r0, [pc, #168]	@ (801066c <D32_MONO_INPUT+0x118>)
 80105c2:	fb2c 4a00 	smlad	sl, ip, r0, r4
 80105c6:	2001      	movs	r0, #1
 80105c8:	fb2c f400 	smuad	r4, ip, r0
 80105cc:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80105d0:	0e2d      	lsrs	r5, r5, #24
 80105d2:	f856 c02c 	ldr.w	ip, [r6, ip, lsl #2]
 80105d6:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 80105da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80105de:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 80105e2:	ea08 450c 	and.w	r5, r8, ip, lsl #16
 80105e6:	f3c3 0c09 	ubfx	ip, r3, #0, #10
 80105ea:	ea45 050c 	orr.w	r5, r5, ip
 80105ee:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80105f2:	fb25 1100 	smlad	r1, r5, r0, r1
 80105f6:	481e      	ldr	r0, [pc, #120]	@ (8010670 <D32_MONO_INPUT+0x11c>)
 80105f8:	fb25 aa00 	smlad	sl, r5, r0, sl
 80105fc:	481d      	ldr	r0, [pc, #116]	@ (8010674 <D32_MONO_INPUT+0x120>)
 80105fe:	fb25 4400 	smlad	r4, r5, r0, r4
 8010602:	f5a1 4180 	sub.w	r1, r1, #16384	@ 0x4000
 8010606:	9804      	ldr	r0, [sp, #16]
 8010608:	19cd      	adds	r5, r1, r7
 801060a:	eba5 0509 	sub.w	r5, r5, r9
 801060e:	b138      	cbz	r0, 8010620 <D32_MONO_INPUT+0xcc>
 8010610:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010614:	465f      	mov	r7, fp
 8010616:	fbc5 c700 	smlal	ip, r7, r5, r0
 801061a:	007f      	lsls	r7, r7, #1
 801061c:	4689      	mov	r9, r1
 801061e:	4639      	mov	r1, r7
 8010620:	9805      	ldr	r0, [sp, #20]
 8010622:	0349      	lsls	r1, r1, #13
 8010624:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010628:	465d      	mov	r5, fp
 801062a:	fbc1 c500 	smlal	ip, r5, r1, r0
 801062e:	f8b2 c024 	ldrh.w	ip, [r2, #36]	@ 0x24
 8010632:	9802      	ldr	r0, [sp, #8]
 8010634:	10a9      	asrs	r1, r5, #2
 8010636:	fa1f f58e 	uxth.w	r5, lr
 801063a:	fb0c f505 	mul.w	r5, ip, r5
 801063e:	f301 010f 	ssat	r1, #16, r1
 8010642:	f820 1015 	strh.w	r1, [r0, r5, lsl #1]
 8010646:	f10e 0e01 	add.w	lr, lr, #1
 801064a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801064c:	fa1f f18e 	uxth.w	r1, lr
 8010650:	428d      	cmp	r5, r1
 8010652:	d89a      	bhi.n	801058a <D32_MONO_INPUT+0x36>
 8010654:	e9c2 4a02 	strd	r4, sl, [r2, #8]
 8010658:	e9c2 7305 	strd	r7, r3, [r2, #20]
 801065c:	f8c2 9010 	str.w	r9, [r2, #16]
 8010660:	b007      	add	sp, #28
 8010662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010666:	bf00      	nop
 8010668:	00060003 	.word	0x00060003
 801066c:	000a000c 	.word	0x000a000c
 8010670:	000c000a 	.word	0x000c000a
 8010674:	00030006 	.word	0x00030006
 8010678:	03ff0000 	.word	0x03ff0000

0801067c <D48_MONO_INPUT>:
 801067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010680:	8c53      	ldrh	r3, [r2, #34]	@ 0x22
 8010682:	b087      	sub	sp, #28
 8010684:	e9d2 9704 	ldrd	r9, r7, [r2, #16]
 8010688:	9102      	str	r1, [sp, #8]
 801068a:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 801068e:	6991      	ldr	r1, [r2, #24]
 8010690:	2b00      	cmp	r3, #0
 8010692:	f000 809b 	beq.w	80107cc <D48_MONO_INPUT+0x150>
 8010696:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8010698:	6856      	ldr	r6, [r2, #4]
 801069a:	f8df 815c 	ldr.w	r8, [pc, #348]	@ 80107f8 <D48_MONO_INPUT+0x17c>
 801069e:	9001      	str	r0, [sp, #4]
 80106a0:	f003 0320 	and.w	r3, r3, #32
 80106a4:	9303      	str	r3, [sp, #12]
 80106a6:	69d3      	ldr	r3, [r2, #28]
 80106a8:	9304      	str	r3, [sp, #16]
 80106aa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80106ac:	9305      	str	r3, [sp, #20]
 80106ae:	f04f 0e00 	mov.w	lr, #0
 80106b2:	9b01      	ldr	r3, [sp, #4]
 80106b4:	f853 ab06 	ldr.w	sl, [r3], #6
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	f833 cc02 	ldrh.w	ip, [r3, #-2]
 80106be:	9b03      	ldr	r3, [sp, #12]
 80106c0:	b11b      	cbz	r3, 80106ca <D48_MONO_INPUT+0x4e>
 80106c2:	fa9a fa9a 	rev16.w	sl, sl
 80106c6:	fa9c fc9c 	rev16.w	ip, ip
 80106ca:	fa5f f38a 	uxtb.w	r3, sl
 80106ce:	4844      	ldr	r0, [pc, #272]	@ (80107e0 <D48_MONO_INPUT+0x164>)
 80106d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80106d4:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 80106d8:	f3ca 2107 	ubfx	r1, sl, #8, #8
 80106dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80106e0:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80106e4:	f3c1 0b09 	ubfx	fp, r1, #0, #10
 80106e8:	ea08 4303 	and.w	r3, r8, r3, lsl #16
 80106ec:	ea43 030b 	orr.w	r3, r3, fp
 80106f0:	fb23 5500 	smlad	r5, r3, r0, r5
 80106f4:	483b      	ldr	r0, [pc, #236]	@ (80107e4 <D48_MONO_INPUT+0x168>)
 80106f6:	fb23 4400 	smlad	r4, r3, r0, r4
 80106fa:	f04f 0b01 	mov.w	fp, #1
 80106fe:	fb23 fb0b 	smuad	fp, r3, fp
 8010702:	f3ca 4307 	ubfx	r3, sl, #16, #8
 8010706:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 801070a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801070e:	4836      	ldr	r0, [pc, #216]	@ (80107e8 <D48_MONO_INPUT+0x16c>)
 8010710:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 8010714:	f856 102a 	ldr.w	r1, [r6, sl, lsl #2]
 8010718:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 801071c:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8010720:	ea08 4303 	and.w	r3, r8, r3, lsl #16
 8010724:	ea43 030a 	orr.w	r3, r3, sl
 8010728:	fb23 5a00 	smlad	sl, r3, r0, r5
 801072c:	f04f 151b 	mov.w	r5, #1769499	@ 0x1b001b
 8010730:	fb23 4505 	smlad	r5, r3, r5, r4
 8010734:	482d      	ldr	r0, [pc, #180]	@ (80107ec <D48_MONO_INPUT+0x170>)
 8010736:	fb23 b300 	smlad	r3, r3, r0, fp
 801073a:	fa5f f48c 	uxtb.w	r4, ip
 801073e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8010742:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8010746:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 801074a:	f856 102c 	ldr.w	r1, [r6, ip, lsl #2]
 801074e:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8010752:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 8010756:	ea08 4404 	and.w	r4, r8, r4, lsl #16
 801075a:	ea44 040c 	orr.w	r4, r4, ip
 801075e:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8010762:	fb24 ac0c 	smlad	ip, r4, ip, sl
 8010766:	4822      	ldr	r0, [pc, #136]	@ (80107f0 <D48_MONO_INPUT+0x174>)
 8010768:	fb24 5500 	smlad	r5, r4, r0, r5
 801076c:	4821      	ldr	r0, [pc, #132]	@ (80107f4 <D48_MONO_INPUT+0x178>)
 801076e:	fb24 3400 	smlad	r4, r4, r0, r3
 8010772:	f5ac 4c58 	sub.w	ip, ip, #55296	@ 0xd800
 8010776:	9804      	ldr	r0, [sp, #16]
 8010778:	eb0c 0307 	add.w	r3, ip, r7
 801077c:	eba3 0309 	sub.w	r3, r3, r9
 8010780:	b138      	cbz	r0, 8010792 <D48_MONO_INPUT+0x116>
 8010782:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8010786:	2700      	movs	r7, #0
 8010788:	fbc3 9700 	smlal	r9, r7, r3, r0
 801078c:	007f      	lsls	r7, r7, #1
 801078e:	46e1      	mov	r9, ip
 8010790:	46bc      	mov	ip, r7
 8010792:	9805      	ldr	r0, [sp, #20]
 8010794:	ea4f 2ccc 	mov.w	ip, ip, lsl #11
 8010798:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 801079c:	2300      	movs	r3, #0
 801079e:	fbcc a300 	smlal	sl, r3, ip, r0
 80107a2:	f8b2 a024 	ldrh.w	sl, [r2, #36]	@ 0x24
 80107a6:	9802      	ldr	r0, [sp, #8]
 80107a8:	fa1f fc8e 	uxth.w	ip, lr
 80107ac:	fb0a fc0c 	mul.w	ip, sl, ip
 80107b0:	109b      	asrs	r3, r3, #2
 80107b2:	f303 030f 	ssat	r3, #16, r3
 80107b6:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
 80107ba:	f10e 0e01 	add.w	lr, lr, #1
 80107be:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 80107c2:	fa1f f38e 	uxth.w	r3, lr
 80107c6:	459c      	cmp	ip, r3
 80107c8:	f63f af73 	bhi.w	80106b2 <D48_MONO_INPUT+0x36>
 80107cc:	e9c2 4502 	strd	r4, r5, [r2, #8]
 80107d0:	e9c2 7105 	strd	r7, r1, [r2, #20]
 80107d4:	f8c2 9010 	str.w	r9, [r2, #16]
 80107d8:	b007      	add	sp, #28
 80107da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107de:	bf00      	nop
 80107e0:	000f000a 	.word	0x000f000a
 80107e4:	00150019 	.word	0x00150019
 80107e8:	00060003 	.word	0x00060003
 80107ec:	00030006 	.word	0x00030006
 80107f0:	00190015 	.word	0x00190015
 80107f4:	000a000f 	.word	0x000a000f
 80107f8:	03ff0000 	.word	0x03ff0000

080107fc <D64_MONO_INPUT>:
 80107fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	8c53      	ldrh	r3, [r2, #34]	@ 0x22
 8010802:	b087      	sub	sp, #28
 8010804:	e9d2 8604 	ldrd	r8, r6, [r2, #16]
 8010808:	9102      	str	r1, [sp, #8]
 801080a:	e9d2 9402 	ldrd	r9, r4, [r2, #8]
 801080e:	6991      	ldr	r1, [r2, #24]
 8010810:	2b00      	cmp	r3, #0
 8010812:	f000 80b2 	beq.w	801097a <D64_MONO_INPUT+0x17e>
 8010816:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8010818:	6855      	ldr	r5, [r2, #4]
 801081a:	4f5c      	ldr	r7, [pc, #368]	@ (801098c <D64_MONO_INPUT+0x190>)
 801081c:	9001      	str	r0, [sp, #4]
 801081e:	f003 0320 	and.w	r3, r3, #32
 8010822:	9303      	str	r3, [sp, #12]
 8010824:	69d3      	ldr	r3, [r2, #28]
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 801082a:	9305      	str	r3, [sp, #20]
 801082c:	f04f 0e00 	mov.w	lr, #0
 8010830:	46a2      	mov	sl, r4
 8010832:	9801      	ldr	r0, [sp, #4]
 8010834:	f850 3b08 	ldr.w	r3, [r0], #8
 8010838:	9001      	str	r0, [sp, #4]
 801083a:	469c      	mov	ip, r3
 801083c:	9b03      	ldr	r3, [sp, #12]
 801083e:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8010842:	b113      	cbz	r3, 801084a <D64_MONO_INPUT+0x4e>
 8010844:	fa9c fc9c 	rev16.w	ip, ip
 8010848:	ba64      	rev16	r4, r4
 801084a:	fa5f f38c 	uxtb.w	r3, ip
 801084e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8010852:	eb03 2191 	add.w	r1, r3, r1, lsr #10
 8010856:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801085a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801085e:	eb03 2b91 	add.w	fp, r3, r1, lsr #10
 8010862:	f3cb 0309 	ubfx	r3, fp, #0, #10
 8010866:	ea07 4101 	and.w	r1, r7, r1, lsl #16
 801086a:	4319      	orrs	r1, r3
 801086c:	4b48      	ldr	r3, [pc, #288]	@ (8010990 <D64_MONO_INPUT+0x194>)
 801086e:	fb21 aa03 	smlad	sl, r1, r3, sl
 8010872:	4b48      	ldr	r3, [pc, #288]	@ (8010994 <D64_MONO_INPUT+0x198>)
 8010874:	fb21 9903 	smlad	r9, r1, r3, r9
 8010878:	2301      	movs	r3, #1
 801087a:	fb21 f103 	smuad	r1, r1, r3
 801087e:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8010882:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8010886:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801088a:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 801088e:	4842      	ldr	r0, [pc, #264]	@ (8010998 <D64_MONO_INPUT+0x19c>)
 8010890:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8010894:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8010898:	f3cc 0b09 	ubfx	fp, ip, #0, #10
 801089c:	ea07 4303 	and.w	r3, r7, r3, lsl #16
 80108a0:	ea43 030b 	orr.w	r3, r3, fp
 80108a4:	fb23 aa00 	smlad	sl, r3, r0, sl
 80108a8:	483c      	ldr	r0, [pc, #240]	@ (801099c <D64_MONO_INPUT+0x1a0>)
 80108aa:	fb23 9900 	smlad	r9, r3, r0, r9
 80108ae:	483c      	ldr	r0, [pc, #240]	@ (80109a0 <D64_MONO_INPUT+0x1a4>)
 80108b0:	fb23 1b00 	smlad	fp, r3, r0, r1
 80108b4:	b2e3      	uxtb	r3, r4
 80108b6:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80108ba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80108be:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80108c2:	4838      	ldr	r0, [pc, #224]	@ (80109a4 <D64_MONO_INPUT+0x1a8>)
 80108c4:	eb03 239c 	add.w	r3, r3, ip, lsr #10
 80108c8:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80108cc:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 80108d0:	ea07 4303 	and.w	r3, r7, r3, lsl #16
 80108d4:	ea43 030c 	orr.w	r3, r3, ip
 80108d8:	fb23 aa00 	smlad	sl, r3, r0, sl
 80108dc:	4832      	ldr	r0, [pc, #200]	@ (80109a8 <D64_MONO_INPUT+0x1ac>)
 80108de:	fb23 9900 	smlad	r9, r3, r0, r9
 80108e2:	4832      	ldr	r0, [pc, #200]	@ (80109ac <D64_MONO_INPUT+0x1b0>)
 80108e4:	fb23 b300 	smlad	r3, r3, r0, fp
 80108e8:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80108ec:	0e24      	lsrs	r4, r4, #24
 80108ee:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80108f2:	eb0c 2c91 	add.w	ip, ip, r1, lsr #10
 80108f6:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 80108fa:	eb01 219c 	add.w	r1, r1, ip, lsr #10
 80108fe:	ea07 440c 	and.w	r4, r7, ip, lsl #16
 8010902:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 8010906:	ea44 040c 	orr.w	r4, r4, ip
 801090a:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 801090e:	fb24 ac0c 	smlad	ip, r4, ip, sl
 8010912:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80109b0 <D64_MONO_INPUT+0x1b4>
 8010916:	fb24 9a0a 	smlad	sl, r4, sl, r9
 801091a:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 80109b4 <D64_MONO_INPUT+0x1b8>
 801091e:	fb24 3909 	smlad	r9, r4, r9, r3
 8010922:	f5ac 3c00 	sub.w	ip, ip, #131072	@ 0x20000
 8010926:	9804      	ldr	r0, [sp, #16]
 8010928:	eb0c 0306 	add.w	r3, ip, r6
 801092c:	eba3 0308 	sub.w	r3, r3, r8
 8010930:	b138      	cbz	r0, 8010942 <D64_MONO_INPUT+0x146>
 8010932:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8010936:	2600      	movs	r6, #0
 8010938:	fbc3 4600 	smlal	r4, r6, r3, r0
 801093c:	0076      	lsls	r6, r6, #1
 801093e:	46e0      	mov	r8, ip
 8010940:	46b4      	mov	ip, r6
 8010942:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8010944:	9805      	ldr	r0, [sp, #20]
 8010946:	fa1f f48e 	uxth.w	r4, lr
 801094a:	fb03 f404 	mul.w	r4, r3, r4
 801094e:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 8010952:	f04f 4b00 	mov.w	fp, #2147483648	@ 0x80000000
 8010956:	2300      	movs	r3, #0
 8010958:	fbcc b300 	smlal	fp, r3, ip, r0
 801095c:	9802      	ldr	r0, [sp, #8]
 801095e:	109b      	asrs	r3, r3, #2
 8010960:	f303 030f 	ssat	r3, #16, r3
 8010964:	f820 3014 	strh.w	r3, [r0, r4, lsl #1]
 8010968:	f10e 0e01 	add.w	lr, lr, #1
 801096c:	8c54      	ldrh	r4, [r2, #34]	@ 0x22
 801096e:	fa1f f38e 	uxth.w	r3, lr
 8010972:	429c      	cmp	r4, r3
 8010974:	f63f af5d 	bhi.w	8010832 <D64_MONO_INPUT+0x36>
 8010978:	4654      	mov	r4, sl
 801097a:	e9c2 9402 	strd	r9, r4, [r2, #8]
 801097e:	e9c2 6105 	strd	r6, r1, [r2, #20]
 8010982:	f8c2 8010 	str.w	r8, [r2, #16]
 8010986:	b007      	add	sp, #28
 8010988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098c:	03ff0000 	.word	0x03ff0000
 8010990:	001c0015 	.word	0x001c0015
 8010994:	0024002a 	.word	0x0024002a
 8010998:	000f000a 	.word	0x000f000a
 801099c:	002e0030 	.word	0x002e0030
 80109a0:	00030006 	.word	0x00030006
 80109a4:	00060003 	.word	0x00060003
 80109a8:	0030002e 	.word	0x0030002e
 80109ac:	000a000f 	.word	0x000a000f
 80109b0:	002a0024 	.word	0x002a0024
 80109b4:	0015001c 	.word	0x0015001c

080109b8 <D80_MONO_INPUT>:
 80109b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109bc:	e9d2 3704 	ldrd	r3, r7, [r2, #16]
 80109c0:	8c54      	ldrh	r4, [r2, #34]	@ 0x22
 80109c2:	b087      	sub	sp, #28
 80109c4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80109c8:	e9d2 1a02 	ldrd	r1, sl, [r2, #8]
 80109cc:	6993      	ldr	r3, [r2, #24]
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	f000 80d5 	beq.w	8010b7e <D80_MONO_INPUT+0x1c6>
 80109d4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80109d6:	69d5      	ldr	r5, [r2, #28]
 80109d8:	9504      	str	r5, [sp, #16]
 80109da:	f004 0420 	and.w	r4, r4, #32
 80109de:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 80109e0:	9403      	str	r4, [sp, #12]
 80109e2:	4e6b      	ldr	r6, [pc, #428]	@ (8010b90 <D80_MONO_INPUT+0x1d8>)
 80109e4:	6854      	ldr	r4, [r2, #4]
 80109e6:	9505      	str	r5, [sp, #20]
 80109e8:	f04f 0800 	mov.w	r8, #0
 80109ec:	9200      	str	r2, [sp, #0]
 80109ee:	6805      	ldr	r5, [r0, #0]
 80109f0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80109f4:	9a03      	ldr	r2, [sp, #12]
 80109f6:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 80109fa:	300a      	adds	r0, #10
 80109fc:	b122      	cbz	r2, 8010a08 <D80_MONO_INPUT+0x50>
 80109fe:	ba6d      	rev16	r5, r5
 8010a00:	fa9c fc9c 	rev16.w	ip, ip
 8010a04:	fa9e fe9e 	rev16.w	lr, lr
 8010a08:	fa5f f985 	uxtb.w	r9, r5
 8010a0c:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8010a10:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 8010a14:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8010a18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010a1c:	eb03 2b99 	add.w	fp, r3, r9, lsr #10
 8010a20:	f3cb 0309 	ubfx	r3, fp, #0, #10
 8010a24:	ea06 4909 	and.w	r9, r6, r9, lsl #16
 8010a28:	ea49 0903 	orr.w	r9, r9, r3
 8010a2c:	4b59      	ldr	r3, [pc, #356]	@ (8010b94 <D80_MONO_INPUT+0x1dc>)
 8010a2e:	fb29 aa03 	smlad	sl, r9, r3, sl
 8010a32:	4b59      	ldr	r3, [pc, #356]	@ (8010b98 <D80_MONO_INPUT+0x1e0>)
 8010a34:	fb29 1103 	smlad	r1, r9, r3, r1
 8010a38:	2301      	movs	r3, #1
 8010a3a:	fb29 f903 	smuad	r9, r9, r3
 8010a3e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8010a42:	0e2d      	lsrs	r5, r5, #24
 8010a44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010a48:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8010a4c:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8010a50:	eb05 2b93 	add.w	fp, r5, r3, lsr #10
 8010a54:	ea06 4503 	and.w	r5, r6, r3, lsl #16
 8010a58:	f3cb 0309 	ubfx	r3, fp, #0, #10
 8010a5c:	431d      	orrs	r5, r3
 8010a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8010b9c <D80_MONO_INPUT+0x1e4>)
 8010a60:	fb25 aa03 	smlad	sl, r5, r3, sl
 8010a64:	4b4e      	ldr	r3, [pc, #312]	@ (8010ba0 <D80_MONO_INPUT+0x1e8>)
 8010a66:	fb25 1103 	smlad	r1, r5, r3, r1
 8010a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8010ba4 <D80_MONO_INPUT+0x1ec>)
 8010a6c:	fb25 9503 	smlad	r5, r5, r3, r9
 8010a70:	fa5f f38c 	uxtb.w	r3, ip
 8010a74:	f3cc 2907 	ubfx	r9, ip, #8, #8
 8010a78:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010a7c:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8010a80:	4a49      	ldr	r2, [pc, #292]	@ (8010ba8 <D80_MONO_INPUT+0x1f0>)
 8010a82:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8010a86:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 8010a8a:	f3c9 0b09 	ubfx	fp, r9, #0, #10
 8010a8e:	ea06 4303 	and.w	r3, r6, r3, lsl #16
 8010a92:	ea43 030b 	orr.w	r3, r3, fp
 8010a96:	fb23 aa02 	smlad	sl, r3, r2, sl
 8010a9a:	f04f 1b4b 	mov.w	fp, #4915275	@ 0x4b004b
 8010a9e:	fb23 1b0b 	smlad	fp, r3, fp, r1
 8010aa2:	4a42      	ldr	r2, [pc, #264]	@ (8010bac <D80_MONO_INPUT+0x1f4>)
 8010aa4:	fb23 5302 	smlad	r3, r3, r2, r5
 8010aa8:	f3cc 4107 	ubfx	r1, ip, #16, #8
 8010aac:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 8010ab0:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8010ab4:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8010ab8:	4a3d      	ldr	r2, [pc, #244]	@ (8010bb0 <D80_MONO_INPUT+0x1f8>)
 8010aba:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8010abe:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8010ac2:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8010ac6:	ea06 4101 	and.w	r1, r6, r1, lsl #16
 8010aca:	ea41 010c 	orr.w	r1, r1, ip
 8010ace:	fb21 aa02 	smlad	sl, r1, r2, sl
 8010ad2:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 8010bb4 <D80_MONO_INPUT+0x1fc>
 8010ad6:	fb21 bc0c 	smlad	ip, r1, ip, fp
 8010ada:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8010bb8 <D80_MONO_INPUT+0x200>
 8010ade:	fb21 3909 	smlad	r9, r1, r9, r3
 8010ae2:	fa5f f38e 	uxtb.w	r3, lr
 8010ae6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8010aea:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010aee:	f854 302e 	ldr.w	r3, [r4, lr, lsl #2]
 8010af2:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8010af6:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 8010afa:	f3c3 0509 	ubfx	r5, r3, #0, #10
 8010afe:	ea06 4101 	and.w	r1, r6, r1, lsl #16
 8010b02:	4329      	orrs	r1, r5
 8010b04:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 8010b08:	fb21 a505 	smlad	r5, r1, r5, sl
 8010b0c:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 8010bbc <D80_MONO_INPUT+0x204>
 8010b10:	fb21 ca0a 	smlad	sl, r1, sl, ip
 8010b14:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8010bc0 <D80_MONO_INPUT+0x208>
 8010b18:	fb21 910c 	smlad	r1, r1, ip, r9
 8010b1c:	9a01      	ldr	r2, [sp, #4]
 8010b1e:	f5a5 357a 	sub.w	r5, r5, #256000	@ 0x3e800
 8010b22:	eb05 0c07 	add.w	ip, r5, r7
 8010b26:	ebac 0c02 	sub.w	ip, ip, r2
 8010b2a:	9a04      	ldr	r2, [sp, #16]
 8010b2c:	b13a      	cbz	r2, 8010b3e <D80_MONO_INPUT+0x186>
 8010b2e:	9501      	str	r5, [sp, #4]
 8010b30:	2700      	movs	r7, #0
 8010b32:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
 8010b36:	fbcc 5702 	smlal	r5, r7, ip, r2
 8010b3a:	007f      	lsls	r7, r7, #1
 8010b3c:	463d      	mov	r5, r7
 8010b3e:	9a00      	ldr	r2, [sp, #0]
 8010b40:	f8b2 c024 	ldrh.w	ip, [r2, #36]	@ 0x24
 8010b44:	9a05      	ldr	r2, [sp, #20]
 8010b46:	fa1f fe88 	uxth.w	lr, r8
 8010b4a:	026d      	lsls	r5, r5, #9
 8010b4c:	fb0c fe0e 	mul.w	lr, ip, lr
 8010b50:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8010b54:	f04f 0c00 	mov.w	ip, #0
 8010b58:	fbc5 9c02 	smlal	r9, ip, r5, r2
 8010b5c:	9a02      	ldr	r2, [sp, #8]
 8010b5e:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8010b62:	f30c 0c0f 	ssat	ip, #16, ip
 8010b66:	f822 c01e 	strh.w	ip, [r2, lr, lsl #1]
 8010b6a:	9a00      	ldr	r2, [sp, #0]
 8010b6c:	f108 0801 	add.w	r8, r8, #1
 8010b70:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 8010b74:	fa1f f588 	uxth.w	r5, r8
 8010b78:	45ac      	cmp	ip, r5
 8010b7a:	f63f af38 	bhi.w	80109ee <D80_MONO_INPUT+0x36>
 8010b7e:	e9c2 7305 	strd	r7, r3, [r2, #20]
 8010b82:	9b01      	ldr	r3, [sp, #4]
 8010b84:	6113      	str	r3, [r2, #16]
 8010b86:	e9c2 1a02 	strd	r1, sl, [r2, #8]
 8010b8a:	b007      	add	sp, #28
 8010b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b90:	03ff0000 	.word	0x03ff0000
 8010b94:	002d0024 	.word	0x002d0024
 8010b98:	0037003f 	.word	0x0037003f
 8010b9c:	001c0015 	.word	0x001c0015
 8010ba0:	00450049 	.word	0x00450049
 8010ba4:	00030006 	.word	0x00030006
 8010ba8:	000f000a 	.word	0x000f000a
 8010bac:	000a000f 	.word	0x000a000f
 8010bb0:	00060003 	.word	0x00060003
 8010bb4:	00490045 	.word	0x00490045
 8010bb8:	0015001c 	.word	0x0015001c
 8010bbc:	003f0037 	.word	0x003f0037
 8010bc0:	0024002d 	.word	0x0024002d

08010bc4 <D128_MONO_INPUT>:
 8010bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc8:	b089      	sub	sp, #36	@ 0x24
 8010bca:	6953      	ldr	r3, [r2, #20]
 8010bcc:	9302      	str	r3, [sp, #8]
 8010bce:	4690      	mov	r8, r2
 8010bd0:	6913      	ldr	r3, [r2, #16]
 8010bd2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8010bd4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8010bd8:	e9d8 1c02 	ldrd	r1, ip, [r8, #8]
 8010bdc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010be0:	2a00      	cmp	r2, #0
 8010be2:	f000 8129 	beq.w	8010e38 <D128_MONO_INPUT+0x274>
 8010be6:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8010bea:	4c9a      	ldr	r4, [pc, #616]	@ (8010e54 <D128_MONO_INPUT+0x290>)
 8010bec:	f002 0220 	and.w	r2, r2, #32
 8010bf0:	9205      	str	r2, [sp, #20]
 8010bf2:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8010bf6:	9206      	str	r2, [sp, #24]
 8010bf8:	f100 0e10 	add.w	lr, r0, #16
 8010bfc:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8010c00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010c04:	9207      	str	r2, [sp, #28]
 8010c06:	f04f 0a00 	mov.w	sl, #0
 8010c0a:	e95e 5202 	ldrd	r5, r2, [lr, #-8]
 8010c0e:	9201      	str	r2, [sp, #4]
 8010c10:	9a05      	ldr	r2, [sp, #20]
 8010c12:	e95e 7604 	ldrd	r7, r6, [lr, #-16]
 8010c16:	b12a      	cbz	r2, 8010c24 <D128_MONO_INPUT+0x60>
 8010c18:	ba7f      	rev16	r7, r7
 8010c1a:	ba76      	rev16	r6, r6
 8010c1c:	ba6d      	rev16	r5, r5
 8010c1e:	9a01      	ldr	r2, [sp, #4]
 8010c20:	ba52      	rev16	r2, r2
 8010c22:	9201      	str	r2, [sp, #4]
 8010c24:	fa5f f987 	uxtb.w	r9, r7
 8010c28:	4a8b      	ldr	r2, [pc, #556]	@ (8010e58 <D128_MONO_INPUT+0x294>)
 8010c2a:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8010c2e:	eb09 2393 	add.w	r3, r9, r3, lsr #10
 8010c32:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8010c36:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8010c3a:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 8010c3e:	f3c9 0b09 	ubfx	fp, r9, #0, #10
 8010c42:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 8010c46:	ea43 030b 	orr.w	r3, r3, fp
 8010c4a:	fb23 cc02 	smlad	ip, r3, r2, ip
 8010c4e:	4a83      	ldr	r2, [pc, #524]	@ (8010e5c <D128_MONO_INPUT+0x298>)
 8010c50:	fb23 1102 	smlad	r1, r3, r2, r1
 8010c54:	f04f 0b01 	mov.w	fp, #1
 8010c58:	fb23 fb0b 	smuad	fp, r3, fp
 8010c5c:	f3c7 4307 	ubfx	r3, r7, #16, #8
 8010c60:	0e3f      	lsrs	r7, r7, #24
 8010c62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010c66:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8010c6a:	4a7d      	ldr	r2, [pc, #500]	@ (8010e60 <D128_MONO_INPUT+0x29c>)
 8010c6c:	eb03 2399 	add.w	r3, r3, r9, lsr #10
 8010c70:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 8010c74:	f3c7 0909 	ubfx	r9, r7, #0, #10
 8010c78:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 8010c7c:	ea43 0309 	orr.w	r3, r3, r9
 8010c80:	fb23 cc02 	smlad	ip, r3, r2, ip
 8010c84:	4a77      	ldr	r2, [pc, #476]	@ (8010e64 <D128_MONO_INPUT+0x2a0>)
 8010c86:	fb23 1102 	smlad	r1, r3, r2, r1
 8010c8a:	4a77      	ldr	r2, [pc, #476]	@ (8010e68 <D128_MONO_INPUT+0x2a4>)
 8010c8c:	fb23 b302 	smlad	r3, r3, r2, fp
 8010c90:	fa5f f986 	uxtb.w	r9, r6
 8010c94:	4a75      	ldr	r2, [pc, #468]	@ (8010e6c <D128_MONO_INPUT+0x2a8>)
 8010c96:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8010c9a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8010c9e:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8010ca2:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8010ca6:	eb07 2b99 	add.w	fp, r7, r9, lsr #10
 8010caa:	f3cb 0709 	ubfx	r7, fp, #0, #10
 8010cae:	ea04 4909 	and.w	r9, r4, r9, lsl #16
 8010cb2:	ea49 0707 	orr.w	r7, r9, r7
 8010cb6:	fb27 cc02 	smlad	ip, r7, r2, ip
 8010cba:	4a6d      	ldr	r2, [pc, #436]	@ (8010e70 <D128_MONO_INPUT+0x2ac>)
 8010cbc:	fb27 1102 	smlad	r1, r7, r2, r1
 8010cc0:	4a6c      	ldr	r2, [pc, #432]	@ (8010e74 <D128_MONO_INPUT+0x2b0>)
 8010cc2:	fb27 3702 	smlad	r7, r7, r2, r3
 8010cc6:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8010cca:	0e36      	lsrs	r6, r6, #24
 8010ccc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010cd0:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 8010cd4:	eb03 239b 	add.w	r3, r3, fp, lsr #10
 8010cd8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8010cdc:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8010ce0:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 8010ce4:	ea43 0309 	orr.w	r3, r3, r9
 8010ce8:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 8010e8c <D128_MONO_INPUT+0x2c8>
 8010cec:	fb23 cc09 	smlad	ip, r3, r9, ip
 8010cf0:	f8df 919c 	ldr.w	r9, [pc, #412]	@ 8010e90 <D128_MONO_INPUT+0x2cc>
 8010cf4:	fb23 1109 	smlad	r1, r3, r9, r1
 8010cf8:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8010e94 <D128_MONO_INPUT+0x2d0>
 8010cfc:	fb23 7709 	smlad	r7, r3, r9, r7
 8010d00:	b2eb      	uxtb	r3, r5
 8010d02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010d06:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8010d0a:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8010d0e:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 8010d12:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8010d16:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8010d1a:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 8010d1e:	ea43 0309 	orr.w	r3, r3, r9
 8010d22:	f8df 9174 	ldr.w	r9, [pc, #372]	@ 8010e98 <D128_MONO_INPUT+0x2d4>
 8010d26:	fb23 cc09 	smlad	ip, r3, r9, ip
 8010d2a:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 8010e9c <D128_MONO_INPUT+0x2d8>
 8010d2e:	fb23 1909 	smlad	r9, r3, r9, r1
 8010d32:	4951      	ldr	r1, [pc, #324]	@ (8010e78 <D128_MONO_INPUT+0x2b4>)
 8010d34:	fb23 7101 	smlad	r1, r3, r1, r7
 8010d38:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8010d3c:	0e2d      	lsrs	r5, r5, #24
 8010d3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010d42:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 8010d46:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8010d4a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8010d4e:	f3c5 0609 	ubfx	r6, r5, #0, #10
 8010d52:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 8010d56:	4333      	orrs	r3, r6
 8010d58:	4e48      	ldr	r6, [pc, #288]	@ (8010e7c <D128_MONO_INPUT+0x2b8>)
 8010d5a:	fb23 c606 	smlad	r6, r3, r6, ip
 8010d5e:	4f48      	ldr	r7, [pc, #288]	@ (8010e80 <D128_MONO_INPUT+0x2bc>)
 8010d60:	fb23 9707 	smlad	r7, r3, r7, r9
 8010d64:	f8df c138 	ldr.w	ip, [pc, #312]	@ 8010ea0 <D128_MONO_INPUT+0x2dc>
 8010d68:	fb23 110c 	smlad	r1, r3, ip, r1
 8010d6c:	9a01      	ldr	r2, [sp, #4]
 8010d6e:	b2d3      	uxtb	r3, r2
 8010d70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010d74:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8010d78:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8010d7c:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 8010d80:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8010d84:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8010d88:	ea04 4303 	and.w	r3, r4, r3, lsl #16
 8010d8c:	ea43 030c 	orr.w	r3, r3, ip
 8010d90:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8010ea4 <D128_MONO_INPUT+0x2e0>
 8010d94:	fb23 660c 	smlad	r6, r3, ip, r6
 8010d98:	f8df c10c 	ldr.w	ip, [pc, #268]	@ 8010ea8 <D128_MONO_INPUT+0x2e4>
 8010d9c:	fb23 770c 	smlad	r7, r3, ip, r7
 8010da0:	f8df 9108 	ldr.w	r9, [pc, #264]	@ 8010eac <D128_MONO_INPUT+0x2e8>
 8010da4:	fb23 1909 	smlad	r9, r3, r9, r1
 8010da8:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8010dac:	0e12      	lsrs	r2, r2, #24
 8010dae:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8010db2:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8010db6:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8010dba:	eb03 2391 	add.w	r3, r3, r1, lsr #10
 8010dbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8010dc2:	ea04 4101 	and.w	r1, r4, r1, lsl #16
 8010dc6:	4311      	orrs	r1, r2
 8010dc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010dcc:	fb21 6202 	smlad	r2, r1, r2, r6
 8010dd0:	4d2c      	ldr	r5, [pc, #176]	@ (8010e84 <D128_MONO_INPUT+0x2c0>)
 8010dd2:	fb21 7c05 	smlad	ip, r1, r5, r7
 8010dd6:	4d2c      	ldr	r5, [pc, #176]	@ (8010e88 <D128_MONO_INPUT+0x2c4>)
 8010dd8:	fb21 9105 	smlad	r1, r1, r5, r9
 8010ddc:	9f06      	ldr	r7, [sp, #24]
 8010dde:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 8010de2:	b15f      	cbz	r7, 8010dfc <D128_MONO_INPUT+0x238>
 8010de4:	9d02      	ldr	r5, [sp, #8]
 8010de6:	9e03      	ldr	r6, [sp, #12]
 8010de8:	9203      	str	r2, [sp, #12]
 8010dea:	4415      	add	r5, r2
 8010dec:	1bad      	subs	r5, r5, r6
 8010dee:	2200      	movs	r2, #0
 8010df0:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8010df4:	fbc5 6207 	smlal	r6, r2, r5, r7
 8010df8:	0052      	lsls	r2, r2, #1
 8010dfa:	9202      	str	r2, [sp, #8]
 8010dfc:	f8b8 5024 	ldrh.w	r5, [r8, #36]	@ 0x24
 8010e00:	fa1f f68a 	uxth.w	r6, sl
 8010e04:	fb05 f906 	mul.w	r9, r5, r6
 8010e08:	9e07      	ldr	r6, [sp, #28]
 8010e0a:	01d2      	lsls	r2, r2, #7
 8010e0c:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8010e10:	2500      	movs	r5, #0
 8010e12:	fbc2 7506 	smlal	r7, r5, r2, r6
 8010e16:	9a04      	ldr	r2, [sp, #16]
 8010e18:	10ad      	asrs	r5, r5, #2
 8010e1a:	f305 050f 	ssat	r5, #16, r5
 8010e1e:	f822 5019 	strh.w	r5, [r2, r9, lsl #1]
 8010e22:	f10a 0a01 	add.w	sl, sl, #1
 8010e26:	f8b8 5022 	ldrh.w	r5, [r8, #34]	@ 0x22
 8010e2a:	fa1f f28a 	uxth.w	r2, sl
 8010e2e:	4295      	cmp	r5, r2
 8010e30:	f10e 0e10 	add.w	lr, lr, #16
 8010e34:	f63f aee9 	bhi.w	8010c0a <D128_MONO_INPUT+0x46>
 8010e38:	f8c8 3018 	str.w	r3, [r8, #24]
 8010e3c:	9b02      	ldr	r3, [sp, #8]
 8010e3e:	f8c8 3014 	str.w	r3, [r8, #20]
 8010e42:	9b03      	ldr	r3, [sp, #12]
 8010e44:	f8c8 3010 	str.w	r3, [r8, #16]
 8010e48:	e9c8 1c02 	strd	r1, ip, [r8, #8]
 8010e4c:	b009      	add	sp, #36	@ 0x24
 8010e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e52:	bf00      	nop
 8010e54:	03ff0000 	.word	0x03ff0000
 8010e58:	00780069 	.word	0x00780069
 8010e5c:	00880096 	.word	0x00880096
 8010e60:	005b004e 	.word	0x005b004e
 8010e64:	00a200ac 	.word	0x00a200ac
 8010e68:	00030006 	.word	0x00030006
 8010e6c:	00420037 	.word	0x00420037
 8010e70:	00b400ba 	.word	0x00b400ba
 8010e74:	000a000f 	.word	0x000a000f
 8010e78:	0024002d 	.word	0x0024002d
 8010e7c:	000f000a 	.word	0x000f000a
 8010e80:	00ba00b4 	.word	0x00ba00b4
 8010e84:	00960088 	.word	0x00960088
 8010e88:	00690078 	.word	0x00690078
 8010e8c:	002d0024 	.word	0x002d0024
 8010e90:	00be00c0 	.word	0x00be00c0
 8010e94:	0015001c 	.word	0x0015001c
 8010e98:	001c0015 	.word	0x001c0015
 8010e9c:	00c000be 	.word	0x00c000be
 8010ea0:	00370042 	.word	0x00370042
 8010ea4:	00060003 	.word	0x00060003
 8010ea8:	00ac00a2 	.word	0x00ac00a2
 8010eac:	004e005b 	.word	0x004e005b

08010eb0 <CRC_Lock>:
 8010eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8010f70 <CRC_Lock+0xc0>)
 8010eb2:	6813      	ldr	r3, [r2, #0]
 8010eb4:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 8010eb8:	f023 0301 	bic.w	r3, r3, #1
 8010ebc:	b500      	push	{lr}
 8010ebe:	6013      	str	r3, [r2, #0]
 8010ec0:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 8010ec4:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8010ec8:	4013      	ands	r3, r2
 8010eca:	f24c 2e40 	movw	lr, #49728	@ 0xc240
 8010ece:	4573      	cmp	r3, lr
 8010ed0:	d014      	beq.n	8010efc <CRC_Lock+0x4c>
 8010ed2:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 8010ed6:	f24c 2c70 	movw	ip, #49776	@ 0xc270
 8010eda:	4013      	ands	r3, r2
 8010edc:	4563      	cmp	r3, ip
 8010ede:	d00d      	beq.n	8010efc <CRC_Lock+0x4c>
 8010ee0:	4a24      	ldr	r2, [pc, #144]	@ (8010f74 <CRC_Lock+0xc4>)
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	6093      	str	r3, [r2, #8]
 8010ee6:	6893      	ldr	r3, [r2, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d1fc      	bne.n	8010ee6 <CRC_Lock+0x36>
 8010eec:	6010      	str	r0, [r2, #0]
 8010eee:	6810      	ldr	r0, [r2, #0]
 8010ef0:	1a40      	subs	r0, r0, r1
 8010ef2:	fab0 f080 	clz	r0, r0
 8010ef6:	0940      	lsrs	r0, r0, #5
 8010ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010efc:	4b1e      	ldr	r3, [pc, #120]	@ (8010f78 <CRC_Lock+0xc8>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1ed      	bne.n	8010ee0 <CRC_Lock+0x30>
 8010f04:	4a1d      	ldr	r2, [pc, #116]	@ (8010f7c <CRC_Lock+0xcc>)
 8010f06:	6813      	ldr	r3, [r2, #0]
 8010f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f0c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8010f10:	d01b      	beq.n	8010f4a <CRC_Lock+0x9a>
 8010f12:	6813      	ldr	r3, [r2, #0]
 8010f14:	f240 4c83 	movw	ip, #1155	@ 0x483
 8010f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f1c:	4563      	cmp	r3, ip
 8010f1e:	d014      	beq.n	8010f4a <CRC_Lock+0x9a>
 8010f20:	6813      	ldr	r3, [r2, #0]
 8010f22:	f240 4285 	movw	r2, #1157	@ 0x485
 8010f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d00d      	beq.n	8010f4a <CRC_Lock+0x9a>
 8010f2e:	4b14      	ldr	r3, [pc, #80]	@ (8010f80 <CRC_Lock+0xd0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f36:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8010f3a:	d1d1      	bne.n	8010ee0 <CRC_Lock+0x30>
 8010f3c:	4a11      	ldr	r2, [pc, #68]	@ (8010f84 <CRC_Lock+0xd4>)
 8010f3e:	2301      	movs	r3, #1
 8010f40:	6093      	str	r3, [r2, #8]
 8010f42:	6893      	ldr	r3, [r2, #8]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1fc      	bne.n	8010f42 <CRC_Lock+0x92>
 8010f48:	e7d0      	b.n	8010eec <CRC_Lock+0x3c>
 8010f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8010f88 <CRC_Lock+0xd8>)
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8010f52:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1fb      	bne.n	8010f52 <CRC_Lock+0xa2>
 8010f5a:	f8c2 0c00 	str.w	r0, [r2, #3072]	@ 0xc00
 8010f5e:	f8d2 0c00 	ldr.w	r0, [r2, #3072]	@ 0xc00
 8010f62:	1a40      	subs	r0, r0, r1
 8010f64:	fab0 f080 	clz	r0, r0
 8010f68:	0940      	lsrs	r0, r0, #5
 8010f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f6e:	bf00      	nop
 8010f70:	e0002000 	.word	0xe0002000
 8010f74:	40023000 	.word	0x40023000
 8010f78:	e0042000 	.word	0xe0042000
 8010f7c:	5c001000 	.word	0x5c001000
 8010f80:	50081000 	.word	0x50081000
 8010f84:	4c004000 	.word	0x4c004000
 8010f88:	58024000 	.word	0x58024000

08010f8c <PDM2PCM_init>:
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	2238      	movs	r2, #56	@ 0x38
 8010f90:	4604      	mov	r4, r0
 8010f92:	2100      	movs	r1, #0
 8010f94:	300c      	adds	r0, #12
 8010f96:	f000 fa35 	bl	8011404 <memset>
 8010f9a:	491f      	ldr	r1, [pc, #124]	@ (8011018 <PDM2PCM_init+0x8c>)
 8010f9c:	481f      	ldr	r0, [pc, #124]	@ (801101c <PDM2PCM_init+0x90>)
 8010f9e:	f7ff ff87 	bl	8010eb0 <CRC_Lock>
 8010fa2:	6863      	ldr	r3, [r4, #4]
 8010fa4:	8922      	ldrh	r2, [r4, #8]
 8010fa6:	8662      	strh	r2, [r4, #50]	@ 0x32
 8010fa8:	2801      	cmp	r0, #1
 8010faa:	bf18      	it	ne
 8010fac:	2100      	movne	r1, #0
 8010fae:	8820      	ldrh	r0, [r4, #0]
 8010fb0:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 8010fb4:	60e1      	str	r1, [r4, #12]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	bfac      	ite	ge
 8010fba:	461a      	movge	r2, r3
 8010fbc:	f06f 4200 	mvnlt.w	r2, #2147483648	@ 0x80000000
 8010fc0:	f8a4 c030 	strh.w	ip, [r4, #48]	@ 0x30
 8010fc4:	62a2      	str	r2, [r4, #40]	@ 0x28
 8010fc6:	b9e8      	cbnz	r0, 8011004 <PDM2PCM_init+0x78>
 8010fc8:	4a15      	ldr	r2, [pc, #84]	@ (8011020 <PDM2PCM_init+0x94>)
 8010fca:	6122      	str	r2, [r4, #16]
 8010fcc:	2101      	movs	r1, #1
 8010fce:	8862      	ldrh	r2, [r4, #2]
 8010fd0:	2a01      	cmp	r2, #1
 8010fd2:	d00c      	beq.n	8010fee <PDM2PCM_init+0x62>
 8010fd4:	b17a      	cbz	r2, 8010ff6 <PDM2PCM_init+0x6a>
 8010fd6:	4608      	mov	r0, r1
 8010fd8:	b143      	cbz	r3, 8010fec <PDM2PCM_init+0x60>
 8010fda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010fdc:	f043 0310 	orr.w	r3, r3, #16
 8010fe0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010fe2:	b918      	cbnz	r0, 8010fec <PDM2PCM_init+0x60>
 8010fe4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fea:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010fec:	bd10      	pop	{r4, pc}
 8010fee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8010ff0:	f042 0220 	orr.w	r2, r2, #32
 8010ff4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d0f3      	beq.n	8010fe2 <PDM2PCM_init+0x56>
 8010ffa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010ffc:	f043 0310 	orr.w	r3, r3, #16
 8011000:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011002:	e7ee      	b.n	8010fe2 <PDM2PCM_init+0x56>
 8011004:	2801      	cmp	r0, #1
 8011006:	d002      	beq.n	801100e <PDM2PCM_init+0x82>
 8011008:	2103      	movs	r1, #3
 801100a:	2002      	movs	r0, #2
 801100c:	e7df      	b.n	8010fce <PDM2PCM_init+0x42>
 801100e:	4a05      	ldr	r2, [pc, #20]	@ (8011024 <PDM2PCM_init+0x98>)
 8011010:	6122      	str	r2, [r4, #16]
 8011012:	4601      	mov	r1, r0
 8011014:	2000      	movs	r0, #0
 8011016:	e7da      	b.n	8010fce <PDM2PCM_init+0x42>
 8011018:	b5e8b5cd 	.word	0xb5e8b5cd
 801101c:	f407a5c2 	.word	0xf407a5c2
 8011020:	08014330 	.word	0x08014330
 8011024:	08014730 	.word	0x08014730

08011028 <PDM2PCM_setConfig>:
 8011028:	4b48      	ldr	r3, [pc, #288]	@ (801114c <PDM2PCM_setConfig+0x124>)
 801102a:	68c2      	ldr	r2, [r0, #12]
 801102c:	429a      	cmp	r2, r3
 801102e:	d15b      	bne.n	80110e8 <PDM2PCM_setConfig+0xc0>
 8011030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011034:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011036:	880d      	ldrh	r5, [r1, #0]
 8011038:	4604      	mov	r4, r0
 801103a:	1e6a      	subs	r2, r5, #1
 801103c:	f083 0040 	eor.w	r0, r3, #64	@ 0x40
 8011040:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8011044:	2a06      	cmp	r2, #6
 8011046:	b083      	sub	sp, #12
 8011048:	f023 0680 	bic.w	r6, r3, #128	@ 0x80
 801104c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011050:	d911      	bls.n	8011076 <PDM2PCM_setConfig+0x4e>
 8011052:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011056:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 801105a:	429a      	cmp	r2, r3
 801105c:	f040 0008 	orr.w	r0, r0, #8
 8011060:	d067      	beq.n	8011132 <PDM2PCM_setConfig+0x10a>
 8011062:	f113 0f0c 	cmn.w	r3, #12
 8011066:	db20      	blt.n	80110aa <PDM2PCM_setConfig+0x82>
 8011068:	2b33      	cmp	r3, #51	@ 0x33
 801106a:	dd23      	ble.n	80110b4 <PDM2PCM_setConfig+0x8c>
 801106c:	2333      	movs	r3, #51	@ 0x33
 801106e:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8011072:	808b      	strh	r3, [r1, #4]
 8011074:	e01e      	b.n	80110b4 <PDM2PCM_setConfig+0x8c>
 8011076:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8011078:	42aa      	cmp	r2, r5
 801107a:	d025      	beq.n	80110c8 <PDM2PCM_setConfig+0xa0>
 801107c:	f023 038f 	bic.w	r3, r3, #143	@ 0x8f
 8011080:	ea45 0603 	orr.w	r6, r5, r3
 8011084:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8011086:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8011154 <PDM2PCM_setConfig+0x12c>
 801108a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801108e:	2b01      	cmp	r3, #1
 8011090:	bf08      	it	eq
 8011092:	eb08 1305 	addeq.w	r3, r8, r5, lsl #4
 8011096:	ea4f 1905 	mov.w	r9, r5, lsl #4
 801109a:	bf0c      	ite	eq
 801109c:	685b      	ldreq	r3, [r3, #4]
 801109e:	f858 3009 	ldrne.w	r3, [r8, r9]
 80110a2:	6423      	str	r3, [r4, #64]	@ 0x40
 80110a4:	f117 0f0c 	cmn.w	r7, #12
 80110a8:	da20      	bge.n	80110ec <PDM2PCM_setConfig+0xc4>
 80110aa:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 80110ae:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80110b2:	808b      	strh	r3, [r1, #4]
 80110b4:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80110b6:	884b      	ldrh	r3, [r1, #2]
 80110b8:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80110ba:	b908      	cbnz	r0, 80110c0 <PDM2PCM_setConfig+0x98>
 80110bc:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80110c0:	63e6      	str	r6, [r4, #60]	@ 0x3c
 80110c2:	b003      	add	sp, #12
 80110c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110c8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80110cc:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 80110d0:	42bb      	cmp	r3, r7
 80110d2:	d0f0      	beq.n	80110b6 <PDM2PCM_setConfig+0x8e>
 80110d4:	f117 0f0c 	cmn.w	r7, #12
 80110d8:	dbe7      	blt.n	80110aa <PDM2PCM_setConfig+0x82>
 80110da:	2f33      	cmp	r7, #51	@ 0x33
 80110dc:	dcc6      	bgt.n	801106c <PDM2PCM_setConfig+0x44>
 80110de:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8011154 <PDM2PCM_setConfig+0x12c>
 80110e2:	ea4f 1905 	mov.w	r9, r5, lsl #4
 80110e6:	e003      	b.n	80110f0 <PDM2PCM_setConfig+0xc8>
 80110e8:	2004      	movs	r0, #4
 80110ea:	4770      	bx	lr
 80110ec:	2f33      	cmp	r7, #51	@ 0x33
 80110ee:	dcbd      	bgt.n	801106c <PDM2PCM_setConfig+0x44>
 80110f0:	ee07 7a90 	vmov	s15, r7
 80110f4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80110f8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011150 <PDM2PCM_setConfig+0x128>
 80110fc:	44c8      	add	r8, r9
 80110fe:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011102:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8011106:	e9cd 0100 	strd	r0, r1, [sp]
 801110a:	f001 f85d 	bl	80121c8 <powf>
 801110e:	ed98 7a02 	vldr	s14, [r8, #8]
 8011112:	edd8 7a03 	vldr	s15, [r8, #12]
 8011116:	ee67 7a87 	vmul.f32	s15, s15, s14
 801111a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801111e:	f001 f82f 	bl	8012180 <roundf>
 8011122:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011126:	e9dd 0100 	ldrd	r0, r1, [sp]
 801112a:	86a7      	strh	r7, [r4, #52]	@ 0x34
 801112c:	ed84 0a0e 	vstr	s0, [r4, #56]	@ 0x38
 8011130:	e7c0      	b.n	80110b4 <PDM2PCM_setConfig+0x8c>
 8011132:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8011134:	42ab      	cmp	r3, r5
 8011136:	d005      	beq.n	8011144 <PDM2PCM_setConfig+0x11c>
 8011138:	f112 0f0c 	cmn.w	r2, #12
 801113c:	dbb5      	blt.n	80110aa <PDM2PCM_setConfig+0x82>
 801113e:	2a33      	cmp	r2, #51	@ 0x33
 8011140:	dc94      	bgt.n	801106c <PDM2PCM_setConfig+0x44>
 8011142:	e7b7      	b.n	80110b4 <PDM2PCM_setConfig+0x8c>
 8011144:	884b      	ldrh	r3, [r1, #2]
 8011146:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8011148:	e7ba      	b.n	80110c0 <PDM2PCM_setConfig+0x98>
 801114a:	bf00      	nop
 801114c:	b5e8b5cd 	.word	0xb5e8b5cd
 8011150:	3d4ccccd 	.word	0x3d4ccccd
 8011154:	08014b30 	.word	0x08014b30

08011158 <PDM2PCM_process>:
 8011158:	4603      	mov	r3, r0
 801115a:	b510      	push	{r4, lr}
 801115c:	4608      	mov	r0, r1
 801115e:	4c0b      	ldr	r4, [pc, #44]	@ (801118c <PDM2PCM_process+0x34>)
 8011160:	4611      	mov	r1, r2
 8011162:	68da      	ldr	r2, [r3, #12]
 8011164:	42a2      	cmp	r2, r4
 8011166:	d10e      	bne.n	8011186 <PDM2PCM_process+0x2e>
 8011168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801116a:	0614      	lsls	r4, r2, #24
 801116c:	d505      	bpl.n	801117a <PDM2PCM_process+0x22>
 801116e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8011170:	f103 020c 	add.w	r2, r3, #12
 8011174:	47a0      	blx	r4
 8011176:	2000      	movs	r0, #0
 8011178:	bd10      	pop	{r4, pc}
 801117a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801117e:	bf14      	ite	ne
 8011180:	2020      	movne	r0, #32
 8011182:	2030      	moveq	r0, #48	@ 0x30
 8011184:	bd10      	pop	{r4, pc}
 8011186:	2004      	movs	r0, #4
 8011188:	bd10      	pop	{r4, pc}
 801118a:	bf00      	nop
 801118c:	b5e8b5cd 	.word	0xb5e8b5cd

08011190 <std>:
 8011190:	2300      	movs	r3, #0
 8011192:	b510      	push	{r4, lr}
 8011194:	4604      	mov	r4, r0
 8011196:	e9c0 3300 	strd	r3, r3, [r0]
 801119a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801119e:	6083      	str	r3, [r0, #8]
 80111a0:	8181      	strh	r1, [r0, #12]
 80111a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80111a4:	81c2      	strh	r2, [r0, #14]
 80111a6:	6183      	str	r3, [r0, #24]
 80111a8:	4619      	mov	r1, r3
 80111aa:	2208      	movs	r2, #8
 80111ac:	305c      	adds	r0, #92	@ 0x5c
 80111ae:	f000 f929 	bl	8011404 <memset>
 80111b2:	4b0d      	ldr	r3, [pc, #52]	@ (80111e8 <std+0x58>)
 80111b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80111b6:	4b0d      	ldr	r3, [pc, #52]	@ (80111ec <std+0x5c>)
 80111b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80111ba:	4b0d      	ldr	r3, [pc, #52]	@ (80111f0 <std+0x60>)
 80111bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80111be:	4b0d      	ldr	r3, [pc, #52]	@ (80111f4 <std+0x64>)
 80111c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80111c2:	4b0d      	ldr	r3, [pc, #52]	@ (80111f8 <std+0x68>)
 80111c4:	6224      	str	r4, [r4, #32]
 80111c6:	429c      	cmp	r4, r3
 80111c8:	d006      	beq.n	80111d8 <std+0x48>
 80111ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80111ce:	4294      	cmp	r4, r2
 80111d0:	d002      	beq.n	80111d8 <std+0x48>
 80111d2:	33d0      	adds	r3, #208	@ 0xd0
 80111d4:	429c      	cmp	r4, r3
 80111d6:	d105      	bne.n	80111e4 <std+0x54>
 80111d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80111dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111e0:	f000 b958 	b.w	8011494 <__retarget_lock_init_recursive>
 80111e4:	bd10      	pop	{r4, pc}
 80111e6:	bf00      	nop
 80111e8:	08011d05 	.word	0x08011d05
 80111ec:	08011d27 	.word	0x08011d27
 80111f0:	08011d5f 	.word	0x08011d5f
 80111f4:	08011d83 	.word	0x08011d83
 80111f8:	200018e4 	.word	0x200018e4

080111fc <stdio_exit_handler>:
 80111fc:	4a02      	ldr	r2, [pc, #8]	@ (8011208 <stdio_exit_handler+0xc>)
 80111fe:	4903      	ldr	r1, [pc, #12]	@ (801120c <stdio_exit_handler+0x10>)
 8011200:	4803      	ldr	r0, [pc, #12]	@ (8011210 <stdio_exit_handler+0x14>)
 8011202:	f000 b869 	b.w	80112d8 <_fwalk_sglue>
 8011206:	bf00      	nop
 8011208:	20000034 	.word	0x20000034
 801120c:	08011c9d 	.word	0x08011c9d
 8011210:	20000044 	.word	0x20000044

08011214 <cleanup_stdio>:
 8011214:	6841      	ldr	r1, [r0, #4]
 8011216:	4b0c      	ldr	r3, [pc, #48]	@ (8011248 <cleanup_stdio+0x34>)
 8011218:	4299      	cmp	r1, r3
 801121a:	b510      	push	{r4, lr}
 801121c:	4604      	mov	r4, r0
 801121e:	d001      	beq.n	8011224 <cleanup_stdio+0x10>
 8011220:	f000 fd3c 	bl	8011c9c <_fflush_r>
 8011224:	68a1      	ldr	r1, [r4, #8]
 8011226:	4b09      	ldr	r3, [pc, #36]	@ (801124c <cleanup_stdio+0x38>)
 8011228:	4299      	cmp	r1, r3
 801122a:	d002      	beq.n	8011232 <cleanup_stdio+0x1e>
 801122c:	4620      	mov	r0, r4
 801122e:	f000 fd35 	bl	8011c9c <_fflush_r>
 8011232:	68e1      	ldr	r1, [r4, #12]
 8011234:	4b06      	ldr	r3, [pc, #24]	@ (8011250 <cleanup_stdio+0x3c>)
 8011236:	4299      	cmp	r1, r3
 8011238:	d004      	beq.n	8011244 <cleanup_stdio+0x30>
 801123a:	4620      	mov	r0, r4
 801123c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011240:	f000 bd2c 	b.w	8011c9c <_fflush_r>
 8011244:	bd10      	pop	{r4, pc}
 8011246:	bf00      	nop
 8011248:	200018e4 	.word	0x200018e4
 801124c:	2000194c 	.word	0x2000194c
 8011250:	200019b4 	.word	0x200019b4

08011254 <global_stdio_init.part.0>:
 8011254:	b510      	push	{r4, lr}
 8011256:	4b0b      	ldr	r3, [pc, #44]	@ (8011284 <global_stdio_init.part.0+0x30>)
 8011258:	4c0b      	ldr	r4, [pc, #44]	@ (8011288 <global_stdio_init.part.0+0x34>)
 801125a:	4a0c      	ldr	r2, [pc, #48]	@ (801128c <global_stdio_init.part.0+0x38>)
 801125c:	601a      	str	r2, [r3, #0]
 801125e:	4620      	mov	r0, r4
 8011260:	2200      	movs	r2, #0
 8011262:	2104      	movs	r1, #4
 8011264:	f7ff ff94 	bl	8011190 <std>
 8011268:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801126c:	2201      	movs	r2, #1
 801126e:	2109      	movs	r1, #9
 8011270:	f7ff ff8e 	bl	8011190 <std>
 8011274:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011278:	2202      	movs	r2, #2
 801127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801127e:	2112      	movs	r1, #18
 8011280:	f7ff bf86 	b.w	8011190 <std>
 8011284:	20001a1c 	.word	0x20001a1c
 8011288:	200018e4 	.word	0x200018e4
 801128c:	080111fd 	.word	0x080111fd

08011290 <__sfp_lock_acquire>:
 8011290:	4801      	ldr	r0, [pc, #4]	@ (8011298 <__sfp_lock_acquire+0x8>)
 8011292:	f000 b900 	b.w	8011496 <__retarget_lock_acquire_recursive>
 8011296:	bf00      	nop
 8011298:	20001a21 	.word	0x20001a21

0801129c <__sfp_lock_release>:
 801129c:	4801      	ldr	r0, [pc, #4]	@ (80112a4 <__sfp_lock_release+0x8>)
 801129e:	f000 b8fb 	b.w	8011498 <__retarget_lock_release_recursive>
 80112a2:	bf00      	nop
 80112a4:	20001a21 	.word	0x20001a21

080112a8 <__sinit>:
 80112a8:	b510      	push	{r4, lr}
 80112aa:	4604      	mov	r4, r0
 80112ac:	f7ff fff0 	bl	8011290 <__sfp_lock_acquire>
 80112b0:	6a23      	ldr	r3, [r4, #32]
 80112b2:	b11b      	cbz	r3, 80112bc <__sinit+0x14>
 80112b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112b8:	f7ff bff0 	b.w	801129c <__sfp_lock_release>
 80112bc:	4b04      	ldr	r3, [pc, #16]	@ (80112d0 <__sinit+0x28>)
 80112be:	6223      	str	r3, [r4, #32]
 80112c0:	4b04      	ldr	r3, [pc, #16]	@ (80112d4 <__sinit+0x2c>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d1f5      	bne.n	80112b4 <__sinit+0xc>
 80112c8:	f7ff ffc4 	bl	8011254 <global_stdio_init.part.0>
 80112cc:	e7f2      	b.n	80112b4 <__sinit+0xc>
 80112ce:	bf00      	nop
 80112d0:	08011215 	.word	0x08011215
 80112d4:	20001a1c 	.word	0x20001a1c

080112d8 <_fwalk_sglue>:
 80112d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112dc:	4607      	mov	r7, r0
 80112de:	4688      	mov	r8, r1
 80112e0:	4614      	mov	r4, r2
 80112e2:	2600      	movs	r6, #0
 80112e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80112e8:	f1b9 0901 	subs.w	r9, r9, #1
 80112ec:	d505      	bpl.n	80112fa <_fwalk_sglue+0x22>
 80112ee:	6824      	ldr	r4, [r4, #0]
 80112f0:	2c00      	cmp	r4, #0
 80112f2:	d1f7      	bne.n	80112e4 <_fwalk_sglue+0xc>
 80112f4:	4630      	mov	r0, r6
 80112f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112fa:	89ab      	ldrh	r3, [r5, #12]
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	d907      	bls.n	8011310 <_fwalk_sglue+0x38>
 8011300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011304:	3301      	adds	r3, #1
 8011306:	d003      	beq.n	8011310 <_fwalk_sglue+0x38>
 8011308:	4629      	mov	r1, r5
 801130a:	4638      	mov	r0, r7
 801130c:	47c0      	blx	r8
 801130e:	4306      	orrs	r6, r0
 8011310:	3568      	adds	r5, #104	@ 0x68
 8011312:	e7e9      	b.n	80112e8 <_fwalk_sglue+0x10>

08011314 <iprintf>:
 8011314:	b40f      	push	{r0, r1, r2, r3}
 8011316:	b507      	push	{r0, r1, r2, lr}
 8011318:	4906      	ldr	r1, [pc, #24]	@ (8011334 <iprintf+0x20>)
 801131a:	ab04      	add	r3, sp, #16
 801131c:	6808      	ldr	r0, [r1, #0]
 801131e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011322:	6881      	ldr	r1, [r0, #8]
 8011324:	9301      	str	r3, [sp, #4]
 8011326:	f000 f8ef 	bl	8011508 <_vfiprintf_r>
 801132a:	b003      	add	sp, #12
 801132c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011330:	b004      	add	sp, #16
 8011332:	4770      	bx	lr
 8011334:	20000040 	.word	0x20000040

08011338 <putchar>:
 8011338:	4b02      	ldr	r3, [pc, #8]	@ (8011344 <putchar+0xc>)
 801133a:	4601      	mov	r1, r0
 801133c:	6818      	ldr	r0, [r3, #0]
 801133e:	6882      	ldr	r2, [r0, #8]
 8011340:	f000 be1a 	b.w	8011f78 <_putc_r>
 8011344:	20000040 	.word	0x20000040

08011348 <_puts_r>:
 8011348:	6a03      	ldr	r3, [r0, #32]
 801134a:	b570      	push	{r4, r5, r6, lr}
 801134c:	6884      	ldr	r4, [r0, #8]
 801134e:	4605      	mov	r5, r0
 8011350:	460e      	mov	r6, r1
 8011352:	b90b      	cbnz	r3, 8011358 <_puts_r+0x10>
 8011354:	f7ff ffa8 	bl	80112a8 <__sinit>
 8011358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801135a:	07db      	lsls	r3, r3, #31
 801135c:	d405      	bmi.n	801136a <_puts_r+0x22>
 801135e:	89a3      	ldrh	r3, [r4, #12]
 8011360:	0598      	lsls	r0, r3, #22
 8011362:	d402      	bmi.n	801136a <_puts_r+0x22>
 8011364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011366:	f000 f896 	bl	8011496 <__retarget_lock_acquire_recursive>
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	0719      	lsls	r1, r3, #28
 801136e:	d502      	bpl.n	8011376 <_puts_r+0x2e>
 8011370:	6923      	ldr	r3, [r4, #16]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d135      	bne.n	80113e2 <_puts_r+0x9a>
 8011376:	4621      	mov	r1, r4
 8011378:	4628      	mov	r0, r5
 801137a:	f000 fd45 	bl	8011e08 <__swsetup_r>
 801137e:	b380      	cbz	r0, 80113e2 <_puts_r+0x9a>
 8011380:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8011384:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011386:	07da      	lsls	r2, r3, #31
 8011388:	d405      	bmi.n	8011396 <_puts_r+0x4e>
 801138a:	89a3      	ldrh	r3, [r4, #12]
 801138c:	059b      	lsls	r3, r3, #22
 801138e:	d402      	bmi.n	8011396 <_puts_r+0x4e>
 8011390:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011392:	f000 f881 	bl	8011498 <__retarget_lock_release_recursive>
 8011396:	4628      	mov	r0, r5
 8011398:	bd70      	pop	{r4, r5, r6, pc}
 801139a:	2b00      	cmp	r3, #0
 801139c:	da04      	bge.n	80113a8 <_puts_r+0x60>
 801139e:	69a2      	ldr	r2, [r4, #24]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	dc17      	bgt.n	80113d4 <_puts_r+0x8c>
 80113a4:	290a      	cmp	r1, #10
 80113a6:	d015      	beq.n	80113d4 <_puts_r+0x8c>
 80113a8:	6823      	ldr	r3, [r4, #0]
 80113aa:	1c5a      	adds	r2, r3, #1
 80113ac:	6022      	str	r2, [r4, #0]
 80113ae:	7019      	strb	r1, [r3, #0]
 80113b0:	68a3      	ldr	r3, [r4, #8]
 80113b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80113b6:	3b01      	subs	r3, #1
 80113b8:	60a3      	str	r3, [r4, #8]
 80113ba:	2900      	cmp	r1, #0
 80113bc:	d1ed      	bne.n	801139a <_puts_r+0x52>
 80113be:	2b00      	cmp	r3, #0
 80113c0:	da11      	bge.n	80113e6 <_puts_r+0x9e>
 80113c2:	4622      	mov	r2, r4
 80113c4:	210a      	movs	r1, #10
 80113c6:	4628      	mov	r0, r5
 80113c8:	f000 fcdf 	bl	8011d8a <__swbuf_r>
 80113cc:	3001      	adds	r0, #1
 80113ce:	d0d7      	beq.n	8011380 <_puts_r+0x38>
 80113d0:	250a      	movs	r5, #10
 80113d2:	e7d7      	b.n	8011384 <_puts_r+0x3c>
 80113d4:	4622      	mov	r2, r4
 80113d6:	4628      	mov	r0, r5
 80113d8:	f000 fcd7 	bl	8011d8a <__swbuf_r>
 80113dc:	3001      	adds	r0, #1
 80113de:	d1e7      	bne.n	80113b0 <_puts_r+0x68>
 80113e0:	e7ce      	b.n	8011380 <_puts_r+0x38>
 80113e2:	3e01      	subs	r6, #1
 80113e4:	e7e4      	b.n	80113b0 <_puts_r+0x68>
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	1c5a      	adds	r2, r3, #1
 80113ea:	6022      	str	r2, [r4, #0]
 80113ec:	220a      	movs	r2, #10
 80113ee:	701a      	strb	r2, [r3, #0]
 80113f0:	e7ee      	b.n	80113d0 <_puts_r+0x88>
	...

080113f4 <puts>:
 80113f4:	4b02      	ldr	r3, [pc, #8]	@ (8011400 <puts+0xc>)
 80113f6:	4601      	mov	r1, r0
 80113f8:	6818      	ldr	r0, [r3, #0]
 80113fa:	f7ff bfa5 	b.w	8011348 <_puts_r>
 80113fe:	bf00      	nop
 8011400:	20000040 	.word	0x20000040

08011404 <memset>:
 8011404:	4402      	add	r2, r0
 8011406:	4603      	mov	r3, r0
 8011408:	4293      	cmp	r3, r2
 801140a:	d100      	bne.n	801140e <memset+0xa>
 801140c:	4770      	bx	lr
 801140e:	f803 1b01 	strb.w	r1, [r3], #1
 8011412:	e7f9      	b.n	8011408 <memset+0x4>

08011414 <strrchr>:
 8011414:	b538      	push	{r3, r4, r5, lr}
 8011416:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 801141a:	4603      	mov	r3, r0
 801141c:	d10e      	bne.n	801143c <strrchr+0x28>
 801141e:	4621      	mov	r1, r4
 8011420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011424:	f000 bddc 	b.w	8011fe0 <strchr>
 8011428:	1c43      	adds	r3, r0, #1
 801142a:	4605      	mov	r5, r0
 801142c:	4621      	mov	r1, r4
 801142e:	4618      	mov	r0, r3
 8011430:	f000 fdd6 	bl	8011fe0 <strchr>
 8011434:	2800      	cmp	r0, #0
 8011436:	d1f7      	bne.n	8011428 <strrchr+0x14>
 8011438:	4628      	mov	r0, r5
 801143a:	bd38      	pop	{r3, r4, r5, pc}
 801143c:	2500      	movs	r5, #0
 801143e:	e7f5      	b.n	801142c <strrchr+0x18>

08011440 <__errno>:
 8011440:	4b01      	ldr	r3, [pc, #4]	@ (8011448 <__errno+0x8>)
 8011442:	6818      	ldr	r0, [r3, #0]
 8011444:	4770      	bx	lr
 8011446:	bf00      	nop
 8011448:	20000040 	.word	0x20000040

0801144c <__libc_init_array>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	4d0d      	ldr	r5, [pc, #52]	@ (8011484 <__libc_init_array+0x38>)
 8011450:	4c0d      	ldr	r4, [pc, #52]	@ (8011488 <__libc_init_array+0x3c>)
 8011452:	1b64      	subs	r4, r4, r5
 8011454:	10a4      	asrs	r4, r4, #2
 8011456:	2600      	movs	r6, #0
 8011458:	42a6      	cmp	r6, r4
 801145a:	d109      	bne.n	8011470 <__libc_init_array+0x24>
 801145c:	4d0b      	ldr	r5, [pc, #44]	@ (801148c <__libc_init_array+0x40>)
 801145e:	4c0c      	ldr	r4, [pc, #48]	@ (8011490 <__libc_init_array+0x44>)
 8011460:	f001 fa78 	bl	8012954 <_init>
 8011464:	1b64      	subs	r4, r4, r5
 8011466:	10a4      	asrs	r4, r4, #2
 8011468:	2600      	movs	r6, #0
 801146a:	42a6      	cmp	r6, r4
 801146c:	d105      	bne.n	801147a <__libc_init_array+0x2e>
 801146e:	bd70      	pop	{r4, r5, r6, pc}
 8011470:	f855 3b04 	ldr.w	r3, [r5], #4
 8011474:	4798      	blx	r3
 8011476:	3601      	adds	r6, #1
 8011478:	e7ee      	b.n	8011458 <__libc_init_array+0xc>
 801147a:	f855 3b04 	ldr.w	r3, [r5], #4
 801147e:	4798      	blx	r3
 8011480:	3601      	adds	r6, #1
 8011482:	e7f2      	b.n	801146a <__libc_init_array+0x1e>
 8011484:	08014c04 	.word	0x08014c04
 8011488:	08014c04 	.word	0x08014c04
 801148c:	08014c04 	.word	0x08014c04
 8011490:	08014c08 	.word	0x08014c08

08011494 <__retarget_lock_init_recursive>:
 8011494:	4770      	bx	lr

08011496 <__retarget_lock_acquire_recursive>:
 8011496:	4770      	bx	lr

08011498 <__retarget_lock_release_recursive>:
 8011498:	4770      	bx	lr

0801149a <memcpy>:
 801149a:	440a      	add	r2, r1
 801149c:	4291      	cmp	r1, r2
 801149e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80114a2:	d100      	bne.n	80114a6 <memcpy+0xc>
 80114a4:	4770      	bx	lr
 80114a6:	b510      	push	{r4, lr}
 80114a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114b0:	4291      	cmp	r1, r2
 80114b2:	d1f9      	bne.n	80114a8 <memcpy+0xe>
 80114b4:	bd10      	pop	{r4, pc}

080114b6 <__sfputc_r>:
 80114b6:	6893      	ldr	r3, [r2, #8]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	b410      	push	{r4}
 80114be:	6093      	str	r3, [r2, #8]
 80114c0:	da08      	bge.n	80114d4 <__sfputc_r+0x1e>
 80114c2:	6994      	ldr	r4, [r2, #24]
 80114c4:	42a3      	cmp	r3, r4
 80114c6:	db01      	blt.n	80114cc <__sfputc_r+0x16>
 80114c8:	290a      	cmp	r1, #10
 80114ca:	d103      	bne.n	80114d4 <__sfputc_r+0x1e>
 80114cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114d0:	f000 bc5b 	b.w	8011d8a <__swbuf_r>
 80114d4:	6813      	ldr	r3, [r2, #0]
 80114d6:	1c58      	adds	r0, r3, #1
 80114d8:	6010      	str	r0, [r2, #0]
 80114da:	7019      	strb	r1, [r3, #0]
 80114dc:	4608      	mov	r0, r1
 80114de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114e2:	4770      	bx	lr

080114e4 <__sfputs_r>:
 80114e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114e6:	4606      	mov	r6, r0
 80114e8:	460f      	mov	r7, r1
 80114ea:	4614      	mov	r4, r2
 80114ec:	18d5      	adds	r5, r2, r3
 80114ee:	42ac      	cmp	r4, r5
 80114f0:	d101      	bne.n	80114f6 <__sfputs_r+0x12>
 80114f2:	2000      	movs	r0, #0
 80114f4:	e007      	b.n	8011506 <__sfputs_r+0x22>
 80114f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114fa:	463a      	mov	r2, r7
 80114fc:	4630      	mov	r0, r6
 80114fe:	f7ff ffda 	bl	80114b6 <__sfputc_r>
 8011502:	1c43      	adds	r3, r0, #1
 8011504:	d1f3      	bne.n	80114ee <__sfputs_r+0xa>
 8011506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011508 <_vfiprintf_r>:
 8011508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801150c:	460d      	mov	r5, r1
 801150e:	b09d      	sub	sp, #116	@ 0x74
 8011510:	4614      	mov	r4, r2
 8011512:	4698      	mov	r8, r3
 8011514:	4606      	mov	r6, r0
 8011516:	b118      	cbz	r0, 8011520 <_vfiprintf_r+0x18>
 8011518:	6a03      	ldr	r3, [r0, #32]
 801151a:	b90b      	cbnz	r3, 8011520 <_vfiprintf_r+0x18>
 801151c:	f7ff fec4 	bl	80112a8 <__sinit>
 8011520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011522:	07d9      	lsls	r1, r3, #31
 8011524:	d405      	bmi.n	8011532 <_vfiprintf_r+0x2a>
 8011526:	89ab      	ldrh	r3, [r5, #12]
 8011528:	059a      	lsls	r2, r3, #22
 801152a:	d402      	bmi.n	8011532 <_vfiprintf_r+0x2a>
 801152c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801152e:	f7ff ffb2 	bl	8011496 <__retarget_lock_acquire_recursive>
 8011532:	89ab      	ldrh	r3, [r5, #12]
 8011534:	071b      	lsls	r3, r3, #28
 8011536:	d501      	bpl.n	801153c <_vfiprintf_r+0x34>
 8011538:	692b      	ldr	r3, [r5, #16]
 801153a:	b99b      	cbnz	r3, 8011564 <_vfiprintf_r+0x5c>
 801153c:	4629      	mov	r1, r5
 801153e:	4630      	mov	r0, r6
 8011540:	f000 fc62 	bl	8011e08 <__swsetup_r>
 8011544:	b170      	cbz	r0, 8011564 <_vfiprintf_r+0x5c>
 8011546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011548:	07dc      	lsls	r4, r3, #31
 801154a:	d504      	bpl.n	8011556 <_vfiprintf_r+0x4e>
 801154c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011550:	b01d      	add	sp, #116	@ 0x74
 8011552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011556:	89ab      	ldrh	r3, [r5, #12]
 8011558:	0598      	lsls	r0, r3, #22
 801155a:	d4f7      	bmi.n	801154c <_vfiprintf_r+0x44>
 801155c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801155e:	f7ff ff9b 	bl	8011498 <__retarget_lock_release_recursive>
 8011562:	e7f3      	b.n	801154c <_vfiprintf_r+0x44>
 8011564:	2300      	movs	r3, #0
 8011566:	9309      	str	r3, [sp, #36]	@ 0x24
 8011568:	2320      	movs	r3, #32
 801156a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801156e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011572:	2330      	movs	r3, #48	@ 0x30
 8011574:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011724 <_vfiprintf_r+0x21c>
 8011578:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801157c:	f04f 0901 	mov.w	r9, #1
 8011580:	4623      	mov	r3, r4
 8011582:	469a      	mov	sl, r3
 8011584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011588:	b10a      	cbz	r2, 801158e <_vfiprintf_r+0x86>
 801158a:	2a25      	cmp	r2, #37	@ 0x25
 801158c:	d1f9      	bne.n	8011582 <_vfiprintf_r+0x7a>
 801158e:	ebba 0b04 	subs.w	fp, sl, r4
 8011592:	d00b      	beq.n	80115ac <_vfiprintf_r+0xa4>
 8011594:	465b      	mov	r3, fp
 8011596:	4622      	mov	r2, r4
 8011598:	4629      	mov	r1, r5
 801159a:	4630      	mov	r0, r6
 801159c:	f7ff ffa2 	bl	80114e4 <__sfputs_r>
 80115a0:	3001      	adds	r0, #1
 80115a2:	f000 80a7 	beq.w	80116f4 <_vfiprintf_r+0x1ec>
 80115a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115a8:	445a      	add	r2, fp
 80115aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80115ac:	f89a 3000 	ldrb.w	r3, [sl]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f000 809f 	beq.w	80116f4 <_vfiprintf_r+0x1ec>
 80115b6:	2300      	movs	r3, #0
 80115b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80115bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115c0:	f10a 0a01 	add.w	sl, sl, #1
 80115c4:	9304      	str	r3, [sp, #16]
 80115c6:	9307      	str	r3, [sp, #28]
 80115c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80115ce:	4654      	mov	r4, sl
 80115d0:	2205      	movs	r2, #5
 80115d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115d6:	4853      	ldr	r0, [pc, #332]	@ (8011724 <_vfiprintf_r+0x21c>)
 80115d8:	f7ee fdda 	bl	8000190 <memchr>
 80115dc:	9a04      	ldr	r2, [sp, #16]
 80115de:	b9d8      	cbnz	r0, 8011618 <_vfiprintf_r+0x110>
 80115e0:	06d1      	lsls	r1, r2, #27
 80115e2:	bf44      	itt	mi
 80115e4:	2320      	movmi	r3, #32
 80115e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115ea:	0713      	lsls	r3, r2, #28
 80115ec:	bf44      	itt	mi
 80115ee:	232b      	movmi	r3, #43	@ 0x2b
 80115f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115f4:	f89a 3000 	ldrb.w	r3, [sl]
 80115f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80115fa:	d015      	beq.n	8011628 <_vfiprintf_r+0x120>
 80115fc:	9a07      	ldr	r2, [sp, #28]
 80115fe:	4654      	mov	r4, sl
 8011600:	2000      	movs	r0, #0
 8011602:	f04f 0c0a 	mov.w	ip, #10
 8011606:	4621      	mov	r1, r4
 8011608:	f811 3b01 	ldrb.w	r3, [r1], #1
 801160c:	3b30      	subs	r3, #48	@ 0x30
 801160e:	2b09      	cmp	r3, #9
 8011610:	d94b      	bls.n	80116aa <_vfiprintf_r+0x1a2>
 8011612:	b1b0      	cbz	r0, 8011642 <_vfiprintf_r+0x13a>
 8011614:	9207      	str	r2, [sp, #28]
 8011616:	e014      	b.n	8011642 <_vfiprintf_r+0x13a>
 8011618:	eba0 0308 	sub.w	r3, r0, r8
 801161c:	fa09 f303 	lsl.w	r3, r9, r3
 8011620:	4313      	orrs	r3, r2
 8011622:	9304      	str	r3, [sp, #16]
 8011624:	46a2      	mov	sl, r4
 8011626:	e7d2      	b.n	80115ce <_vfiprintf_r+0xc6>
 8011628:	9b03      	ldr	r3, [sp, #12]
 801162a:	1d19      	adds	r1, r3, #4
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	9103      	str	r1, [sp, #12]
 8011630:	2b00      	cmp	r3, #0
 8011632:	bfbb      	ittet	lt
 8011634:	425b      	neglt	r3, r3
 8011636:	f042 0202 	orrlt.w	r2, r2, #2
 801163a:	9307      	strge	r3, [sp, #28]
 801163c:	9307      	strlt	r3, [sp, #28]
 801163e:	bfb8      	it	lt
 8011640:	9204      	strlt	r2, [sp, #16]
 8011642:	7823      	ldrb	r3, [r4, #0]
 8011644:	2b2e      	cmp	r3, #46	@ 0x2e
 8011646:	d10a      	bne.n	801165e <_vfiprintf_r+0x156>
 8011648:	7863      	ldrb	r3, [r4, #1]
 801164a:	2b2a      	cmp	r3, #42	@ 0x2a
 801164c:	d132      	bne.n	80116b4 <_vfiprintf_r+0x1ac>
 801164e:	9b03      	ldr	r3, [sp, #12]
 8011650:	1d1a      	adds	r2, r3, #4
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	9203      	str	r2, [sp, #12]
 8011656:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801165a:	3402      	adds	r4, #2
 801165c:	9305      	str	r3, [sp, #20]
 801165e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011734 <_vfiprintf_r+0x22c>
 8011662:	7821      	ldrb	r1, [r4, #0]
 8011664:	2203      	movs	r2, #3
 8011666:	4650      	mov	r0, sl
 8011668:	f7ee fd92 	bl	8000190 <memchr>
 801166c:	b138      	cbz	r0, 801167e <_vfiprintf_r+0x176>
 801166e:	9b04      	ldr	r3, [sp, #16]
 8011670:	eba0 000a 	sub.w	r0, r0, sl
 8011674:	2240      	movs	r2, #64	@ 0x40
 8011676:	4082      	lsls	r2, r0
 8011678:	4313      	orrs	r3, r2
 801167a:	3401      	adds	r4, #1
 801167c:	9304      	str	r3, [sp, #16]
 801167e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011682:	4829      	ldr	r0, [pc, #164]	@ (8011728 <_vfiprintf_r+0x220>)
 8011684:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011688:	2206      	movs	r2, #6
 801168a:	f7ee fd81 	bl	8000190 <memchr>
 801168e:	2800      	cmp	r0, #0
 8011690:	d03f      	beq.n	8011712 <_vfiprintf_r+0x20a>
 8011692:	4b26      	ldr	r3, [pc, #152]	@ (801172c <_vfiprintf_r+0x224>)
 8011694:	bb1b      	cbnz	r3, 80116de <_vfiprintf_r+0x1d6>
 8011696:	9b03      	ldr	r3, [sp, #12]
 8011698:	3307      	adds	r3, #7
 801169a:	f023 0307 	bic.w	r3, r3, #7
 801169e:	3308      	adds	r3, #8
 80116a0:	9303      	str	r3, [sp, #12]
 80116a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116a4:	443b      	add	r3, r7
 80116a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80116a8:	e76a      	b.n	8011580 <_vfiprintf_r+0x78>
 80116aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80116ae:	460c      	mov	r4, r1
 80116b0:	2001      	movs	r0, #1
 80116b2:	e7a8      	b.n	8011606 <_vfiprintf_r+0xfe>
 80116b4:	2300      	movs	r3, #0
 80116b6:	3401      	adds	r4, #1
 80116b8:	9305      	str	r3, [sp, #20]
 80116ba:	4619      	mov	r1, r3
 80116bc:	f04f 0c0a 	mov.w	ip, #10
 80116c0:	4620      	mov	r0, r4
 80116c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116c6:	3a30      	subs	r2, #48	@ 0x30
 80116c8:	2a09      	cmp	r2, #9
 80116ca:	d903      	bls.n	80116d4 <_vfiprintf_r+0x1cc>
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d0c6      	beq.n	801165e <_vfiprintf_r+0x156>
 80116d0:	9105      	str	r1, [sp, #20]
 80116d2:	e7c4      	b.n	801165e <_vfiprintf_r+0x156>
 80116d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80116d8:	4604      	mov	r4, r0
 80116da:	2301      	movs	r3, #1
 80116dc:	e7f0      	b.n	80116c0 <_vfiprintf_r+0x1b8>
 80116de:	ab03      	add	r3, sp, #12
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	462a      	mov	r2, r5
 80116e4:	4b12      	ldr	r3, [pc, #72]	@ (8011730 <_vfiprintf_r+0x228>)
 80116e6:	a904      	add	r1, sp, #16
 80116e8:	4630      	mov	r0, r6
 80116ea:	f3af 8000 	nop.w
 80116ee:	4607      	mov	r7, r0
 80116f0:	1c78      	adds	r0, r7, #1
 80116f2:	d1d6      	bne.n	80116a2 <_vfiprintf_r+0x19a>
 80116f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80116f6:	07d9      	lsls	r1, r3, #31
 80116f8:	d405      	bmi.n	8011706 <_vfiprintf_r+0x1fe>
 80116fa:	89ab      	ldrh	r3, [r5, #12]
 80116fc:	059a      	lsls	r2, r3, #22
 80116fe:	d402      	bmi.n	8011706 <_vfiprintf_r+0x1fe>
 8011700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011702:	f7ff fec9 	bl	8011498 <__retarget_lock_release_recursive>
 8011706:	89ab      	ldrh	r3, [r5, #12]
 8011708:	065b      	lsls	r3, r3, #25
 801170a:	f53f af1f 	bmi.w	801154c <_vfiprintf_r+0x44>
 801170e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011710:	e71e      	b.n	8011550 <_vfiprintf_r+0x48>
 8011712:	ab03      	add	r3, sp, #12
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	462a      	mov	r2, r5
 8011718:	4b05      	ldr	r3, [pc, #20]	@ (8011730 <_vfiprintf_r+0x228>)
 801171a:	a904      	add	r1, sp, #16
 801171c:	4630      	mov	r0, r6
 801171e:	f000 f91b 	bl	8011958 <_printf_i>
 8011722:	e7e4      	b.n	80116ee <_vfiprintf_r+0x1e6>
 8011724:	08014bb0 	.word	0x08014bb0
 8011728:	08014bba 	.word	0x08014bba
 801172c:	00000000 	.word	0x00000000
 8011730:	080114e5 	.word	0x080114e5
 8011734:	08014bb6 	.word	0x08014bb6

08011738 <sbrk_aligned>:
 8011738:	b570      	push	{r4, r5, r6, lr}
 801173a:	4e0f      	ldr	r6, [pc, #60]	@ (8011778 <sbrk_aligned+0x40>)
 801173c:	460c      	mov	r4, r1
 801173e:	6831      	ldr	r1, [r6, #0]
 8011740:	4605      	mov	r5, r0
 8011742:	b911      	cbnz	r1, 801174a <sbrk_aligned+0x12>
 8011744:	f000 fc8e 	bl	8012064 <_sbrk_r>
 8011748:	6030      	str	r0, [r6, #0]
 801174a:	4621      	mov	r1, r4
 801174c:	4628      	mov	r0, r5
 801174e:	f000 fc89 	bl	8012064 <_sbrk_r>
 8011752:	1c43      	adds	r3, r0, #1
 8011754:	d103      	bne.n	801175e <sbrk_aligned+0x26>
 8011756:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801175a:	4620      	mov	r0, r4
 801175c:	bd70      	pop	{r4, r5, r6, pc}
 801175e:	1cc4      	adds	r4, r0, #3
 8011760:	f024 0403 	bic.w	r4, r4, #3
 8011764:	42a0      	cmp	r0, r4
 8011766:	d0f8      	beq.n	801175a <sbrk_aligned+0x22>
 8011768:	1a21      	subs	r1, r4, r0
 801176a:	4628      	mov	r0, r5
 801176c:	f000 fc7a 	bl	8012064 <_sbrk_r>
 8011770:	3001      	adds	r0, #1
 8011772:	d1f2      	bne.n	801175a <sbrk_aligned+0x22>
 8011774:	e7ef      	b.n	8011756 <sbrk_aligned+0x1e>
 8011776:	bf00      	nop
 8011778:	20001a24 	.word	0x20001a24

0801177c <_malloc_r>:
 801177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011780:	1ccd      	adds	r5, r1, #3
 8011782:	f025 0503 	bic.w	r5, r5, #3
 8011786:	3508      	adds	r5, #8
 8011788:	2d0c      	cmp	r5, #12
 801178a:	bf38      	it	cc
 801178c:	250c      	movcc	r5, #12
 801178e:	2d00      	cmp	r5, #0
 8011790:	4606      	mov	r6, r0
 8011792:	db01      	blt.n	8011798 <_malloc_r+0x1c>
 8011794:	42a9      	cmp	r1, r5
 8011796:	d904      	bls.n	80117a2 <_malloc_r+0x26>
 8011798:	230c      	movs	r3, #12
 801179a:	6033      	str	r3, [r6, #0]
 801179c:	2000      	movs	r0, #0
 801179e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011878 <_malloc_r+0xfc>
 80117a6:	f000 faa1 	bl	8011cec <__malloc_lock>
 80117aa:	f8d8 3000 	ldr.w	r3, [r8]
 80117ae:	461c      	mov	r4, r3
 80117b0:	bb44      	cbnz	r4, 8011804 <_malloc_r+0x88>
 80117b2:	4629      	mov	r1, r5
 80117b4:	4630      	mov	r0, r6
 80117b6:	f7ff ffbf 	bl	8011738 <sbrk_aligned>
 80117ba:	1c43      	adds	r3, r0, #1
 80117bc:	4604      	mov	r4, r0
 80117be:	d158      	bne.n	8011872 <_malloc_r+0xf6>
 80117c0:	f8d8 4000 	ldr.w	r4, [r8]
 80117c4:	4627      	mov	r7, r4
 80117c6:	2f00      	cmp	r7, #0
 80117c8:	d143      	bne.n	8011852 <_malloc_r+0xd6>
 80117ca:	2c00      	cmp	r4, #0
 80117cc:	d04b      	beq.n	8011866 <_malloc_r+0xea>
 80117ce:	6823      	ldr	r3, [r4, #0]
 80117d0:	4639      	mov	r1, r7
 80117d2:	4630      	mov	r0, r6
 80117d4:	eb04 0903 	add.w	r9, r4, r3
 80117d8:	f000 fc44 	bl	8012064 <_sbrk_r>
 80117dc:	4581      	cmp	r9, r0
 80117de:	d142      	bne.n	8011866 <_malloc_r+0xea>
 80117e0:	6821      	ldr	r1, [r4, #0]
 80117e2:	1a6d      	subs	r5, r5, r1
 80117e4:	4629      	mov	r1, r5
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7ff ffa6 	bl	8011738 <sbrk_aligned>
 80117ec:	3001      	adds	r0, #1
 80117ee:	d03a      	beq.n	8011866 <_malloc_r+0xea>
 80117f0:	6823      	ldr	r3, [r4, #0]
 80117f2:	442b      	add	r3, r5
 80117f4:	6023      	str	r3, [r4, #0]
 80117f6:	f8d8 3000 	ldr.w	r3, [r8]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	bb62      	cbnz	r2, 8011858 <_malloc_r+0xdc>
 80117fe:	f8c8 7000 	str.w	r7, [r8]
 8011802:	e00f      	b.n	8011824 <_malloc_r+0xa8>
 8011804:	6822      	ldr	r2, [r4, #0]
 8011806:	1b52      	subs	r2, r2, r5
 8011808:	d420      	bmi.n	801184c <_malloc_r+0xd0>
 801180a:	2a0b      	cmp	r2, #11
 801180c:	d917      	bls.n	801183e <_malloc_r+0xc2>
 801180e:	1961      	adds	r1, r4, r5
 8011810:	42a3      	cmp	r3, r4
 8011812:	6025      	str	r5, [r4, #0]
 8011814:	bf18      	it	ne
 8011816:	6059      	strne	r1, [r3, #4]
 8011818:	6863      	ldr	r3, [r4, #4]
 801181a:	bf08      	it	eq
 801181c:	f8c8 1000 	streq.w	r1, [r8]
 8011820:	5162      	str	r2, [r4, r5]
 8011822:	604b      	str	r3, [r1, #4]
 8011824:	4630      	mov	r0, r6
 8011826:	f000 fa67 	bl	8011cf8 <__malloc_unlock>
 801182a:	f104 000b 	add.w	r0, r4, #11
 801182e:	1d23      	adds	r3, r4, #4
 8011830:	f020 0007 	bic.w	r0, r0, #7
 8011834:	1ac2      	subs	r2, r0, r3
 8011836:	bf1c      	itt	ne
 8011838:	1a1b      	subne	r3, r3, r0
 801183a:	50a3      	strne	r3, [r4, r2]
 801183c:	e7af      	b.n	801179e <_malloc_r+0x22>
 801183e:	6862      	ldr	r2, [r4, #4]
 8011840:	42a3      	cmp	r3, r4
 8011842:	bf0c      	ite	eq
 8011844:	f8c8 2000 	streq.w	r2, [r8]
 8011848:	605a      	strne	r2, [r3, #4]
 801184a:	e7eb      	b.n	8011824 <_malloc_r+0xa8>
 801184c:	4623      	mov	r3, r4
 801184e:	6864      	ldr	r4, [r4, #4]
 8011850:	e7ae      	b.n	80117b0 <_malloc_r+0x34>
 8011852:	463c      	mov	r4, r7
 8011854:	687f      	ldr	r7, [r7, #4]
 8011856:	e7b6      	b.n	80117c6 <_malloc_r+0x4a>
 8011858:	461a      	mov	r2, r3
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	42a3      	cmp	r3, r4
 801185e:	d1fb      	bne.n	8011858 <_malloc_r+0xdc>
 8011860:	2300      	movs	r3, #0
 8011862:	6053      	str	r3, [r2, #4]
 8011864:	e7de      	b.n	8011824 <_malloc_r+0xa8>
 8011866:	230c      	movs	r3, #12
 8011868:	6033      	str	r3, [r6, #0]
 801186a:	4630      	mov	r0, r6
 801186c:	f000 fa44 	bl	8011cf8 <__malloc_unlock>
 8011870:	e794      	b.n	801179c <_malloc_r+0x20>
 8011872:	6005      	str	r5, [r0, #0]
 8011874:	e7d6      	b.n	8011824 <_malloc_r+0xa8>
 8011876:	bf00      	nop
 8011878:	20001a28 	.word	0x20001a28

0801187c <_printf_common>:
 801187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011880:	4616      	mov	r6, r2
 8011882:	4698      	mov	r8, r3
 8011884:	688a      	ldr	r2, [r1, #8]
 8011886:	690b      	ldr	r3, [r1, #16]
 8011888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801188c:	4293      	cmp	r3, r2
 801188e:	bfb8      	it	lt
 8011890:	4613      	movlt	r3, r2
 8011892:	6033      	str	r3, [r6, #0]
 8011894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011898:	4607      	mov	r7, r0
 801189a:	460c      	mov	r4, r1
 801189c:	b10a      	cbz	r2, 80118a2 <_printf_common+0x26>
 801189e:	3301      	adds	r3, #1
 80118a0:	6033      	str	r3, [r6, #0]
 80118a2:	6823      	ldr	r3, [r4, #0]
 80118a4:	0699      	lsls	r1, r3, #26
 80118a6:	bf42      	ittt	mi
 80118a8:	6833      	ldrmi	r3, [r6, #0]
 80118aa:	3302      	addmi	r3, #2
 80118ac:	6033      	strmi	r3, [r6, #0]
 80118ae:	6825      	ldr	r5, [r4, #0]
 80118b0:	f015 0506 	ands.w	r5, r5, #6
 80118b4:	d106      	bne.n	80118c4 <_printf_common+0x48>
 80118b6:	f104 0a19 	add.w	sl, r4, #25
 80118ba:	68e3      	ldr	r3, [r4, #12]
 80118bc:	6832      	ldr	r2, [r6, #0]
 80118be:	1a9b      	subs	r3, r3, r2
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	dc26      	bgt.n	8011912 <_printf_common+0x96>
 80118c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80118c8:	6822      	ldr	r2, [r4, #0]
 80118ca:	3b00      	subs	r3, #0
 80118cc:	bf18      	it	ne
 80118ce:	2301      	movne	r3, #1
 80118d0:	0692      	lsls	r2, r2, #26
 80118d2:	d42b      	bmi.n	801192c <_printf_common+0xb0>
 80118d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80118d8:	4641      	mov	r1, r8
 80118da:	4638      	mov	r0, r7
 80118dc:	47c8      	blx	r9
 80118de:	3001      	adds	r0, #1
 80118e0:	d01e      	beq.n	8011920 <_printf_common+0xa4>
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	6922      	ldr	r2, [r4, #16]
 80118e6:	f003 0306 	and.w	r3, r3, #6
 80118ea:	2b04      	cmp	r3, #4
 80118ec:	bf02      	ittt	eq
 80118ee:	68e5      	ldreq	r5, [r4, #12]
 80118f0:	6833      	ldreq	r3, [r6, #0]
 80118f2:	1aed      	subeq	r5, r5, r3
 80118f4:	68a3      	ldr	r3, [r4, #8]
 80118f6:	bf0c      	ite	eq
 80118f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118fc:	2500      	movne	r5, #0
 80118fe:	4293      	cmp	r3, r2
 8011900:	bfc4      	itt	gt
 8011902:	1a9b      	subgt	r3, r3, r2
 8011904:	18ed      	addgt	r5, r5, r3
 8011906:	2600      	movs	r6, #0
 8011908:	341a      	adds	r4, #26
 801190a:	42b5      	cmp	r5, r6
 801190c:	d11a      	bne.n	8011944 <_printf_common+0xc8>
 801190e:	2000      	movs	r0, #0
 8011910:	e008      	b.n	8011924 <_printf_common+0xa8>
 8011912:	2301      	movs	r3, #1
 8011914:	4652      	mov	r2, sl
 8011916:	4641      	mov	r1, r8
 8011918:	4638      	mov	r0, r7
 801191a:	47c8      	blx	r9
 801191c:	3001      	adds	r0, #1
 801191e:	d103      	bne.n	8011928 <_printf_common+0xac>
 8011920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011928:	3501      	adds	r5, #1
 801192a:	e7c6      	b.n	80118ba <_printf_common+0x3e>
 801192c:	18e1      	adds	r1, r4, r3
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	2030      	movs	r0, #48	@ 0x30
 8011932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011936:	4422      	add	r2, r4
 8011938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801193c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011940:	3302      	adds	r3, #2
 8011942:	e7c7      	b.n	80118d4 <_printf_common+0x58>
 8011944:	2301      	movs	r3, #1
 8011946:	4622      	mov	r2, r4
 8011948:	4641      	mov	r1, r8
 801194a:	4638      	mov	r0, r7
 801194c:	47c8      	blx	r9
 801194e:	3001      	adds	r0, #1
 8011950:	d0e6      	beq.n	8011920 <_printf_common+0xa4>
 8011952:	3601      	adds	r6, #1
 8011954:	e7d9      	b.n	801190a <_printf_common+0x8e>
	...

08011958 <_printf_i>:
 8011958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801195c:	7e0f      	ldrb	r7, [r1, #24]
 801195e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011960:	2f78      	cmp	r7, #120	@ 0x78
 8011962:	4691      	mov	r9, r2
 8011964:	4680      	mov	r8, r0
 8011966:	460c      	mov	r4, r1
 8011968:	469a      	mov	sl, r3
 801196a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801196e:	d807      	bhi.n	8011980 <_printf_i+0x28>
 8011970:	2f62      	cmp	r7, #98	@ 0x62
 8011972:	d80a      	bhi.n	801198a <_printf_i+0x32>
 8011974:	2f00      	cmp	r7, #0
 8011976:	f000 80d1 	beq.w	8011b1c <_printf_i+0x1c4>
 801197a:	2f58      	cmp	r7, #88	@ 0x58
 801197c:	f000 80b8 	beq.w	8011af0 <_printf_i+0x198>
 8011980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011988:	e03a      	b.n	8011a00 <_printf_i+0xa8>
 801198a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801198e:	2b15      	cmp	r3, #21
 8011990:	d8f6      	bhi.n	8011980 <_printf_i+0x28>
 8011992:	a101      	add	r1, pc, #4	@ (adr r1, 8011998 <_printf_i+0x40>)
 8011994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011998:	080119f1 	.word	0x080119f1
 801199c:	08011a05 	.word	0x08011a05
 80119a0:	08011981 	.word	0x08011981
 80119a4:	08011981 	.word	0x08011981
 80119a8:	08011981 	.word	0x08011981
 80119ac:	08011981 	.word	0x08011981
 80119b0:	08011a05 	.word	0x08011a05
 80119b4:	08011981 	.word	0x08011981
 80119b8:	08011981 	.word	0x08011981
 80119bc:	08011981 	.word	0x08011981
 80119c0:	08011981 	.word	0x08011981
 80119c4:	08011b03 	.word	0x08011b03
 80119c8:	08011a2f 	.word	0x08011a2f
 80119cc:	08011abd 	.word	0x08011abd
 80119d0:	08011981 	.word	0x08011981
 80119d4:	08011981 	.word	0x08011981
 80119d8:	08011b25 	.word	0x08011b25
 80119dc:	08011981 	.word	0x08011981
 80119e0:	08011a2f 	.word	0x08011a2f
 80119e4:	08011981 	.word	0x08011981
 80119e8:	08011981 	.word	0x08011981
 80119ec:	08011ac5 	.word	0x08011ac5
 80119f0:	6833      	ldr	r3, [r6, #0]
 80119f2:	1d1a      	adds	r2, r3, #4
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	6032      	str	r2, [r6, #0]
 80119f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80119fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011a00:	2301      	movs	r3, #1
 8011a02:	e09c      	b.n	8011b3e <_printf_i+0x1e6>
 8011a04:	6833      	ldr	r3, [r6, #0]
 8011a06:	6820      	ldr	r0, [r4, #0]
 8011a08:	1d19      	adds	r1, r3, #4
 8011a0a:	6031      	str	r1, [r6, #0]
 8011a0c:	0606      	lsls	r6, r0, #24
 8011a0e:	d501      	bpl.n	8011a14 <_printf_i+0xbc>
 8011a10:	681d      	ldr	r5, [r3, #0]
 8011a12:	e003      	b.n	8011a1c <_printf_i+0xc4>
 8011a14:	0645      	lsls	r5, r0, #25
 8011a16:	d5fb      	bpl.n	8011a10 <_printf_i+0xb8>
 8011a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011a1c:	2d00      	cmp	r5, #0
 8011a1e:	da03      	bge.n	8011a28 <_printf_i+0xd0>
 8011a20:	232d      	movs	r3, #45	@ 0x2d
 8011a22:	426d      	negs	r5, r5
 8011a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a28:	4858      	ldr	r0, [pc, #352]	@ (8011b8c <_printf_i+0x234>)
 8011a2a:	230a      	movs	r3, #10
 8011a2c:	e011      	b.n	8011a52 <_printf_i+0xfa>
 8011a2e:	6821      	ldr	r1, [r4, #0]
 8011a30:	6833      	ldr	r3, [r6, #0]
 8011a32:	0608      	lsls	r0, r1, #24
 8011a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8011a38:	d402      	bmi.n	8011a40 <_printf_i+0xe8>
 8011a3a:	0649      	lsls	r1, r1, #25
 8011a3c:	bf48      	it	mi
 8011a3e:	b2ad      	uxthmi	r5, r5
 8011a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8011a42:	4852      	ldr	r0, [pc, #328]	@ (8011b8c <_printf_i+0x234>)
 8011a44:	6033      	str	r3, [r6, #0]
 8011a46:	bf14      	ite	ne
 8011a48:	230a      	movne	r3, #10
 8011a4a:	2308      	moveq	r3, #8
 8011a4c:	2100      	movs	r1, #0
 8011a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011a52:	6866      	ldr	r6, [r4, #4]
 8011a54:	60a6      	str	r6, [r4, #8]
 8011a56:	2e00      	cmp	r6, #0
 8011a58:	db05      	blt.n	8011a66 <_printf_i+0x10e>
 8011a5a:	6821      	ldr	r1, [r4, #0]
 8011a5c:	432e      	orrs	r6, r5
 8011a5e:	f021 0104 	bic.w	r1, r1, #4
 8011a62:	6021      	str	r1, [r4, #0]
 8011a64:	d04b      	beq.n	8011afe <_printf_i+0x1a6>
 8011a66:	4616      	mov	r6, r2
 8011a68:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a6c:	fb03 5711 	mls	r7, r3, r1, r5
 8011a70:	5dc7      	ldrb	r7, [r0, r7]
 8011a72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a76:	462f      	mov	r7, r5
 8011a78:	42bb      	cmp	r3, r7
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	d9f4      	bls.n	8011a68 <_printf_i+0x110>
 8011a7e:	2b08      	cmp	r3, #8
 8011a80:	d10b      	bne.n	8011a9a <_printf_i+0x142>
 8011a82:	6823      	ldr	r3, [r4, #0]
 8011a84:	07df      	lsls	r7, r3, #31
 8011a86:	d508      	bpl.n	8011a9a <_printf_i+0x142>
 8011a88:	6923      	ldr	r3, [r4, #16]
 8011a8a:	6861      	ldr	r1, [r4, #4]
 8011a8c:	4299      	cmp	r1, r3
 8011a8e:	bfde      	ittt	le
 8011a90:	2330      	movle	r3, #48	@ 0x30
 8011a92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a96:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011a9a:	1b92      	subs	r2, r2, r6
 8011a9c:	6122      	str	r2, [r4, #16]
 8011a9e:	f8cd a000 	str.w	sl, [sp]
 8011aa2:	464b      	mov	r3, r9
 8011aa4:	aa03      	add	r2, sp, #12
 8011aa6:	4621      	mov	r1, r4
 8011aa8:	4640      	mov	r0, r8
 8011aaa:	f7ff fee7 	bl	801187c <_printf_common>
 8011aae:	3001      	adds	r0, #1
 8011ab0:	d14a      	bne.n	8011b48 <_printf_i+0x1f0>
 8011ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ab6:	b004      	add	sp, #16
 8011ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011abc:	6823      	ldr	r3, [r4, #0]
 8011abe:	f043 0320 	orr.w	r3, r3, #32
 8011ac2:	6023      	str	r3, [r4, #0]
 8011ac4:	4832      	ldr	r0, [pc, #200]	@ (8011b90 <_printf_i+0x238>)
 8011ac6:	2778      	movs	r7, #120	@ 0x78
 8011ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011acc:	6823      	ldr	r3, [r4, #0]
 8011ace:	6831      	ldr	r1, [r6, #0]
 8011ad0:	061f      	lsls	r7, r3, #24
 8011ad2:	f851 5b04 	ldr.w	r5, [r1], #4
 8011ad6:	d402      	bmi.n	8011ade <_printf_i+0x186>
 8011ad8:	065f      	lsls	r7, r3, #25
 8011ada:	bf48      	it	mi
 8011adc:	b2ad      	uxthmi	r5, r5
 8011ade:	6031      	str	r1, [r6, #0]
 8011ae0:	07d9      	lsls	r1, r3, #31
 8011ae2:	bf44      	itt	mi
 8011ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8011ae8:	6023      	strmi	r3, [r4, #0]
 8011aea:	b11d      	cbz	r5, 8011af4 <_printf_i+0x19c>
 8011aec:	2310      	movs	r3, #16
 8011aee:	e7ad      	b.n	8011a4c <_printf_i+0xf4>
 8011af0:	4826      	ldr	r0, [pc, #152]	@ (8011b8c <_printf_i+0x234>)
 8011af2:	e7e9      	b.n	8011ac8 <_printf_i+0x170>
 8011af4:	6823      	ldr	r3, [r4, #0]
 8011af6:	f023 0320 	bic.w	r3, r3, #32
 8011afa:	6023      	str	r3, [r4, #0]
 8011afc:	e7f6      	b.n	8011aec <_printf_i+0x194>
 8011afe:	4616      	mov	r6, r2
 8011b00:	e7bd      	b.n	8011a7e <_printf_i+0x126>
 8011b02:	6833      	ldr	r3, [r6, #0]
 8011b04:	6825      	ldr	r5, [r4, #0]
 8011b06:	6961      	ldr	r1, [r4, #20]
 8011b08:	1d18      	adds	r0, r3, #4
 8011b0a:	6030      	str	r0, [r6, #0]
 8011b0c:	062e      	lsls	r6, r5, #24
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	d501      	bpl.n	8011b16 <_printf_i+0x1be>
 8011b12:	6019      	str	r1, [r3, #0]
 8011b14:	e002      	b.n	8011b1c <_printf_i+0x1c4>
 8011b16:	0668      	lsls	r0, r5, #25
 8011b18:	d5fb      	bpl.n	8011b12 <_printf_i+0x1ba>
 8011b1a:	8019      	strh	r1, [r3, #0]
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	6123      	str	r3, [r4, #16]
 8011b20:	4616      	mov	r6, r2
 8011b22:	e7bc      	b.n	8011a9e <_printf_i+0x146>
 8011b24:	6833      	ldr	r3, [r6, #0]
 8011b26:	1d1a      	adds	r2, r3, #4
 8011b28:	6032      	str	r2, [r6, #0]
 8011b2a:	681e      	ldr	r6, [r3, #0]
 8011b2c:	6862      	ldr	r2, [r4, #4]
 8011b2e:	2100      	movs	r1, #0
 8011b30:	4630      	mov	r0, r6
 8011b32:	f7ee fb2d 	bl	8000190 <memchr>
 8011b36:	b108      	cbz	r0, 8011b3c <_printf_i+0x1e4>
 8011b38:	1b80      	subs	r0, r0, r6
 8011b3a:	6060      	str	r0, [r4, #4]
 8011b3c:	6863      	ldr	r3, [r4, #4]
 8011b3e:	6123      	str	r3, [r4, #16]
 8011b40:	2300      	movs	r3, #0
 8011b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b46:	e7aa      	b.n	8011a9e <_printf_i+0x146>
 8011b48:	6923      	ldr	r3, [r4, #16]
 8011b4a:	4632      	mov	r2, r6
 8011b4c:	4649      	mov	r1, r9
 8011b4e:	4640      	mov	r0, r8
 8011b50:	47d0      	blx	sl
 8011b52:	3001      	adds	r0, #1
 8011b54:	d0ad      	beq.n	8011ab2 <_printf_i+0x15a>
 8011b56:	6823      	ldr	r3, [r4, #0]
 8011b58:	079b      	lsls	r3, r3, #30
 8011b5a:	d413      	bmi.n	8011b84 <_printf_i+0x22c>
 8011b5c:	68e0      	ldr	r0, [r4, #12]
 8011b5e:	9b03      	ldr	r3, [sp, #12]
 8011b60:	4298      	cmp	r0, r3
 8011b62:	bfb8      	it	lt
 8011b64:	4618      	movlt	r0, r3
 8011b66:	e7a6      	b.n	8011ab6 <_printf_i+0x15e>
 8011b68:	2301      	movs	r3, #1
 8011b6a:	4632      	mov	r2, r6
 8011b6c:	4649      	mov	r1, r9
 8011b6e:	4640      	mov	r0, r8
 8011b70:	47d0      	blx	sl
 8011b72:	3001      	adds	r0, #1
 8011b74:	d09d      	beq.n	8011ab2 <_printf_i+0x15a>
 8011b76:	3501      	adds	r5, #1
 8011b78:	68e3      	ldr	r3, [r4, #12]
 8011b7a:	9903      	ldr	r1, [sp, #12]
 8011b7c:	1a5b      	subs	r3, r3, r1
 8011b7e:	42ab      	cmp	r3, r5
 8011b80:	dcf2      	bgt.n	8011b68 <_printf_i+0x210>
 8011b82:	e7eb      	b.n	8011b5c <_printf_i+0x204>
 8011b84:	2500      	movs	r5, #0
 8011b86:	f104 0619 	add.w	r6, r4, #25
 8011b8a:	e7f5      	b.n	8011b78 <_printf_i+0x220>
 8011b8c:	08014bc1 	.word	0x08014bc1
 8011b90:	08014bd2 	.word	0x08014bd2

08011b94 <__sflush_r>:
 8011b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9c:	0716      	lsls	r6, r2, #28
 8011b9e:	4605      	mov	r5, r0
 8011ba0:	460c      	mov	r4, r1
 8011ba2:	d454      	bmi.n	8011c4e <__sflush_r+0xba>
 8011ba4:	684b      	ldr	r3, [r1, #4]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	dc02      	bgt.n	8011bb0 <__sflush_r+0x1c>
 8011baa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	dd48      	ble.n	8011c42 <__sflush_r+0xae>
 8011bb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bb2:	2e00      	cmp	r6, #0
 8011bb4:	d045      	beq.n	8011c42 <__sflush_r+0xae>
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011bbc:	682f      	ldr	r7, [r5, #0]
 8011bbe:	6a21      	ldr	r1, [r4, #32]
 8011bc0:	602b      	str	r3, [r5, #0]
 8011bc2:	d030      	beq.n	8011c26 <__sflush_r+0x92>
 8011bc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011bc6:	89a3      	ldrh	r3, [r4, #12]
 8011bc8:	0759      	lsls	r1, r3, #29
 8011bca:	d505      	bpl.n	8011bd8 <__sflush_r+0x44>
 8011bcc:	6863      	ldr	r3, [r4, #4]
 8011bce:	1ad2      	subs	r2, r2, r3
 8011bd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011bd2:	b10b      	cbz	r3, 8011bd8 <__sflush_r+0x44>
 8011bd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011bd6:	1ad2      	subs	r2, r2, r3
 8011bd8:	2300      	movs	r3, #0
 8011bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011bdc:	6a21      	ldr	r1, [r4, #32]
 8011bde:	4628      	mov	r0, r5
 8011be0:	47b0      	blx	r6
 8011be2:	1c43      	adds	r3, r0, #1
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	d106      	bne.n	8011bf6 <__sflush_r+0x62>
 8011be8:	6829      	ldr	r1, [r5, #0]
 8011bea:	291d      	cmp	r1, #29
 8011bec:	d82b      	bhi.n	8011c46 <__sflush_r+0xb2>
 8011bee:	4a2a      	ldr	r2, [pc, #168]	@ (8011c98 <__sflush_r+0x104>)
 8011bf0:	40ca      	lsrs	r2, r1
 8011bf2:	07d6      	lsls	r6, r2, #31
 8011bf4:	d527      	bpl.n	8011c46 <__sflush_r+0xb2>
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	6062      	str	r2, [r4, #4]
 8011bfa:	04d9      	lsls	r1, r3, #19
 8011bfc:	6922      	ldr	r2, [r4, #16]
 8011bfe:	6022      	str	r2, [r4, #0]
 8011c00:	d504      	bpl.n	8011c0c <__sflush_r+0x78>
 8011c02:	1c42      	adds	r2, r0, #1
 8011c04:	d101      	bne.n	8011c0a <__sflush_r+0x76>
 8011c06:	682b      	ldr	r3, [r5, #0]
 8011c08:	b903      	cbnz	r3, 8011c0c <__sflush_r+0x78>
 8011c0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8011c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c0e:	602f      	str	r7, [r5, #0]
 8011c10:	b1b9      	cbz	r1, 8011c42 <__sflush_r+0xae>
 8011c12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c16:	4299      	cmp	r1, r3
 8011c18:	d002      	beq.n	8011c20 <__sflush_r+0x8c>
 8011c1a:	4628      	mov	r0, r5
 8011c1c:	f000 fa66 	bl	80120ec <_free_r>
 8011c20:	2300      	movs	r3, #0
 8011c22:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c24:	e00d      	b.n	8011c42 <__sflush_r+0xae>
 8011c26:	2301      	movs	r3, #1
 8011c28:	4628      	mov	r0, r5
 8011c2a:	47b0      	blx	r6
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	1c50      	adds	r0, r2, #1
 8011c30:	d1c9      	bne.n	8011bc6 <__sflush_r+0x32>
 8011c32:	682b      	ldr	r3, [r5, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d0c6      	beq.n	8011bc6 <__sflush_r+0x32>
 8011c38:	2b1d      	cmp	r3, #29
 8011c3a:	d001      	beq.n	8011c40 <__sflush_r+0xac>
 8011c3c:	2b16      	cmp	r3, #22
 8011c3e:	d11e      	bne.n	8011c7e <__sflush_r+0xea>
 8011c40:	602f      	str	r7, [r5, #0]
 8011c42:	2000      	movs	r0, #0
 8011c44:	e022      	b.n	8011c8c <__sflush_r+0xf8>
 8011c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c4a:	b21b      	sxth	r3, r3
 8011c4c:	e01b      	b.n	8011c86 <__sflush_r+0xf2>
 8011c4e:	690f      	ldr	r7, [r1, #16]
 8011c50:	2f00      	cmp	r7, #0
 8011c52:	d0f6      	beq.n	8011c42 <__sflush_r+0xae>
 8011c54:	0793      	lsls	r3, r2, #30
 8011c56:	680e      	ldr	r6, [r1, #0]
 8011c58:	bf08      	it	eq
 8011c5a:	694b      	ldreq	r3, [r1, #20]
 8011c5c:	600f      	str	r7, [r1, #0]
 8011c5e:	bf18      	it	ne
 8011c60:	2300      	movne	r3, #0
 8011c62:	eba6 0807 	sub.w	r8, r6, r7
 8011c66:	608b      	str	r3, [r1, #8]
 8011c68:	f1b8 0f00 	cmp.w	r8, #0
 8011c6c:	dde9      	ble.n	8011c42 <__sflush_r+0xae>
 8011c6e:	6a21      	ldr	r1, [r4, #32]
 8011c70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c72:	4643      	mov	r3, r8
 8011c74:	463a      	mov	r2, r7
 8011c76:	4628      	mov	r0, r5
 8011c78:	47b0      	blx	r6
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	dc08      	bgt.n	8011c90 <__sflush_r+0xfc>
 8011c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c86:	81a3      	strh	r3, [r4, #12]
 8011c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c90:	4407      	add	r7, r0
 8011c92:	eba8 0800 	sub.w	r8, r8, r0
 8011c96:	e7e7      	b.n	8011c68 <__sflush_r+0xd4>
 8011c98:	20400001 	.word	0x20400001

08011c9c <_fflush_r>:
 8011c9c:	b538      	push	{r3, r4, r5, lr}
 8011c9e:	690b      	ldr	r3, [r1, #16]
 8011ca0:	4605      	mov	r5, r0
 8011ca2:	460c      	mov	r4, r1
 8011ca4:	b913      	cbnz	r3, 8011cac <_fflush_r+0x10>
 8011ca6:	2500      	movs	r5, #0
 8011ca8:	4628      	mov	r0, r5
 8011caa:	bd38      	pop	{r3, r4, r5, pc}
 8011cac:	b118      	cbz	r0, 8011cb6 <_fflush_r+0x1a>
 8011cae:	6a03      	ldr	r3, [r0, #32]
 8011cb0:	b90b      	cbnz	r3, 8011cb6 <_fflush_r+0x1a>
 8011cb2:	f7ff faf9 	bl	80112a8 <__sinit>
 8011cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d0f3      	beq.n	8011ca6 <_fflush_r+0xa>
 8011cbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011cc0:	07d0      	lsls	r0, r2, #31
 8011cc2:	d404      	bmi.n	8011cce <_fflush_r+0x32>
 8011cc4:	0599      	lsls	r1, r3, #22
 8011cc6:	d402      	bmi.n	8011cce <_fflush_r+0x32>
 8011cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cca:	f7ff fbe4 	bl	8011496 <__retarget_lock_acquire_recursive>
 8011cce:	4628      	mov	r0, r5
 8011cd0:	4621      	mov	r1, r4
 8011cd2:	f7ff ff5f 	bl	8011b94 <__sflush_r>
 8011cd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cd8:	07da      	lsls	r2, r3, #31
 8011cda:	4605      	mov	r5, r0
 8011cdc:	d4e4      	bmi.n	8011ca8 <_fflush_r+0xc>
 8011cde:	89a3      	ldrh	r3, [r4, #12]
 8011ce0:	059b      	lsls	r3, r3, #22
 8011ce2:	d4e1      	bmi.n	8011ca8 <_fflush_r+0xc>
 8011ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ce6:	f7ff fbd7 	bl	8011498 <__retarget_lock_release_recursive>
 8011cea:	e7dd      	b.n	8011ca8 <_fflush_r+0xc>

08011cec <__malloc_lock>:
 8011cec:	4801      	ldr	r0, [pc, #4]	@ (8011cf4 <__malloc_lock+0x8>)
 8011cee:	f7ff bbd2 	b.w	8011496 <__retarget_lock_acquire_recursive>
 8011cf2:	bf00      	nop
 8011cf4:	20001a20 	.word	0x20001a20

08011cf8 <__malloc_unlock>:
 8011cf8:	4801      	ldr	r0, [pc, #4]	@ (8011d00 <__malloc_unlock+0x8>)
 8011cfa:	f7ff bbcd 	b.w	8011498 <__retarget_lock_release_recursive>
 8011cfe:	bf00      	nop
 8011d00:	20001a20 	.word	0x20001a20

08011d04 <__sread>:
 8011d04:	b510      	push	{r4, lr}
 8011d06:	460c      	mov	r4, r1
 8011d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d0c:	f000 f998 	bl	8012040 <_read_r>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	bfab      	itete	ge
 8011d14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d16:	89a3      	ldrhlt	r3, [r4, #12]
 8011d18:	181b      	addge	r3, r3, r0
 8011d1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d1e:	bfac      	ite	ge
 8011d20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d22:	81a3      	strhlt	r3, [r4, #12]
 8011d24:	bd10      	pop	{r4, pc}

08011d26 <__swrite>:
 8011d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2a:	461f      	mov	r7, r3
 8011d2c:	898b      	ldrh	r3, [r1, #12]
 8011d2e:	05db      	lsls	r3, r3, #23
 8011d30:	4605      	mov	r5, r0
 8011d32:	460c      	mov	r4, r1
 8011d34:	4616      	mov	r6, r2
 8011d36:	d505      	bpl.n	8011d44 <__swrite+0x1e>
 8011d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d3c:	2302      	movs	r3, #2
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f000 f96c 	bl	801201c <_lseek_r>
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d4e:	81a3      	strh	r3, [r4, #12]
 8011d50:	4632      	mov	r2, r6
 8011d52:	463b      	mov	r3, r7
 8011d54:	4628      	mov	r0, r5
 8011d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d5a:	f000 b993 	b.w	8012084 <_write_r>

08011d5e <__sseek>:
 8011d5e:	b510      	push	{r4, lr}
 8011d60:	460c      	mov	r4, r1
 8011d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d66:	f000 f959 	bl	801201c <_lseek_r>
 8011d6a:	1c43      	adds	r3, r0, #1
 8011d6c:	89a3      	ldrh	r3, [r4, #12]
 8011d6e:	bf15      	itete	ne
 8011d70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d7a:	81a3      	strheq	r3, [r4, #12]
 8011d7c:	bf18      	it	ne
 8011d7e:	81a3      	strhne	r3, [r4, #12]
 8011d80:	bd10      	pop	{r4, pc}

08011d82 <__sclose>:
 8011d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d86:	f000 b98f 	b.w	80120a8 <_close_r>

08011d8a <__swbuf_r>:
 8011d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d8c:	460e      	mov	r6, r1
 8011d8e:	4614      	mov	r4, r2
 8011d90:	4605      	mov	r5, r0
 8011d92:	b118      	cbz	r0, 8011d9c <__swbuf_r+0x12>
 8011d94:	6a03      	ldr	r3, [r0, #32]
 8011d96:	b90b      	cbnz	r3, 8011d9c <__swbuf_r+0x12>
 8011d98:	f7ff fa86 	bl	80112a8 <__sinit>
 8011d9c:	69a3      	ldr	r3, [r4, #24]
 8011d9e:	60a3      	str	r3, [r4, #8]
 8011da0:	89a3      	ldrh	r3, [r4, #12]
 8011da2:	071a      	lsls	r2, r3, #28
 8011da4:	d501      	bpl.n	8011daa <__swbuf_r+0x20>
 8011da6:	6923      	ldr	r3, [r4, #16]
 8011da8:	b943      	cbnz	r3, 8011dbc <__swbuf_r+0x32>
 8011daa:	4621      	mov	r1, r4
 8011dac:	4628      	mov	r0, r5
 8011dae:	f000 f82b 	bl	8011e08 <__swsetup_r>
 8011db2:	b118      	cbz	r0, 8011dbc <__swbuf_r+0x32>
 8011db4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011db8:	4638      	mov	r0, r7
 8011dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dbc:	6823      	ldr	r3, [r4, #0]
 8011dbe:	6922      	ldr	r2, [r4, #16]
 8011dc0:	1a98      	subs	r0, r3, r2
 8011dc2:	6963      	ldr	r3, [r4, #20]
 8011dc4:	b2f6      	uxtb	r6, r6
 8011dc6:	4283      	cmp	r3, r0
 8011dc8:	4637      	mov	r7, r6
 8011dca:	dc05      	bgt.n	8011dd8 <__swbuf_r+0x4e>
 8011dcc:	4621      	mov	r1, r4
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f7ff ff64 	bl	8011c9c <_fflush_r>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d1ed      	bne.n	8011db4 <__swbuf_r+0x2a>
 8011dd8:	68a3      	ldr	r3, [r4, #8]
 8011dda:	3b01      	subs	r3, #1
 8011ddc:	60a3      	str	r3, [r4, #8]
 8011dde:	6823      	ldr	r3, [r4, #0]
 8011de0:	1c5a      	adds	r2, r3, #1
 8011de2:	6022      	str	r2, [r4, #0]
 8011de4:	701e      	strb	r6, [r3, #0]
 8011de6:	6962      	ldr	r2, [r4, #20]
 8011de8:	1c43      	adds	r3, r0, #1
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d004      	beq.n	8011df8 <__swbuf_r+0x6e>
 8011dee:	89a3      	ldrh	r3, [r4, #12]
 8011df0:	07db      	lsls	r3, r3, #31
 8011df2:	d5e1      	bpl.n	8011db8 <__swbuf_r+0x2e>
 8011df4:	2e0a      	cmp	r6, #10
 8011df6:	d1df      	bne.n	8011db8 <__swbuf_r+0x2e>
 8011df8:	4621      	mov	r1, r4
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	f7ff ff4e 	bl	8011c9c <_fflush_r>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d0d9      	beq.n	8011db8 <__swbuf_r+0x2e>
 8011e04:	e7d6      	b.n	8011db4 <__swbuf_r+0x2a>
	...

08011e08 <__swsetup_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4b29      	ldr	r3, [pc, #164]	@ (8011eb0 <__swsetup_r+0xa8>)
 8011e0c:	4605      	mov	r5, r0
 8011e0e:	6818      	ldr	r0, [r3, #0]
 8011e10:	460c      	mov	r4, r1
 8011e12:	b118      	cbz	r0, 8011e1c <__swsetup_r+0x14>
 8011e14:	6a03      	ldr	r3, [r0, #32]
 8011e16:	b90b      	cbnz	r3, 8011e1c <__swsetup_r+0x14>
 8011e18:	f7ff fa46 	bl	80112a8 <__sinit>
 8011e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e20:	0719      	lsls	r1, r3, #28
 8011e22:	d422      	bmi.n	8011e6a <__swsetup_r+0x62>
 8011e24:	06da      	lsls	r2, r3, #27
 8011e26:	d407      	bmi.n	8011e38 <__swsetup_r+0x30>
 8011e28:	2209      	movs	r2, #9
 8011e2a:	602a      	str	r2, [r5, #0]
 8011e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e30:	81a3      	strh	r3, [r4, #12]
 8011e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e36:	e033      	b.n	8011ea0 <__swsetup_r+0x98>
 8011e38:	0758      	lsls	r0, r3, #29
 8011e3a:	d512      	bpl.n	8011e62 <__swsetup_r+0x5a>
 8011e3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e3e:	b141      	cbz	r1, 8011e52 <__swsetup_r+0x4a>
 8011e40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e44:	4299      	cmp	r1, r3
 8011e46:	d002      	beq.n	8011e4e <__swsetup_r+0x46>
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 f94f 	bl	80120ec <_free_r>
 8011e4e:	2300      	movs	r3, #0
 8011e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e58:	81a3      	strh	r3, [r4, #12]
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	6063      	str	r3, [r4, #4]
 8011e5e:	6923      	ldr	r3, [r4, #16]
 8011e60:	6023      	str	r3, [r4, #0]
 8011e62:	89a3      	ldrh	r3, [r4, #12]
 8011e64:	f043 0308 	orr.w	r3, r3, #8
 8011e68:	81a3      	strh	r3, [r4, #12]
 8011e6a:	6923      	ldr	r3, [r4, #16]
 8011e6c:	b94b      	cbnz	r3, 8011e82 <__swsetup_r+0x7a>
 8011e6e:	89a3      	ldrh	r3, [r4, #12]
 8011e70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e78:	d003      	beq.n	8011e82 <__swsetup_r+0x7a>
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	f000 f83f 	bl	8011f00 <__smakebuf_r>
 8011e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e86:	f013 0201 	ands.w	r2, r3, #1
 8011e8a:	d00a      	beq.n	8011ea2 <__swsetup_r+0x9a>
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	60a2      	str	r2, [r4, #8]
 8011e90:	6962      	ldr	r2, [r4, #20]
 8011e92:	4252      	negs	r2, r2
 8011e94:	61a2      	str	r2, [r4, #24]
 8011e96:	6922      	ldr	r2, [r4, #16]
 8011e98:	b942      	cbnz	r2, 8011eac <__swsetup_r+0xa4>
 8011e9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e9e:	d1c5      	bne.n	8011e2c <__swsetup_r+0x24>
 8011ea0:	bd38      	pop	{r3, r4, r5, pc}
 8011ea2:	0799      	lsls	r1, r3, #30
 8011ea4:	bf58      	it	pl
 8011ea6:	6962      	ldrpl	r2, [r4, #20]
 8011ea8:	60a2      	str	r2, [r4, #8]
 8011eaa:	e7f4      	b.n	8011e96 <__swsetup_r+0x8e>
 8011eac:	2000      	movs	r0, #0
 8011eae:	e7f7      	b.n	8011ea0 <__swsetup_r+0x98>
 8011eb0:	20000040 	.word	0x20000040

08011eb4 <__swhatbuf_r>:
 8011eb4:	b570      	push	{r4, r5, r6, lr}
 8011eb6:	460c      	mov	r4, r1
 8011eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ebc:	2900      	cmp	r1, #0
 8011ebe:	b096      	sub	sp, #88	@ 0x58
 8011ec0:	4615      	mov	r5, r2
 8011ec2:	461e      	mov	r6, r3
 8011ec4:	da0d      	bge.n	8011ee2 <__swhatbuf_r+0x2e>
 8011ec6:	89a3      	ldrh	r3, [r4, #12]
 8011ec8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ecc:	f04f 0100 	mov.w	r1, #0
 8011ed0:	bf14      	ite	ne
 8011ed2:	2340      	movne	r3, #64	@ 0x40
 8011ed4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ed8:	2000      	movs	r0, #0
 8011eda:	6031      	str	r1, [r6, #0]
 8011edc:	602b      	str	r3, [r5, #0]
 8011ede:	b016      	add	sp, #88	@ 0x58
 8011ee0:	bd70      	pop	{r4, r5, r6, pc}
 8011ee2:	466a      	mov	r2, sp
 8011ee4:	f000 f8f0 	bl	80120c8 <_fstat_r>
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	dbec      	blt.n	8011ec6 <__swhatbuf_r+0x12>
 8011eec:	9901      	ldr	r1, [sp, #4]
 8011eee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ef2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ef6:	4259      	negs	r1, r3
 8011ef8:	4159      	adcs	r1, r3
 8011efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011efe:	e7eb      	b.n	8011ed8 <__swhatbuf_r+0x24>

08011f00 <__smakebuf_r>:
 8011f00:	898b      	ldrh	r3, [r1, #12]
 8011f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f04:	079d      	lsls	r5, r3, #30
 8011f06:	4606      	mov	r6, r0
 8011f08:	460c      	mov	r4, r1
 8011f0a:	d507      	bpl.n	8011f1c <__smakebuf_r+0x1c>
 8011f0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f10:	6023      	str	r3, [r4, #0]
 8011f12:	6123      	str	r3, [r4, #16]
 8011f14:	2301      	movs	r3, #1
 8011f16:	6163      	str	r3, [r4, #20]
 8011f18:	b003      	add	sp, #12
 8011f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f1c:	ab01      	add	r3, sp, #4
 8011f1e:	466a      	mov	r2, sp
 8011f20:	f7ff ffc8 	bl	8011eb4 <__swhatbuf_r>
 8011f24:	9f00      	ldr	r7, [sp, #0]
 8011f26:	4605      	mov	r5, r0
 8011f28:	4639      	mov	r1, r7
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	f7ff fc26 	bl	801177c <_malloc_r>
 8011f30:	b948      	cbnz	r0, 8011f46 <__smakebuf_r+0x46>
 8011f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f36:	059a      	lsls	r2, r3, #22
 8011f38:	d4ee      	bmi.n	8011f18 <__smakebuf_r+0x18>
 8011f3a:	f023 0303 	bic.w	r3, r3, #3
 8011f3e:	f043 0302 	orr.w	r3, r3, #2
 8011f42:	81a3      	strh	r3, [r4, #12]
 8011f44:	e7e2      	b.n	8011f0c <__smakebuf_r+0xc>
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	6020      	str	r0, [r4, #0]
 8011f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f4e:	81a3      	strh	r3, [r4, #12]
 8011f50:	9b01      	ldr	r3, [sp, #4]
 8011f52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f56:	b15b      	cbz	r3, 8011f70 <__smakebuf_r+0x70>
 8011f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	f000 f84d 	bl	8011ffc <_isatty_r>
 8011f62:	b128      	cbz	r0, 8011f70 <__smakebuf_r+0x70>
 8011f64:	89a3      	ldrh	r3, [r4, #12]
 8011f66:	f023 0303 	bic.w	r3, r3, #3
 8011f6a:	f043 0301 	orr.w	r3, r3, #1
 8011f6e:	81a3      	strh	r3, [r4, #12]
 8011f70:	89a3      	ldrh	r3, [r4, #12]
 8011f72:	431d      	orrs	r5, r3
 8011f74:	81a5      	strh	r5, [r4, #12]
 8011f76:	e7cf      	b.n	8011f18 <__smakebuf_r+0x18>

08011f78 <_putc_r>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	460d      	mov	r5, r1
 8011f7c:	4614      	mov	r4, r2
 8011f7e:	4606      	mov	r6, r0
 8011f80:	b118      	cbz	r0, 8011f8a <_putc_r+0x12>
 8011f82:	6a03      	ldr	r3, [r0, #32]
 8011f84:	b90b      	cbnz	r3, 8011f8a <_putc_r+0x12>
 8011f86:	f7ff f98f 	bl	80112a8 <__sinit>
 8011f8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f8c:	07d8      	lsls	r0, r3, #31
 8011f8e:	d405      	bmi.n	8011f9c <_putc_r+0x24>
 8011f90:	89a3      	ldrh	r3, [r4, #12]
 8011f92:	0599      	lsls	r1, r3, #22
 8011f94:	d402      	bmi.n	8011f9c <_putc_r+0x24>
 8011f96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f98:	f7ff fa7d 	bl	8011496 <__retarget_lock_acquire_recursive>
 8011f9c:	68a3      	ldr	r3, [r4, #8]
 8011f9e:	3b01      	subs	r3, #1
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	60a3      	str	r3, [r4, #8]
 8011fa4:	da05      	bge.n	8011fb2 <_putc_r+0x3a>
 8011fa6:	69a2      	ldr	r2, [r4, #24]
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	db12      	blt.n	8011fd2 <_putc_r+0x5a>
 8011fac:	b2eb      	uxtb	r3, r5
 8011fae:	2b0a      	cmp	r3, #10
 8011fb0:	d00f      	beq.n	8011fd2 <_putc_r+0x5a>
 8011fb2:	6823      	ldr	r3, [r4, #0]
 8011fb4:	1c5a      	adds	r2, r3, #1
 8011fb6:	6022      	str	r2, [r4, #0]
 8011fb8:	701d      	strb	r5, [r3, #0]
 8011fba:	b2ed      	uxtb	r5, r5
 8011fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011fbe:	07da      	lsls	r2, r3, #31
 8011fc0:	d405      	bmi.n	8011fce <_putc_r+0x56>
 8011fc2:	89a3      	ldrh	r3, [r4, #12]
 8011fc4:	059b      	lsls	r3, r3, #22
 8011fc6:	d402      	bmi.n	8011fce <_putc_r+0x56>
 8011fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011fca:	f7ff fa65 	bl	8011498 <__retarget_lock_release_recursive>
 8011fce:	4628      	mov	r0, r5
 8011fd0:	bd70      	pop	{r4, r5, r6, pc}
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	4622      	mov	r2, r4
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	f7ff fed7 	bl	8011d8a <__swbuf_r>
 8011fdc:	4605      	mov	r5, r0
 8011fde:	e7ed      	b.n	8011fbc <_putc_r+0x44>

08011fe0 <strchr>:
 8011fe0:	b2c9      	uxtb	r1, r1
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fea:	b112      	cbz	r2, 8011ff2 <strchr+0x12>
 8011fec:	428a      	cmp	r2, r1
 8011fee:	d1f9      	bne.n	8011fe4 <strchr+0x4>
 8011ff0:	4770      	bx	lr
 8011ff2:	2900      	cmp	r1, #0
 8011ff4:	bf18      	it	ne
 8011ff6:	2000      	movne	r0, #0
 8011ff8:	4770      	bx	lr
	...

08011ffc <_isatty_r>:
 8011ffc:	b538      	push	{r3, r4, r5, lr}
 8011ffe:	4d06      	ldr	r5, [pc, #24]	@ (8012018 <_isatty_r+0x1c>)
 8012000:	2300      	movs	r3, #0
 8012002:	4604      	mov	r4, r0
 8012004:	4608      	mov	r0, r1
 8012006:	602b      	str	r3, [r5, #0]
 8012008:	f7f1 fb2d 	bl	8003666 <_isatty>
 801200c:	1c43      	adds	r3, r0, #1
 801200e:	d102      	bne.n	8012016 <_isatty_r+0x1a>
 8012010:	682b      	ldr	r3, [r5, #0]
 8012012:	b103      	cbz	r3, 8012016 <_isatty_r+0x1a>
 8012014:	6023      	str	r3, [r4, #0]
 8012016:	bd38      	pop	{r3, r4, r5, pc}
 8012018:	20001a2c 	.word	0x20001a2c

0801201c <_lseek_r>:
 801201c:	b538      	push	{r3, r4, r5, lr}
 801201e:	4d07      	ldr	r5, [pc, #28]	@ (801203c <_lseek_r+0x20>)
 8012020:	4604      	mov	r4, r0
 8012022:	4608      	mov	r0, r1
 8012024:	4611      	mov	r1, r2
 8012026:	2200      	movs	r2, #0
 8012028:	602a      	str	r2, [r5, #0]
 801202a:	461a      	mov	r2, r3
 801202c:	f7f1 fb26 	bl	800367c <_lseek>
 8012030:	1c43      	adds	r3, r0, #1
 8012032:	d102      	bne.n	801203a <_lseek_r+0x1e>
 8012034:	682b      	ldr	r3, [r5, #0]
 8012036:	b103      	cbz	r3, 801203a <_lseek_r+0x1e>
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	bd38      	pop	{r3, r4, r5, pc}
 801203c:	20001a2c 	.word	0x20001a2c

08012040 <_read_r>:
 8012040:	b538      	push	{r3, r4, r5, lr}
 8012042:	4d07      	ldr	r5, [pc, #28]	@ (8012060 <_read_r+0x20>)
 8012044:	4604      	mov	r4, r0
 8012046:	4608      	mov	r0, r1
 8012048:	4611      	mov	r1, r2
 801204a:	2200      	movs	r2, #0
 801204c:	602a      	str	r2, [r5, #0]
 801204e:	461a      	mov	r2, r3
 8012050:	f7f1 fad0 	bl	80035f4 <_read>
 8012054:	1c43      	adds	r3, r0, #1
 8012056:	d102      	bne.n	801205e <_read_r+0x1e>
 8012058:	682b      	ldr	r3, [r5, #0]
 801205a:	b103      	cbz	r3, 801205e <_read_r+0x1e>
 801205c:	6023      	str	r3, [r4, #0]
 801205e:	bd38      	pop	{r3, r4, r5, pc}
 8012060:	20001a2c 	.word	0x20001a2c

08012064 <_sbrk_r>:
 8012064:	b538      	push	{r3, r4, r5, lr}
 8012066:	4d06      	ldr	r5, [pc, #24]	@ (8012080 <_sbrk_r+0x1c>)
 8012068:	2300      	movs	r3, #0
 801206a:	4604      	mov	r4, r0
 801206c:	4608      	mov	r0, r1
 801206e:	602b      	str	r3, [r5, #0]
 8012070:	f7f1 fb12 	bl	8003698 <_sbrk>
 8012074:	1c43      	adds	r3, r0, #1
 8012076:	d102      	bne.n	801207e <_sbrk_r+0x1a>
 8012078:	682b      	ldr	r3, [r5, #0]
 801207a:	b103      	cbz	r3, 801207e <_sbrk_r+0x1a>
 801207c:	6023      	str	r3, [r4, #0]
 801207e:	bd38      	pop	{r3, r4, r5, pc}
 8012080:	20001a2c 	.word	0x20001a2c

08012084 <_write_r>:
 8012084:	b538      	push	{r3, r4, r5, lr}
 8012086:	4d07      	ldr	r5, [pc, #28]	@ (80120a4 <_write_r+0x20>)
 8012088:	4604      	mov	r4, r0
 801208a:	4608      	mov	r0, r1
 801208c:	4611      	mov	r1, r2
 801208e:	2200      	movs	r2, #0
 8012090:	602a      	str	r2, [r5, #0]
 8012092:	461a      	mov	r2, r3
 8012094:	f7f9 fcbc 	bl	800ba10 <_write>
 8012098:	1c43      	adds	r3, r0, #1
 801209a:	d102      	bne.n	80120a2 <_write_r+0x1e>
 801209c:	682b      	ldr	r3, [r5, #0]
 801209e:	b103      	cbz	r3, 80120a2 <_write_r+0x1e>
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	bd38      	pop	{r3, r4, r5, pc}
 80120a4:	20001a2c 	.word	0x20001a2c

080120a8 <_close_r>:
 80120a8:	b538      	push	{r3, r4, r5, lr}
 80120aa:	4d06      	ldr	r5, [pc, #24]	@ (80120c4 <_close_r+0x1c>)
 80120ac:	2300      	movs	r3, #0
 80120ae:	4604      	mov	r4, r0
 80120b0:	4608      	mov	r0, r1
 80120b2:	602b      	str	r3, [r5, #0]
 80120b4:	f7f1 fabb 	bl	800362e <_close>
 80120b8:	1c43      	adds	r3, r0, #1
 80120ba:	d102      	bne.n	80120c2 <_close_r+0x1a>
 80120bc:	682b      	ldr	r3, [r5, #0]
 80120be:	b103      	cbz	r3, 80120c2 <_close_r+0x1a>
 80120c0:	6023      	str	r3, [r4, #0]
 80120c2:	bd38      	pop	{r3, r4, r5, pc}
 80120c4:	20001a2c 	.word	0x20001a2c

080120c8 <_fstat_r>:
 80120c8:	b538      	push	{r3, r4, r5, lr}
 80120ca:	4d07      	ldr	r5, [pc, #28]	@ (80120e8 <_fstat_r+0x20>)
 80120cc:	2300      	movs	r3, #0
 80120ce:	4604      	mov	r4, r0
 80120d0:	4608      	mov	r0, r1
 80120d2:	4611      	mov	r1, r2
 80120d4:	602b      	str	r3, [r5, #0]
 80120d6:	f7f1 fab6 	bl	8003646 <_fstat>
 80120da:	1c43      	adds	r3, r0, #1
 80120dc:	d102      	bne.n	80120e4 <_fstat_r+0x1c>
 80120de:	682b      	ldr	r3, [r5, #0]
 80120e0:	b103      	cbz	r3, 80120e4 <_fstat_r+0x1c>
 80120e2:	6023      	str	r3, [r4, #0]
 80120e4:	bd38      	pop	{r3, r4, r5, pc}
 80120e6:	bf00      	nop
 80120e8:	20001a2c 	.word	0x20001a2c

080120ec <_free_r>:
 80120ec:	b538      	push	{r3, r4, r5, lr}
 80120ee:	4605      	mov	r5, r0
 80120f0:	2900      	cmp	r1, #0
 80120f2:	d041      	beq.n	8012178 <_free_r+0x8c>
 80120f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120f8:	1f0c      	subs	r4, r1, #4
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	bfb8      	it	lt
 80120fe:	18e4      	addlt	r4, r4, r3
 8012100:	f7ff fdf4 	bl	8011cec <__malloc_lock>
 8012104:	4a1d      	ldr	r2, [pc, #116]	@ (801217c <_free_r+0x90>)
 8012106:	6813      	ldr	r3, [r2, #0]
 8012108:	b933      	cbnz	r3, 8012118 <_free_r+0x2c>
 801210a:	6063      	str	r3, [r4, #4]
 801210c:	6014      	str	r4, [r2, #0]
 801210e:	4628      	mov	r0, r5
 8012110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012114:	f7ff bdf0 	b.w	8011cf8 <__malloc_unlock>
 8012118:	42a3      	cmp	r3, r4
 801211a:	d908      	bls.n	801212e <_free_r+0x42>
 801211c:	6820      	ldr	r0, [r4, #0]
 801211e:	1821      	adds	r1, r4, r0
 8012120:	428b      	cmp	r3, r1
 8012122:	bf01      	itttt	eq
 8012124:	6819      	ldreq	r1, [r3, #0]
 8012126:	685b      	ldreq	r3, [r3, #4]
 8012128:	1809      	addeq	r1, r1, r0
 801212a:	6021      	streq	r1, [r4, #0]
 801212c:	e7ed      	b.n	801210a <_free_r+0x1e>
 801212e:	461a      	mov	r2, r3
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	b10b      	cbz	r3, 8012138 <_free_r+0x4c>
 8012134:	42a3      	cmp	r3, r4
 8012136:	d9fa      	bls.n	801212e <_free_r+0x42>
 8012138:	6811      	ldr	r1, [r2, #0]
 801213a:	1850      	adds	r0, r2, r1
 801213c:	42a0      	cmp	r0, r4
 801213e:	d10b      	bne.n	8012158 <_free_r+0x6c>
 8012140:	6820      	ldr	r0, [r4, #0]
 8012142:	4401      	add	r1, r0
 8012144:	1850      	adds	r0, r2, r1
 8012146:	4283      	cmp	r3, r0
 8012148:	6011      	str	r1, [r2, #0]
 801214a:	d1e0      	bne.n	801210e <_free_r+0x22>
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	6053      	str	r3, [r2, #4]
 8012152:	4408      	add	r0, r1
 8012154:	6010      	str	r0, [r2, #0]
 8012156:	e7da      	b.n	801210e <_free_r+0x22>
 8012158:	d902      	bls.n	8012160 <_free_r+0x74>
 801215a:	230c      	movs	r3, #12
 801215c:	602b      	str	r3, [r5, #0]
 801215e:	e7d6      	b.n	801210e <_free_r+0x22>
 8012160:	6820      	ldr	r0, [r4, #0]
 8012162:	1821      	adds	r1, r4, r0
 8012164:	428b      	cmp	r3, r1
 8012166:	bf04      	itt	eq
 8012168:	6819      	ldreq	r1, [r3, #0]
 801216a:	685b      	ldreq	r3, [r3, #4]
 801216c:	6063      	str	r3, [r4, #4]
 801216e:	bf04      	itt	eq
 8012170:	1809      	addeq	r1, r1, r0
 8012172:	6021      	streq	r1, [r4, #0]
 8012174:	6054      	str	r4, [r2, #4]
 8012176:	e7ca      	b.n	801210e <_free_r+0x22>
 8012178:	bd38      	pop	{r3, r4, r5, pc}
 801217a:	bf00      	nop
 801217c:	20001a28 	.word	0x20001a28

08012180 <roundf>:
 8012180:	ee10 0a10 	vmov	r0, s0
 8012184:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012188:	3a7f      	subs	r2, #127	@ 0x7f
 801218a:	2a16      	cmp	r2, #22
 801218c:	dc15      	bgt.n	80121ba <roundf+0x3a>
 801218e:	2a00      	cmp	r2, #0
 8012190:	da08      	bge.n	80121a4 <roundf+0x24>
 8012192:	3201      	adds	r2, #1
 8012194:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8012198:	d101      	bne.n	801219e <roundf+0x1e>
 801219a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801219e:	ee00 3a10 	vmov	s0, r3
 80121a2:	4770      	bx	lr
 80121a4:	4907      	ldr	r1, [pc, #28]	@ (80121c4 <roundf+0x44>)
 80121a6:	4111      	asrs	r1, r2
 80121a8:	4201      	tst	r1, r0
 80121aa:	d0fa      	beq.n	80121a2 <roundf+0x22>
 80121ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80121b0:	4113      	asrs	r3, r2
 80121b2:	4403      	add	r3, r0
 80121b4:	ea23 0301 	bic.w	r3, r3, r1
 80121b8:	e7f1      	b.n	801219e <roundf+0x1e>
 80121ba:	2a80      	cmp	r2, #128	@ 0x80
 80121bc:	d1f1      	bne.n	80121a2 <roundf+0x22>
 80121be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80121c2:	4770      	bx	lr
 80121c4:	007fffff 	.word	0x007fffff

080121c8 <powf>:
 80121c8:	b508      	push	{r3, lr}
 80121ca:	ed2d 8b04 	vpush	{d8-d9}
 80121ce:	eeb0 8a60 	vmov.f32	s16, s1
 80121d2:	eeb0 9a40 	vmov.f32	s18, s0
 80121d6:	f000 f859 	bl	801228c <__ieee754_powf>
 80121da:	eeb4 8a48 	vcmp.f32	s16, s16
 80121de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e2:	eef0 8a40 	vmov.f32	s17, s0
 80121e6:	d63e      	bvs.n	8012266 <powf+0x9e>
 80121e8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80121ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f0:	d112      	bne.n	8012218 <powf+0x50>
 80121f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80121f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fa:	d039      	beq.n	8012270 <powf+0xa8>
 80121fc:	eeb0 0a48 	vmov.f32	s0, s16
 8012200:	f000 f839 	bl	8012276 <finitef>
 8012204:	b378      	cbz	r0, 8012266 <powf+0x9e>
 8012206:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220e:	d52a      	bpl.n	8012266 <powf+0x9e>
 8012210:	f7ff f916 	bl	8011440 <__errno>
 8012214:	2322      	movs	r3, #34	@ 0x22
 8012216:	e014      	b.n	8012242 <powf+0x7a>
 8012218:	f000 f82d 	bl	8012276 <finitef>
 801221c:	b998      	cbnz	r0, 8012246 <powf+0x7e>
 801221e:	eeb0 0a49 	vmov.f32	s0, s18
 8012222:	f000 f828 	bl	8012276 <finitef>
 8012226:	b170      	cbz	r0, 8012246 <powf+0x7e>
 8012228:	eeb0 0a48 	vmov.f32	s0, s16
 801222c:	f000 f823 	bl	8012276 <finitef>
 8012230:	b148      	cbz	r0, 8012246 <powf+0x7e>
 8012232:	eef4 8a68 	vcmp.f32	s17, s17
 8012236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223a:	d7e9      	bvc.n	8012210 <powf+0x48>
 801223c:	f7ff f900 	bl	8011440 <__errno>
 8012240:	2321      	movs	r3, #33	@ 0x21
 8012242:	6003      	str	r3, [r0, #0]
 8012244:	e00f      	b.n	8012266 <powf+0x9e>
 8012246:	eef5 8a40 	vcmp.f32	s17, #0.0
 801224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224e:	d10a      	bne.n	8012266 <powf+0x9e>
 8012250:	eeb0 0a49 	vmov.f32	s0, s18
 8012254:	f000 f80f 	bl	8012276 <finitef>
 8012258:	b128      	cbz	r0, 8012266 <powf+0x9e>
 801225a:	eeb0 0a48 	vmov.f32	s0, s16
 801225e:	f000 f80a 	bl	8012276 <finitef>
 8012262:	2800      	cmp	r0, #0
 8012264:	d1d4      	bne.n	8012210 <powf+0x48>
 8012266:	eeb0 0a68 	vmov.f32	s0, s17
 801226a:	ecbd 8b04 	vpop	{d8-d9}
 801226e:	bd08      	pop	{r3, pc}
 8012270:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8012274:	e7f7      	b.n	8012266 <powf+0x9e>

08012276 <finitef>:
 8012276:	ee10 3a10 	vmov	r3, s0
 801227a:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801227e:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8012282:	bfac      	ite	ge
 8012284:	2000      	movge	r0, #0
 8012286:	2001      	movlt	r0, #1
 8012288:	4770      	bx	lr
	...

0801228c <__ieee754_powf>:
 801228c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012290:	ee10 4a90 	vmov	r4, s1
 8012294:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8012298:	ed2d 8b02 	vpush	{d8}
 801229c:	ee10 6a10 	vmov	r6, s0
 80122a0:	eeb0 8a40 	vmov.f32	s16, s0
 80122a4:	eef0 8a60 	vmov.f32	s17, s1
 80122a8:	d10c      	bne.n	80122c4 <__ieee754_powf+0x38>
 80122aa:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80122ae:	0076      	lsls	r6, r6, #1
 80122b0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80122b4:	f240 8274 	bls.w	80127a0 <__ieee754_powf+0x514>
 80122b8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80122bc:	ecbd 8b02 	vpop	{d8}
 80122c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122c4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80122c8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80122cc:	d802      	bhi.n	80122d4 <__ieee754_powf+0x48>
 80122ce:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80122d2:	d908      	bls.n	80122e6 <__ieee754_powf+0x5a>
 80122d4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80122d8:	d1ee      	bne.n	80122b8 <__ieee754_powf+0x2c>
 80122da:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80122de:	0064      	lsls	r4, r4, #1
 80122e0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80122e4:	e7e6      	b.n	80122b4 <__ieee754_powf+0x28>
 80122e6:	2e00      	cmp	r6, #0
 80122e8:	da1f      	bge.n	801232a <__ieee754_powf+0x9e>
 80122ea:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80122ee:	f080 8260 	bcs.w	80127b2 <__ieee754_powf+0x526>
 80122f2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80122f6:	d32f      	bcc.n	8012358 <__ieee754_powf+0xcc>
 80122f8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80122fc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8012300:	fa49 f503 	asr.w	r5, r9, r3
 8012304:	fa05 f303 	lsl.w	r3, r5, r3
 8012308:	454b      	cmp	r3, r9
 801230a:	d123      	bne.n	8012354 <__ieee754_powf+0xc8>
 801230c:	f005 0501 	and.w	r5, r5, #1
 8012310:	f1c5 0502 	rsb	r5, r5, #2
 8012314:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8012318:	d11f      	bne.n	801235a <__ieee754_powf+0xce>
 801231a:	2c00      	cmp	r4, #0
 801231c:	f280 8246 	bge.w	80127ac <__ieee754_powf+0x520>
 8012320:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012324:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012328:	e7c8      	b.n	80122bc <__ieee754_powf+0x30>
 801232a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801232e:	d111      	bne.n	8012354 <__ieee754_powf+0xc8>
 8012330:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8012334:	f000 8234 	beq.w	80127a0 <__ieee754_powf+0x514>
 8012338:	d906      	bls.n	8012348 <__ieee754_powf+0xbc>
 801233a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8012650 <__ieee754_powf+0x3c4>
 801233e:	2c00      	cmp	r4, #0
 8012340:	bfa8      	it	ge
 8012342:	eeb0 0a68 	vmovge.f32	s0, s17
 8012346:	e7b9      	b.n	80122bc <__ieee754_powf+0x30>
 8012348:	2c00      	cmp	r4, #0
 801234a:	f280 822c 	bge.w	80127a6 <__ieee754_powf+0x51a>
 801234e:	eeb1 0a68 	vneg.f32	s0, s17
 8012352:	e7b3      	b.n	80122bc <__ieee754_powf+0x30>
 8012354:	2500      	movs	r5, #0
 8012356:	e7dd      	b.n	8012314 <__ieee754_powf+0x88>
 8012358:	2500      	movs	r5, #0
 801235a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801235e:	d102      	bne.n	8012366 <__ieee754_powf+0xda>
 8012360:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012364:	e7aa      	b.n	80122bc <__ieee754_powf+0x30>
 8012366:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801236a:	f040 8227 	bne.w	80127bc <__ieee754_powf+0x530>
 801236e:	2e00      	cmp	r6, #0
 8012370:	f2c0 8224 	blt.w	80127bc <__ieee754_powf+0x530>
 8012374:	eeb0 0a48 	vmov.f32	s0, s16
 8012378:	ecbd 8b02 	vpop	{d8}
 801237c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012380:	f000 bae5 	b.w	801294e <__ieee754_sqrtf>
 8012384:	2d01      	cmp	r5, #1
 8012386:	d199      	bne.n	80122bc <__ieee754_powf+0x30>
 8012388:	eeb1 0a40 	vneg.f32	s0, s0
 801238c:	e796      	b.n	80122bc <__ieee754_powf+0x30>
 801238e:	0ff0      	lsrs	r0, r6, #31
 8012390:	3801      	subs	r0, #1
 8012392:	ea55 0300 	orrs.w	r3, r5, r0
 8012396:	d104      	bne.n	80123a2 <__ieee754_powf+0x116>
 8012398:	ee38 8a48 	vsub.f32	s16, s16, s16
 801239c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80123a0:	e78c      	b.n	80122bc <__ieee754_powf+0x30>
 80123a2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80123a6:	d96d      	bls.n	8012484 <__ieee754_powf+0x1f8>
 80123a8:	4baa      	ldr	r3, [pc, #680]	@ (8012654 <__ieee754_powf+0x3c8>)
 80123aa:	4598      	cmp	r8, r3
 80123ac:	d808      	bhi.n	80123c0 <__ieee754_powf+0x134>
 80123ae:	2c00      	cmp	r4, #0
 80123b0:	da0b      	bge.n	80123ca <__ieee754_powf+0x13e>
 80123b2:	2000      	movs	r0, #0
 80123b4:	ecbd 8b02 	vpop	{d8}
 80123b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123bc:	f000 ba54 	b.w	8012868 <__math_oflowf>
 80123c0:	4ba5      	ldr	r3, [pc, #660]	@ (8012658 <__ieee754_powf+0x3cc>)
 80123c2:	4598      	cmp	r8, r3
 80123c4:	d908      	bls.n	80123d8 <__ieee754_powf+0x14c>
 80123c6:	2c00      	cmp	r4, #0
 80123c8:	dcf3      	bgt.n	80123b2 <__ieee754_powf+0x126>
 80123ca:	2000      	movs	r0, #0
 80123cc:	ecbd 8b02 	vpop	{d8}
 80123d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123d4:	f000 ba42 	b.w	801285c <__math_uflowf>
 80123d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80123dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80123e0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801265c <__ieee754_powf+0x3d0>
 80123e4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80123e8:	eee0 6a67 	vfms.f32	s13, s0, s15
 80123ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80123f0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80123f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80123f8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8012660 <__ieee754_powf+0x3d4>
 80123fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012400:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8012664 <__ieee754_powf+0x3d8>
 8012404:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8012408:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8012668 <__ieee754_powf+0x3dc>
 801240c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012410:	eeb0 7a67 	vmov.f32	s14, s15
 8012414:	eea0 7a26 	vfma.f32	s14, s0, s13
 8012418:	ee17 3a10 	vmov	r3, s14
 801241c:	f36f 030b 	bfc	r3, #0, #12
 8012420:	ee07 3a10 	vmov	s14, r3
 8012424:	eeb0 6a47 	vmov.f32	s12, s14
 8012428:	eea0 6a66 	vfms.f32	s12, s0, s13
 801242c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012430:	3d01      	subs	r5, #1
 8012432:	4305      	orrs	r5, r0
 8012434:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012438:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801243c:	f36f 040b 	bfc	r4, #0, #12
 8012440:	bf18      	it	ne
 8012442:	eeb0 8a66 	vmovne.f32	s16, s13
 8012446:	ee06 4a90 	vmov	s13, r4
 801244a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801244e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8012452:	ee67 7a26 	vmul.f32	s15, s14, s13
 8012456:	eee6 0a07 	vfma.f32	s1, s12, s14
 801245a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801245e:	ee17 1a10 	vmov	r1, s14
 8012462:	2900      	cmp	r1, #0
 8012464:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012468:	f340 80dd 	ble.w	8012626 <__ieee754_powf+0x39a>
 801246c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8012470:	f240 80ca 	bls.w	8012608 <__ieee754_powf+0x37c>
 8012474:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247c:	bf4c      	ite	mi
 801247e:	2001      	movmi	r0, #1
 8012480:	2000      	movpl	r0, #0
 8012482:	e797      	b.n	80123b4 <__ieee754_powf+0x128>
 8012484:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8012488:	bf01      	itttt	eq
 801248a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801266c <__ieee754_powf+0x3e0>
 801248e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8012492:	f06f 0317 	mvneq.w	r3, #23
 8012496:	ee17 7a90 	vmoveq	r7, s15
 801249a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801249e:	bf18      	it	ne
 80124a0:	2300      	movne	r3, #0
 80124a2:	3a7f      	subs	r2, #127	@ 0x7f
 80124a4:	441a      	add	r2, r3
 80124a6:	4b72      	ldr	r3, [pc, #456]	@ (8012670 <__ieee754_powf+0x3e4>)
 80124a8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80124ac:	429f      	cmp	r7, r3
 80124ae:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80124b2:	dd06      	ble.n	80124c2 <__ieee754_powf+0x236>
 80124b4:	4b6f      	ldr	r3, [pc, #444]	@ (8012674 <__ieee754_powf+0x3e8>)
 80124b6:	429f      	cmp	r7, r3
 80124b8:	f340 80a4 	ble.w	8012604 <__ieee754_powf+0x378>
 80124bc:	3201      	adds	r2, #1
 80124be:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80124c2:	2600      	movs	r6, #0
 80124c4:	4b6c      	ldr	r3, [pc, #432]	@ (8012678 <__ieee754_powf+0x3ec>)
 80124c6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80124ca:	ee07 1a10 	vmov	s14, r1
 80124ce:	edd3 5a00 	vldr	s11, [r3]
 80124d2:	4b6a      	ldr	r3, [pc, #424]	@ (801267c <__ieee754_powf+0x3f0>)
 80124d4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80124d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80124dc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80124e0:	1049      	asrs	r1, r1, #1
 80124e2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80124e6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80124ea:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80124ee:	ee37 6a65 	vsub.f32	s12, s14, s11
 80124f2:	ee07 1a90 	vmov	s15, r1
 80124f6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80124fa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80124fe:	ee15 7a10 	vmov	r7, s10
 8012502:	401f      	ands	r7, r3
 8012504:	ee06 7a90 	vmov	s13, r7
 8012508:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801250c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8012510:	ee65 7a05 	vmul.f32	s15, s10, s10
 8012514:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8012518:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8012680 <__ieee754_powf+0x3f4>
 801251c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8012684 <__ieee754_powf+0x3f8>
 8012520:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012524:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8012688 <__ieee754_powf+0x3fc>
 8012528:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801252c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801265c <__ieee754_powf+0x3d0>
 8012530:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012534:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801268c <__ieee754_powf+0x400>
 8012538:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801253c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8012690 <__ieee754_powf+0x404>
 8012540:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012544:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012548:	ee35 7a26 	vadd.f32	s14, s10, s13
 801254c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8012550:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012554:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8012558:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801255c:	eef0 5a67 	vmov.f32	s11, s15
 8012560:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8012564:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012568:	ee15 1a90 	vmov	r1, s11
 801256c:	4019      	ands	r1, r3
 801256e:	ee05 1a90 	vmov	s11, r1
 8012572:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012576:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801257e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012582:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012586:	eeb0 6a67 	vmov.f32	s12, s15
 801258a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801258e:	ee16 1a10 	vmov	r1, s12
 8012592:	4019      	ands	r1, r3
 8012594:	ee06 1a10 	vmov	s12, r1
 8012598:	eeb0 7a46 	vmov.f32	s14, s12
 801259c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80125a0:	493c      	ldr	r1, [pc, #240]	@ (8012694 <__ieee754_powf+0x408>)
 80125a2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80125a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125aa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8012698 <__ieee754_powf+0x40c>
 80125ae:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801269c <__ieee754_powf+0x410>
 80125b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125b6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80126a0 <__ieee754_powf+0x414>
 80125ba:	eee6 7a07 	vfma.f32	s15, s12, s14
 80125be:	ed91 7a00 	vldr	s14, [r1]
 80125c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125c6:	ee07 2a10 	vmov	s14, r2
 80125ca:	4a36      	ldr	r2, [pc, #216]	@ (80126a4 <__ieee754_powf+0x418>)
 80125cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80125d0:	eeb0 7a67 	vmov.f32	s14, s15
 80125d4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80125d8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80125dc:	ed92 5a00 	vldr	s10, [r2]
 80125e0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80125e4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80125e8:	ee17 2a10 	vmov	r2, s14
 80125ec:	401a      	ands	r2, r3
 80125ee:	ee07 2a10 	vmov	s14, r2
 80125f2:	ee77 6a66 	vsub.f32	s13, s14, s13
 80125f6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80125fa:	eee6 6a65 	vfms.f32	s13, s12, s11
 80125fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012602:	e715      	b.n	8012430 <__ieee754_powf+0x1a4>
 8012604:	2601      	movs	r6, #1
 8012606:	e75d      	b.n	80124c4 <__ieee754_powf+0x238>
 8012608:	d152      	bne.n	80126b0 <__ieee754_powf+0x424>
 801260a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80126a8 <__ieee754_powf+0x41c>
 801260e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012612:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012616:	eef4 6ac7 	vcmpe.f32	s13, s14
 801261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801261e:	f73f af29 	bgt.w	8012474 <__ieee754_powf+0x1e8>
 8012622:	2386      	movs	r3, #134	@ 0x86
 8012624:	e048      	b.n	80126b8 <__ieee754_powf+0x42c>
 8012626:	4a21      	ldr	r2, [pc, #132]	@ (80126ac <__ieee754_powf+0x420>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d907      	bls.n	801263c <__ieee754_powf+0x3b0>
 801262c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012634:	bf4c      	ite	mi
 8012636:	2001      	movmi	r0, #1
 8012638:	2000      	movpl	r0, #0
 801263a:	e6c7      	b.n	80123cc <__ieee754_powf+0x140>
 801263c:	d138      	bne.n	80126b0 <__ieee754_powf+0x424>
 801263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012642:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801264a:	dbea      	blt.n	8012622 <__ieee754_powf+0x396>
 801264c:	e7ee      	b.n	801262c <__ieee754_powf+0x3a0>
 801264e:	bf00      	nop
 8012650:	00000000 	.word	0x00000000
 8012654:	3f7ffff3 	.word	0x3f7ffff3
 8012658:	3f800007 	.word	0x3f800007
 801265c:	3eaaaaab 	.word	0x3eaaaaab
 8012660:	3fb8aa00 	.word	0x3fb8aa00
 8012664:	3fb8aa3b 	.word	0x3fb8aa3b
 8012668:	36eca570 	.word	0x36eca570
 801266c:	4b800000 	.word	0x4b800000
 8012670:	001cc471 	.word	0x001cc471
 8012674:	005db3d6 	.word	0x005db3d6
 8012678:	08014bf4 	.word	0x08014bf4
 801267c:	fffff000 	.word	0xfffff000
 8012680:	3e6c3255 	.word	0x3e6c3255
 8012684:	3e53f142 	.word	0x3e53f142
 8012688:	3e8ba305 	.word	0x3e8ba305
 801268c:	3edb6db7 	.word	0x3edb6db7
 8012690:	3f19999a 	.word	0x3f19999a
 8012694:	08014be4 	.word	0x08014be4
 8012698:	3f76384f 	.word	0x3f76384f
 801269c:	3f763800 	.word	0x3f763800
 80126a0:	369dc3a0 	.word	0x369dc3a0
 80126a4:	08014bec 	.word	0x08014bec
 80126a8:	3338aa3c 	.word	0x3338aa3c
 80126ac:	43160000 	.word	0x43160000
 80126b0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80126b4:	d96f      	bls.n	8012796 <__ieee754_powf+0x50a>
 80126b6:	15db      	asrs	r3, r3, #23
 80126b8:	3b7e      	subs	r3, #126	@ 0x7e
 80126ba:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80126be:	4118      	asrs	r0, r3
 80126c0:	4408      	add	r0, r1
 80126c2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80126c6:	4a4e      	ldr	r2, [pc, #312]	@ (8012800 <__ieee754_powf+0x574>)
 80126c8:	3b7f      	subs	r3, #127	@ 0x7f
 80126ca:	411a      	asrs	r2, r3
 80126cc:	4002      	ands	r2, r0
 80126ce:	ee07 2a10 	vmov	s14, r2
 80126d2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80126d6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80126da:	f1c3 0317 	rsb	r3, r3, #23
 80126de:	4118      	asrs	r0, r3
 80126e0:	2900      	cmp	r1, #0
 80126e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126e6:	bfb8      	it	lt
 80126e8:	4240      	neglt	r0, r0
 80126ea:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80126ee:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8012804 <__ieee754_powf+0x578>
 80126f2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8012808 <__ieee754_powf+0x57c>
 80126f6:	ee16 3a90 	vmov	r3, s13
 80126fa:	f36f 030b 	bfc	r3, #0, #12
 80126fe:	ee06 3a90 	vmov	s13, r3
 8012702:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012706:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801270a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801270e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801280c <__ieee754_powf+0x580>
 8012712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012716:	eee0 7a87 	vfma.f32	s15, s1, s14
 801271a:	eeb0 7a67 	vmov.f32	s14, s15
 801271e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8012722:	eef0 5a47 	vmov.f32	s11, s14
 8012726:	eee6 5ac6 	vfms.f32	s11, s13, s12
 801272a:	ee67 6a07 	vmul.f32	s13, s14, s14
 801272e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012732:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8012810 <__ieee754_powf+0x584>
 8012736:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8012814 <__ieee754_powf+0x588>
 801273a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801273e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8012818 <__ieee754_powf+0x58c>
 8012742:	eee6 5a26 	vfma.f32	s11, s12, s13
 8012746:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 801281c <__ieee754_powf+0x590>
 801274a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801274e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8012820 <__ieee754_powf+0x594>
 8012752:	eee6 5a26 	vfma.f32	s11, s12, s13
 8012756:	eeb0 6a47 	vmov.f32	s12, s14
 801275a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801275e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012762:	ee67 5a06 	vmul.f32	s11, s14, s12
 8012766:	ee36 6a66 	vsub.f32	s12, s12, s13
 801276a:	eee7 7a27 	vfma.f32	s15, s14, s15
 801276e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8012772:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801277a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801277e:	ee10 3a10 	vmov	r3, s0
 8012782:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012786:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801278a:	da06      	bge.n	801279a <__ieee754_powf+0x50e>
 801278c:	f000 f872 	bl	8012874 <scalbnf>
 8012790:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012794:	e592      	b.n	80122bc <__ieee754_powf+0x30>
 8012796:	2000      	movs	r0, #0
 8012798:	e7a7      	b.n	80126ea <__ieee754_powf+0x45e>
 801279a:	ee00 3a10 	vmov	s0, r3
 801279e:	e7f7      	b.n	8012790 <__ieee754_powf+0x504>
 80127a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80127a4:	e58a      	b.n	80122bc <__ieee754_powf+0x30>
 80127a6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8012824 <__ieee754_powf+0x598>
 80127aa:	e587      	b.n	80122bc <__ieee754_powf+0x30>
 80127ac:	eeb0 0a48 	vmov.f32	s0, s16
 80127b0:	e584      	b.n	80122bc <__ieee754_powf+0x30>
 80127b2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80127b6:	f43f adbb 	beq.w	8012330 <__ieee754_powf+0xa4>
 80127ba:	2502      	movs	r5, #2
 80127bc:	eeb0 0a48 	vmov.f32	s0, s16
 80127c0:	f000 f8be 	bl	8012940 <fabsf>
 80127c4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80127c8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80127cc:	4647      	mov	r7, r8
 80127ce:	d003      	beq.n	80127d8 <__ieee754_powf+0x54c>
 80127d0:	f1b8 0f00 	cmp.w	r8, #0
 80127d4:	f47f addb 	bne.w	801238e <__ieee754_powf+0x102>
 80127d8:	2c00      	cmp	r4, #0
 80127da:	bfbc      	itt	lt
 80127dc:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80127e0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80127e4:	2e00      	cmp	r6, #0
 80127e6:	f6bf ad69 	bge.w	80122bc <__ieee754_powf+0x30>
 80127ea:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80127ee:	ea58 0805 	orrs.w	r8, r8, r5
 80127f2:	f47f adc7 	bne.w	8012384 <__ieee754_powf+0xf8>
 80127f6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80127fa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80127fe:	e55d      	b.n	80122bc <__ieee754_powf+0x30>
 8012800:	ff800000 	.word	0xff800000
 8012804:	3f317218 	.word	0x3f317218
 8012808:	3f317200 	.word	0x3f317200
 801280c:	35bfbe8c 	.word	0x35bfbe8c
 8012810:	b5ddea0e 	.word	0xb5ddea0e
 8012814:	3331bb4c 	.word	0x3331bb4c
 8012818:	388ab355 	.word	0x388ab355
 801281c:	bb360b61 	.word	0xbb360b61
 8012820:	3e2aaaab 	.word	0x3e2aaaab
 8012824:	00000000 	.word	0x00000000

08012828 <with_errnof>:
 8012828:	b510      	push	{r4, lr}
 801282a:	ed2d 8b02 	vpush	{d8}
 801282e:	eeb0 8a40 	vmov.f32	s16, s0
 8012832:	4604      	mov	r4, r0
 8012834:	f7fe fe04 	bl	8011440 <__errno>
 8012838:	eeb0 0a48 	vmov.f32	s0, s16
 801283c:	ecbd 8b02 	vpop	{d8}
 8012840:	6004      	str	r4, [r0, #0]
 8012842:	bd10      	pop	{r4, pc}

08012844 <xflowf>:
 8012844:	b130      	cbz	r0, 8012854 <xflowf+0x10>
 8012846:	eef1 7a40 	vneg.f32	s15, s0
 801284a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801284e:	2022      	movs	r0, #34	@ 0x22
 8012850:	f7ff bfea 	b.w	8012828 <with_errnof>
 8012854:	eef0 7a40 	vmov.f32	s15, s0
 8012858:	e7f7      	b.n	801284a <xflowf+0x6>
	...

0801285c <__math_uflowf>:
 801285c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012864 <__math_uflowf+0x8>
 8012860:	f7ff bff0 	b.w	8012844 <xflowf>
 8012864:	10000000 	.word	0x10000000

08012868 <__math_oflowf>:
 8012868:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012870 <__math_oflowf+0x8>
 801286c:	f7ff bfea 	b.w	8012844 <xflowf>
 8012870:	70000000 	.word	0x70000000

08012874 <scalbnf>:
 8012874:	ee10 3a10 	vmov	r3, s0
 8012878:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801287c:	d02b      	beq.n	80128d6 <scalbnf+0x62>
 801287e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012882:	d302      	bcc.n	801288a <scalbnf+0x16>
 8012884:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012888:	4770      	bx	lr
 801288a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801288e:	d123      	bne.n	80128d8 <scalbnf+0x64>
 8012890:	4b24      	ldr	r3, [pc, #144]	@ (8012924 <scalbnf+0xb0>)
 8012892:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012928 <scalbnf+0xb4>
 8012896:	4298      	cmp	r0, r3
 8012898:	ee20 0a27 	vmul.f32	s0, s0, s15
 801289c:	db17      	blt.n	80128ce <scalbnf+0x5a>
 801289e:	ee10 3a10 	vmov	r3, s0
 80128a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80128a6:	3a19      	subs	r2, #25
 80128a8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80128ac:	4288      	cmp	r0, r1
 80128ae:	dd15      	ble.n	80128dc <scalbnf+0x68>
 80128b0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801292c <scalbnf+0xb8>
 80128b4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012930 <scalbnf+0xbc>
 80128b8:	ee10 3a10 	vmov	r3, s0
 80128bc:	eeb0 7a67 	vmov.f32	s14, s15
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	bfb8      	it	lt
 80128c4:	eef0 7a66 	vmovlt.f32	s15, s13
 80128c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80128cc:	4770      	bx	lr
 80128ce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012934 <scalbnf+0xc0>
 80128d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80128d6:	4770      	bx	lr
 80128d8:	0dd2      	lsrs	r2, r2, #23
 80128da:	e7e5      	b.n	80128a8 <scalbnf+0x34>
 80128dc:	4410      	add	r0, r2
 80128de:	28fe      	cmp	r0, #254	@ 0xfe
 80128e0:	dce6      	bgt.n	80128b0 <scalbnf+0x3c>
 80128e2:	2800      	cmp	r0, #0
 80128e4:	dd06      	ble.n	80128f4 <scalbnf+0x80>
 80128e6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80128ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80128ee:	ee00 3a10 	vmov	s0, r3
 80128f2:	4770      	bx	lr
 80128f4:	f110 0f16 	cmn.w	r0, #22
 80128f8:	da09      	bge.n	801290e <scalbnf+0x9a>
 80128fa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012934 <scalbnf+0xc0>
 80128fe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012938 <scalbnf+0xc4>
 8012902:	ee10 3a10 	vmov	r3, s0
 8012906:	eeb0 7a67 	vmov.f32	s14, s15
 801290a:	2b00      	cmp	r3, #0
 801290c:	e7d9      	b.n	80128c2 <scalbnf+0x4e>
 801290e:	3019      	adds	r0, #25
 8012910:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012914:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012918:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801293c <scalbnf+0xc8>
 801291c:	ee07 3a90 	vmov	s15, r3
 8012920:	e7d7      	b.n	80128d2 <scalbnf+0x5e>
 8012922:	bf00      	nop
 8012924:	ffff3cb0 	.word	0xffff3cb0
 8012928:	4c000000 	.word	0x4c000000
 801292c:	7149f2ca 	.word	0x7149f2ca
 8012930:	f149f2ca 	.word	0xf149f2ca
 8012934:	0da24260 	.word	0x0da24260
 8012938:	8da24260 	.word	0x8da24260
 801293c:	33000000 	.word	0x33000000

08012940 <fabsf>:
 8012940:	ee10 3a10 	vmov	r3, s0
 8012944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012948:	ee00 3a10 	vmov	s0, r3
 801294c:	4770      	bx	lr

0801294e <__ieee754_sqrtf>:
 801294e:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012952:	4770      	bx	lr

08012954 <_init>:
 8012954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012956:	bf00      	nop
 8012958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801295a:	bc08      	pop	{r3}
 801295c:	469e      	mov	lr, r3
 801295e:	4770      	bx	lr

08012960 <_fini>:
 8012960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012962:	bf00      	nop
 8012964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012966:	bc08      	pop	{r3}
 8012968:	469e      	mov	lr, r3
 801296a:	4770      	bx	lr
